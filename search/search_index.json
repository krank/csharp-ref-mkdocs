{"config":{"lang":["sv"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"C# snabbreferens","text":"<p>Detta \u00e4r en hemsida med f\u00f6renklade f\u00f6rklaringar och exempel f\u00f6r C# och Visual Studio Code. Tanken \u00e4r att den ska kunna anv\u00e4ndas som referensverk f\u00f6r gymnasieelever som l\u00e4ser kurserna Programmering 1 och Programmering 2.</p> <p>Se \u00e4ven:</p> <ul> <li>Progdocs \u2013 en portal med olika dokumentations-sajter som denna.</li> <li>Unity \u2013 en sida med f\u00f6renklade f\u00f6rklaringar och exempel f\u00f6r Unity och C#</li> </ul>"},{"location":"#vad-behover-jag-forst","title":"Vad beh\u00f6ver jag f\u00f6rst?","text":"<ul> <li>Installera .NET SDK \u2013 version 8 eller senare: https://dotnet.microsoft.com/en-us/download</li> <li>Installera Visual Studio Code</li> <li>Och l\u00e4mpliga extensions.</li> <li>Installera Git-scm och st\u00e4ll in namn och email.</li> <li>Kolla lathunden f\u00f6r hur man skapar nya projekt.</li> </ul> <p>Det enklaste s\u00e4ttet att installera .NET SDK, Visual Studio Code och Git-scm \u00e4r via winget. \u00d6ppna ett terminalf\u00f6nster/kommandotolken och k\u00f6r:</p> <pre><code>winget install Microsoft.VisualStudioCode\nwinget install git.git\nwinget install Microsoft.DotNet.SDK.9\n</code></pre> <p>Winget b\u00f6r finnas och fungera i Windows 10 och 11; anv\u00e4nder du en \u00e4ldre version av windows kanske du f\u00e5r installera manuellt ist\u00e4llet. Det kan ocks\u00e5 vara bra att k\u00f6ra Windows Update f\u00f6rst, och installera alla tillg\u00e4ngliga uppdateringar (inklusive de man bara f\u00e5r om man klickar \"S\u00f6k online\u2026\"</p> <p>Info</p> <p>TIPS: winget kan anv\u00e4ndas f\u00f6r att installera allt m\u00f6jligt, och kan ocks\u00e5 h\u00e5lla programmen uppdaterade.</p> <p>Om du skriver <code>winget upgrade</code> s\u00e5 f\u00e5r du en lista med program som kan uppdateras, och du kan d\u00e5 antingen skriva <code>winget upgrade &lt;namnet p\u00e5 programmet&gt;</code> f\u00f6r att uppdatera ett specifikt program eller <code>winget upgrade --all</code> f\u00f6r att uppdatera alla.</p>"},{"location":"#hittat-ett-fel","title":"Hittat ett fel?","text":"<p>Hela den h\u00e4r sidan finns speglad p\u00e5 GitHub \u2013 d\u00e4r kan du skapa en buggrapport (issue) och beskriva problemet.</p> <p>Eller s\u00e5 kan du forka repositoriet, g\u00f6ra \u00e4ndringen och sedan g\u00f6ra en pull request!</p>"},{"location":"#progression","title":"Progression","text":"<p>Den h\u00e4r sidan \u00e4r byggd f\u00f6r kurserna Programmering 1 och 2, och detta \u00e4r den t\u00e4nkta uppdelningen.</p> <p>Vissa saker som t.ex. Raylib ligger utanf\u00f6r tabellen \u2013 det \u00e4r inte ett obligatoriskt moment i n\u00e5gon kurs men \u00e4r heller inte riktigt \"\u00f6verkurs\".</p> Programmering 1 Programmering 2 \u00d6verkurs Datatyper Klasser och instanser Delegates, events och lambdas Typkonvertering Public, private och protected Reference vs value types Operatorer Klassdiagram Abstract Konsolen Klassmetoder Interface If-satser Konstruktorer Threading Loopar Arv Listor och arrayer Inkapsling och properties Slump Static String-manipulering Polymorfism Egna metoder Generiska klasser Anv\u00e4nda bibliotek L\u00e4sa och skriva Namngivning Serialisering Begrepp N\u00e4tverk och internet Pseudokod och diagram"},{"location":"SUMMARY/","title":"Table of contents","text":"<ul> <li>C# snabbreferens</li> <li>Lathund: Skapa projekt</li> <li>Lathund: koda i konsolen</li> <li>Lathund: koda i WPF</li> <li>Kompilering och publicering</li> <li>Externa resurser</li> </ul>"},{"location":"SUMMARY/#grundlaggande","title":"Grundl\u00e4ggande","text":"<ul> <li>Datatyper [\u2026]</li> <li>String</li> <li>Tuples</li> <li>Enum</li> <li>Fel</li> <li>Typkonvertering</li> <li>Operatorer</li> <li>Boolska satser</li> <li>Konsolen (Console)</li> <li>If-satser</li> <li>Loopar</li> <li>Listor och arrayer</li> <li>Slump (Random)</li> <li>Strings</li> <li>Metoder</li> <li>Anv\u00e4nda bibliotek (using)</li> <li>Delegates, events och lambdas</li> <li>Matematik (Math)</li> <li>Vektorer (Numerics)</li> <li>Datum och tid</li> <li>Try-catch och Exception</li> <li>Namngivning</li> <li>Begrepp</li> <li>Reference vs value types</li> <li>Projektstruktur</li> <li>Dotnet i terminalen</li> </ul>"},{"location":"SUMMARY/#filhantering","title":"Filhantering","text":"<ul> <li>Fils\u00f6kv\u00e4gar</li> <li>L\u00e4sa och skriva</li> <li>Filer och mappar</li> <li>Open, close, using</li> <li>Serialisering [\u2026]</li> <li>JSON-serialisering</li> <li>XML-serialisering</li> <li>Resursfiler</li> <li>Filformat</li> <li>JSON</li> </ul>"},{"location":"SUMMARY/#klasser-och-objektorientering","title":"Klasser och objektorientering","text":"<ul> <li>\u00d6versikt objektorientering</li> <li>Lathund f\u00f6r klassdesign</li> <li>Klasser och instanser</li> <li>Struct</li> <li>Public, private och protected</li> <li>Klassdiagram</li> <li>Klassmetoder</li> <li>Konstruktorer</li> <li>Arv</li> <li>Komposition</li> <li>Inkapsling och properties</li> <li>Static</li> <li>Polymorfism [\u2026]</li> <li>Virtual, override</li> <li>Generiska klasser</li> <li>Abstract</li> <li>Interface</li> <li>Attribut</li> </ul>"},{"location":"SUMMARY/#annat","title":"Annat","text":"<ul> <li>RayLib [\u2026]</li> <li>Raylib setup</li> <li>F\u00f6nster i Raylib</li> <li>Grundl\u00e4ggande grafik</li> <li>Geometriska former</li> <li>Bilder och texturer<ul> <li>Texture</li> <li>Image</li> </ul> </li> <li>Input</li> <li>Text</li> <li>Rectangle</li> <li>Kollisioner</li> <li>Kamera</li> <li>Ljud</li> <li>Raylib-CSharp*</li> <li>MonoGame [\u2026]</li> <li>Monogame-projekt*</li> <li>MCGB Editor*</li> <li>Input*</li> <li>Grafik*</li> <li>Kollisioner</li> <li>Ljud*</li> <li>N\u00e4tverk och internet [\u2026]</li> <li>CRUD, HTTP och REST</li> <li>URL:er och REST</li> <li>RESTful client*</li> <li>Thunder</li> <li>RESTful server (Minimal API)<ul> <li>Swagger och OpenAPI</li> </ul> </li> <li>RESTful server (Web API) [\u2026]<ul> <li>Controllers</li> <li>Models/dataklasser</li> <li>Tester med RESTer</li> </ul> </li> <li>Linq</li> <li>Linq-metoder</li> <li>Linq-queries</li> <li>Databaser</li> <li>SQLite-kommandon</li> <li>SQLite och VSCode</li> <li>C# och SQLite</li> <li>Entity Framework Core</li> <li>Threading</li> <li>Thread</li> <li>Task</li> <li>Pseudokod och diagram</li> <li>Windows UI</li> <li>WPF</li> <li>XAML*</li> <li>WinUI*</li> </ul>"},{"location":"SUMMARY/#mjukvara","title":"Mjukvara","text":"<ul> <li>Dotnet SDK</li> <li>Visual Studio Code [\u2026]</li> <li>Extensions</li> <li>Inst\u00e4llningar</li> <li>Debugging</li> <li>Snabbkommandon</li> <li>Snippets</li> <li>Fels\u00f6kning</li> <li>Git &amp; GitHub [\u2026]</li> <li>Git-begrepp</li> <li>Andra verktyg</li> </ul>"},{"location":"SUMMARY/#tekniker","title":"Tekniker","text":"<ul> <li>Begr\u00e4nsa input</li> <li>Game states</li> <li>G\u00e5 igenom en array (eller lista)</li> <li>L\u00e4nkade listor och andra strukturer</li> <li>Ta bort saker ur listan man g\u00e5r igenom</li> <li>2D-spelbr\u00e4den</li> <li>Timers</li> </ul> <ul> <li>CONTRIBUTING</li> </ul>"},{"location":"contributing/","title":"CONTRIBUTING","text":"<p>Vill du hj\u00e4lpa till att g\u00f6ra den h\u00e4r dokumentationen b\u00e4ttre? G\u00f6r det via dess githubsida!</p>"},{"location":"contributing/#issues","title":"Issues","text":"<p>Om du sj\u00e4lv inte vill g\u00e5 in och \u00e4ndra, kan du anv\u00e4nda GitHubs system f\u00f6r \"issues\". En issue kan vara n\u00e4stan vad som helst \u2013 oftast en buggrapport, eller ett f\u00f6rb\u00e4ttringsf\u00f6rslag.</p> <p>Kolla f\u00f6rst ifall det du vill rapportera/f\u00f6resl\u00e5 inte redan finns som en issue; anv\u00e4nd s\u00f6kfunktionen p\u00e5 sidan om det finns m\u00e5nga \u00f6ppna issues.</p> <p>Om inte \u2013 skapa en ny Issue, ge den en titel och en beskrivning. Ju tydligare desto b\u00e4ttre och desto st\u00f6rre sannolikhet att den fixas inom rimlig tid!</p> <p>Skicka in din issue och v\u00e4nta p\u00e5 att n\u00e5gon ska svara p\u00e5 den och/eller fixa den. N\u00e4r issuen \u00e4r f\u00e4rdigbehandlad blir den \"st\u00e4ngd\".</p>"},{"location":"contributing/#forks-och-pull-requests","title":"Forks och pull requests","text":"<p>Om du vill vara med och g\u00f6ra \u00e4ndringar mer direkt, g\u00f6r en fork av projektet! F\u00f6r dig som \u00e4r ny betyder det allts\u00e5:</p> <ul> <li>G\u00f6r en fork genom att klicka p\u00e5 \"fork\"-knappen p\u00e5 projektets startsida p\u00e5 Github.</li> <li>G\u00f6r de \u00e4ndringar du vill se i din fork. All dokumentation \u00e4r skriven i GitBooks variant av spr\u00e5ket Markdown.</li> <li>Ett s\u00e4tt att g\u00f6ra detta \u00e4r att klona ner din kopia av projektet till din dator, och sedan g\u00f6r \u00e4ndringar i t.ex. Visual Studio Code. Du g\u00f6r d\u00e5 commits som vanligt och sedan pushar du dem till Github.</li> <li>Ett annat s\u00e4tt \u00e4r att redigera direkt p\u00e5 github \u2013 g\u00e5 till din fork p\u00e5 Github och tryck punkt (.) f\u00f6r att \u00f6ppna en webbversion av Visual Studio Code. G\u00f6r dina \u00e4ndringar, spara, g\u00f6r en commit.</li> <li>Sedan g\u00f6r du en pull request d\u00e4r du beskriver det du \u00e4ndrat.</li> <li>Om dina \u00e4ndringar ser bra ut s\u00e5 kommer din pull request att godk\u00e4nnas och projektet uppdateras.</li> </ul>"},{"location":"contributing/#gora-egna-forks-utan-pull-request","title":"G\u00f6ra egna forks utan pull request","text":"<p>Du kan och f\u00e5r naturligtvis g\u00f6ra helt egna forks d\u00e4r du g\u00f6r vilka \u00e4ndringar du vill \u2013 det finns inga som helst krav p\u00e5 att du bidrar till det h\u00e4r projektet. Du f\u00e5r ocks\u00e5 hemskt g\u00e4rna anv\u00e4nda den h\u00e4r dokumentationen som grund f\u00f6r n\u00e5got eget, om du t.ex. vill g\u00f6ra en dokumentation till n\u00e5got annat programmeringsspr\u00e5k.</p>"},{"location":"externa-resurser/","title":"Externa resurser","text":""},{"location":"externa-resurser/#onlinekurser","title":"Onlinekurser","text":"<p>P\u00e5 svenska</p> <ul> <li>Csharpskolan: https://www.youtube.com/playlist?list=PLGIaaBeLgSj-gR2ce4llrGt9c_1J7JqoC</li> <li>Distansakademin C#: https://www.youtube.com/playlist?list=PLI5JF23TK_8CB6bhsiRski3W3PCFqVltx</li> </ul> <p>P\u00e5 engelska</p> <ul> <li>FreeCodeCamp \u2013 Microsoft C#: https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/</li> <li>Code Academy: https://www.codecademy.com/catalog/language/c-sharp</li> <li>Brackeys C#: https://www.youtube.com/playlist?list=PLPV2KyIb3jR4CtEelGPsmPzlvP7ISPYzR</li> </ul>"},{"location":"kompilering-och-publicering/","title":"Kompilering och publicering","text":""},{"location":"kompilering-och-publicering/#kompilering-och-debug-korning","title":"Kompilering och debug-k\u00f6rning","text":"<p>Medan du arbetar med projektet s\u00e5 skapar du s.k. \"debug builds\", s\u00e4rskilda versioner av programmets exe- och dll-filer som fungerar bra ihop med vscode och dess olika verktyg.</p> <p>Genom att trycka F5 skapas en mapp som heter \"bin\", och i den finns en mapp som heter \"Debug\". D\u00e4r finns ytterligare en undermapp som heter \"net8.0\" (om du anv\u00e4nder .NET SDK 8). I den mappen l\u00e4ggs dina tillf\u00e4lliga debug builds.</p> <p>S\u00e5 snart .net skapat din debug build s\u00e5 k\u00f6rs den, s\u00e5 normalt m\u00e4rker du inte ens att det blir exe- eller dll-filer \u2013 du ser bara koden, och sedan att programmet k\u00f6rs.</p>"},{"location":"kompilering-och-publicering/#publicering","title":"Publicering","text":"<p>F\u00f6r att skapa en version av ditt program som \u00e4r l\u00e4mpligt att distribuera till andra, g\u00e5 till terminalen i Visual Studio Code (eller n\u00e5gon annan terminal; se till att vara i samma mapp som SLN-filen).</p> <p>Skriv detta, och tryck enter:</p> <pre><code>dotnet publish -c Release\n</code></pre> <p>Resultatet b\u00f6r se ut ungef\u00e4r s\u00e5h\u00e4r:</p> <p></p> <p>I ditt projekt b\u00f6r du nu ha en mapp som heter \"bin\" och i den finns en mapp som heter \"Release\". D\u00e4r finns ytterligare en undermapp som heter \"net8.0\" (om du anv\u00e4nder .NET Core 8), och under den finns en som heter \"publish\". Filerna i publish-mappen \u00e4r de du kan distribuera till andra.</p> <p> </p>"},{"location":"kompilering-och-publicering/#en-ensam-exe-fil","title":"En ensam exe-fil","text":"<p>F\u00f6r att packa ihop ovanst\u00e5ende till en ensam exe-fil du kan distribuera beh\u00f6ver du bli mer specifik:</p> <pre><code>dotnet publish -r win-x64 -c Release -p:PublishSingleFile=true --self-contained false\n</code></pre> <p>H\u00e4r beh\u00f6ver mottagaren fortfarande ha dotnet installerat \u2013 inte SDK n\u00f6dv\u00e4ndigtvis, men runtime. Det borde dock inte vara n\u00e5got st\u00f6rre problem d\u00e5 dotnet 8 brukar vara installerat i de flesta moderna windowsversioner.</p>"},{"location":"kompilering-och-publicering/#overkurs-standalone","title":"\u00d6verkurs: standalone","text":"<p>Vill man ha en exe-fil som inte kr\u00e4ver att man har .NET Core 8 installerat, s\u00e5 kan skriva man s\u00e5h\u00e4r n\u00e4r man publicerar (om det nu \u00e4r windows 10 64-bitarsversionen man bygger till):</p> <pre><code>dotnet publish -r win-x64 -c Release -p:PublishSingleFile=true -p:PublishTrimmed=true --self-contained true\n</code></pre> <p>D\u00e5 kommer filerna i publish-mappen fortfarande vara ganska f\u00e5, men exe-filen kommer att vara betydligt st\u00f6rre. Mappstrukturen blir ocks\u00e5 lite annorlunda, men det b\u00f6r inte vara sv\u00e5rt att hitta r\u00e4tt filer att publicera.</p> <p>Vill man verkligen bara ha en exe-fil s\u00e5 kan man l\u00e4gga till ytterligare en parameter:</p> <pre><code>dotnet publish -r win-x64 -c Release -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true --self-contained true\n</code></pre>"},{"location":"lathund-konsolen/","title":"Lathund: koda i konsolen","text":"Problem med svenska tecken i konsolen?  Ibland kan det vara problem med svenska tecken i konsolen. Om det \u00e4r problem skriv f\u00f6ljande kod i b\u00f6rjan av programmet.  <pre><code>Console.InputEncoding = System.Text.Encoding.Unicode;\nConsole.OutputEncoding = System.Text.Encoding.Unicode;\n</code></pre>"},{"location":"lathund-konsolen/#kommentarer","title":"Kommentarer","text":"<p>Genom att skriva // framf\u00f6r n\u00e5got s\u00e5 g\u00f6r man s\u00e5 det inte tolkas som kod utan som en kommentar.</p> <pre><code>// Det h\u00e4r \u00e4r en kommentar.\n// Console.WriteLine(\"Det h\u00e4r \u00e4r ocks\u00e5 en kommentar; en kod som inte k\u00f6rs\");\n</code></pre>"},{"location":"lathund-konsolen/#variabler","title":"Variabler","text":"<p>Variabler lagrar information \u2013 allt man vill kunna komma ih\u00e5g i programmet lagras i variabler.</p> <p>Varje variabel har en datatyp. N\u00e4r man skapar en variabel s\u00e5 anger man vilken sorts information som ska lagras i den.</p> <pre><code>// int \u00e4r datatypen, hp namnet p\u00e5 variabeln\nint hp = 100;          // int = heltal\nstring name = \"Micke\"; // string = text\nfloat money = 4.5f     // float = decimaltal\n</code></pre> <p>Man kan \u00e4ndra p\u00e5 en variabels v\u00e4rde i efterhand. = funkar alltid, s\u00e5 l\u00e4nge variabeln \u00e4r p\u00e5 v\u00e4nster sida och det du vill \u00e4ndra dess v\u00e4rde till \u00e4r p\u00e5 h\u00f6ger.</p> <pre><code>name = \"Martin\"; // \u00c4ndra name till 'Martin'\nhp = hp + 10; // \u00d6ka hp med 10\nhp += 5; // \u00d6ka hp med 5\nhp++ // \u00d6ka hp med 1\nhp-- // Minska hp med 1\n</code></pre>"},{"location":"lathund-konsolen/#lasa-in-data","title":"L\u00e4sa in data","text":""},{"location":"lathund-konsolen/#lasa-in-text-med-writeline-readline","title":"L\u00e4sa in text med WriteLine, ReadLine","text":"<p>Anv\u00e4nds f\u00f6r att skriva ut saker till anv\u00e4ndaren eller l\u00e4sa in saker.</p> <pre><code>Console.Write(\"Vad heter du? \");\nstring name = Console.ReadLine();\nConsole.WriteLine($\"Hej {name}! Kul att du ocks\u00e5 \u00e4r h\u00e4r :-)\");  // Skriver ut 'Hej ...!  Kul att du ocks\u00e5 \u00e4r h\u00e4r :-)\n</code></pre>"},{"location":"lathund-konsolen/#lasa-in-tal-med-tryparse","title":"L\u00e4sa in tal med TryParse","text":"<p>Tryparse g\u00f6r att man kan g\u00f6ra om en string till en int.</p> <pre><code>string pointsText = Console.ReadLine();\nint points = 0;\nbool success = int.TryParse(pointsText, out points);\n</code></pre>"},{"location":"lathund-konsolen/#villkorssatser","title":"Villkorssatser","text":""},{"location":"lathund-konsolen/#if-else","title":"If-else","text":"<p>If g\u00f6r att man kan ha kod som bara k\u00f6rs om ett villkor st\u00e4mmer (\u00e4r true).</p> <pre><code>string name = Console.ReadLine();\nif (name == \"Micke\")\n{\n  Console.WriteLine(\"V\u00e4lkommen!\");\n}\n</code></pre> <p>I exemplet nedan anv\u00e4nds ocks\u00e5 else if och else f\u00f6r att skapa en kedja.</p> <pre><code>string name = Console.ReadLine();\n\nif (name == \"Micke\") // F\u00f6rst kollas name mot 'Micke'\n{\n  Console.WriteLine(\"V\u00e4lkommen!\");\n}\nelse if (name == \"Martin\")  // Om det inte \u00e4r 'Micke' kollas namn mot 'Martin'\n{\n  Console.WriteLine(\"Hej!\");\n}\nelse  // och om det varken \u00e4r 'Micke' eller 'Martin' k\u00f6rs den h\u00e4r koden\n{\n  Console.WriteLine(\"Dig k\u00e4nner jag inte, hejd\u00e5!\");\n}\n</code></pre>"},{"location":"lathund-konsolen/#villkor-och-jamforelser","title":"Villkor och j\u00e4mf\u00f6relser","text":"<p>Mellan parenteserna i if-satser och loopar skriver man n\u00e5gon form av j\u00e4mf\u00f6relse som blir sann eller falsk. Vanliga j\u00e4mf\u00f6relser kan vara:</p> <ul> <li><code>==</code> \"\u00c4r exakt lika med\"</li> <li><code>!=</code> \"\u00c4r inte lika med\"</li> <li><code>&gt;</code> \"\u00c4r st\u00f6rre \u00e4n\"</li> <li><code>&lt;</code> \"\u00c4r mindre \u00e4n\"</li> <li><code>&lt;=</code> \"\u00c4r st\u00f6rre \u00e4n eller lika med\"</li> <li><code>&gt;=</code> \"\u00c4r mindre \u00e4n eller lika med</li> </ul> <pre><code>int hp = 50;\nif (hp &lt; 10)\n{\n  Console.WriteLine(\"Skadad!\");\n}\n\nif (hp &gt; 100)\n{\n  Console.WriteLine(\"Overcharge!\");\n}\n</code></pre> <p>Man kombinerar ofta j\u00e4mf\u00f6relser med varandra, genom att anv\u00e4nda &amp;&amp; (och), || (eller).</p> <pre><code>if (name == \"Mikael\" &amp;&amp; pass == \"password\" &amp;&amp; attempts &lt; 4)\n{\n  Console.WriteLine(\"V\u00e4lkommen!\");\n}\n</code></pre>"},{"location":"lathund-konsolen/#slump","title":"Slump","text":"<pre><code>// randomNumber blir ett tal som kan vara minst 0, max 99\nint randomNumber = Random.Shared.Next(100);\n// Talet kan vara minst 4, max 7\nint otherNumber = Random.Shared.Next(4,7);\n</code></pre>"},{"location":"lathund-konsolen/#upprepa-med-loopar","title":"Upprepa med loopar","text":""},{"location":"lathund-konsolen/#while-loop","title":"While-loop","text":"<p>En loop n\u00e4r man inte vet hur m\u00e5nga g\u00e5nger koden skall k\u00f6ras.</p> <pre><code>while (true) // Loop som k\u00f6rs f\u00f6r evigt\n{\n  string password = Console.ReadLine();\n  if (password == \"12345\")\n  {\n    break; // Avbryter loopen\n  }\n}\n</code></pre> <p>En while-loop funkar exakt som en if-sats, utom att n\u00e4r koden som st\u00e5r under den \u00e4r klar, s\u00e5 g\u00f6r den j\u00e4mf\u00f6relsen igen \u2013 och om den fortfarande \u00e4r true s\u00e5 k\u00f6r den en g\u00e5ng till.</p> <pre><code>string name = Console.ReadLine();\nwhile (name != \"Micke\")\n{\n  name = Console.ReadLine()\n}\n</code></pre> <p>Observera att exemplet ovan kan anv\u00e4ndas f\u00f6r alla m\u00f6jliga j\u00e4mf\u00f6relser \u2013 s\u00e5 fort du vill begr\u00e4nsa anv\u00e4ndarens input, g\u00f6ra s\u00e5 att hen inte f\u00e5r g\u00e5 vidare f\u00f6rr\u00e4n hen skrivit in n\u00e5got som \u00e4r \"r\u00e4tt sorts input\", s\u00e5 kan du anv\u00e4nda en while.</p>"},{"location":"lathund-konsolen/#for-loop","title":"For-loop","text":"<p>En sorts loop som \u00e4r v\u00e4ldigt bra n\u00e4r man vill k\u00f6ra en loop ett specifikt antal g\u00e5nger. For-loopar funkar egentligen som while-loopar, men inkluderar en r\u00e4knare.</p> <pre><code>// R\u00e4knaren heter i, b\u00f6rjar p\u00e5 0 och \u00f6kar med 1 varje g\u00e5ng loopen k\u00f6rts.\nfor (int i = 0; i &lt; 10; i++) \n{\n  // Det som st\u00e5r h\u00e4r inne kommer k\u00f6ras 10 g\u00e5nger\n  // F\u00f6rsta g\u00e5ngen loopen k\u00f6rs, har i v\u00e4rde 0\n  // Andra g\u00e5ngen har i v\u00e4rde 1\n  // Tredje g\u00e5ngen har i v\u00e4rde 2...\n}\n</code></pre>"},{"location":"lathund-konsolen/#list","title":"List","text":"<p>Med listor kan man ha flera v\u00e4rden i samma variabel.</p> <pre><code>List&lt;int&gt; numbers = [2, 45, 13, 200];\nList&lt;string&gt; names = [\"Micke\", \"Martin\"];\n</code></pre> <p>Man kan l\u00e4sa av och \u00e4ndra p\u00e5 vad som finns p\u00e5 platser i en lista genom indexering. Varje plats i listan \u00e4r numrerad fr\u00e5n 0 och upp\u00e5t.</p> <pre><code>List&lt;string&gt; names = [\"Micke\", \"Martin\"];\nConsole.WriteLine(names[0]); // Skriver ut 'Micke'\nConsole.WriteLine(names[1]); // Skriver ut 'Martin'\nnames[0] = \"Mohammad\"; // Byter ut 'Micke' mot 'Mohammad'\nConsole.WriteLine(names[0]); // Skriver ut 'Mohammad'\n</code></pre> <p>Man kan ocks\u00e5 kolla hur l\u00e5ng en lista \u00e4r med Count, l\u00e4gga till saker med Add och ta bort med Remove eller RemoveAt.</p> <pre><code>List&lt;string&gt; names = [\"Micke\", \"Martin\"];\nConsole.WriteLine(names.Count); // Skriver ut '2'\n\nnames.Add(\"Jenny\"); // L\u00e4gg till Jenny, som f\u00e5r index 2\nnames.Remove(\"Martin\"); // Ta bort Martin, s\u00e5 att Jenny f\u00e5r index 1\nnames.RemoveAt(0); // Ta bort namnet med index 0\n\nif (names.Contains(\"Jenny\")) // Kolla om Jenny finns i listan\n{\n  Console.WriteLine(\"Jenny \u00e4r med!\");\n}\n</code></pre> <p>Med en foreach-loop kan man g\u00e5 igenom listan och l\u00e4sa av varje sak i den i tur och ordning.</p> <pre><code>foreach (string name in names) // Loopa igenom listan\n{\n  Console.WriteLine(name);\n}\n</code></pre>"},{"location":"lathund-konsolen/#metoder","title":"Metoder","text":"<p>En metod \u00e4r en bit \u00e5teranv\u00e4ndbar kod, som kan anropas fr\u00e5n andra delar av koden. Metoder som \u00e4r statiska \u00e4r helt separata fr\u00e5n resten av koden \u2013 de kan inte komma \u00e5t variabler som inte \u00e4r deras egna. Metoder \u00e4r \u00f6verlag lite som Las Vegas: Det som h\u00e4nder i metoden stannar i metoden. Om man inte specifikt s\u00e4ger n\u00e5got annat.</p> <pre><code>static void CountDown()\n{\n  for (int i=10; i&gt;0; i--)\n  {\n    Console.WriteLine(i + \"...\");\n  }\n}\n</code></pre>"},{"location":"lathund-konsolen/#parametrar","title":"Parametrar","text":"<p>F\u00f6r att f\u00e5 in data i en metod anv\u00e4nds parametrar. Det g\u00f6r man generellt n\u00e4r man vill att en och samma metod ska kunna g\u00f6ra delvis olika saker beroende p\u00e5 vilken data den ges.</p> <pre><code>static void CountDownFrom(int startValue)\n{\n  for (int i=startValue; i&gt;0; i--)\n  {\n    Console.WriteLine(i + \"...\");\n  }\n}\n\nCountDownFrom(100); // 100 stoppas in i parametervariabeln startValue\nCountDownFrom(10);\n</code></pre>"},{"location":"lathund-konsolen/#returnering","title":"Returnering","text":"<p>Om man vill ta med sig n\u00e5got fr\u00e5n inifr\u00e5n en metod s\u00e5 anv\u00e4nder man return.</p> <pre><code>// 'string' betyder att vi lovar att metoden returnerar en string\n//        \u2193\nstatic string GetName() \n{\n  string name = \"\";\n  while (name.Length == 0)\n  {\n    Console.WriteLine(\"Vad heter du?\");\n    name = Console.ReadLine();\n  }\n\n  return name; // 'return' avslutar metoden och skickar tillbaka inneh\u00e5llet i 'name'\n}\n\nstring heroName = GetName();\nstring enemyName = GetName();\n</code></pre>"},{"location":"lathund-konsolen/#klasser","title":"Klasser","text":"<p>Varje klass l\u00e4ggs normalt i en egen fil.</p> <p>{% code title=\"Enemy.cs\" %} <pre><code>class Enemy\n{\n  public string Name;\n}\n</code></pre></p>"},{"location":"lathund-skapa-projekt/","title":"Lathund: Skapa projekt","text":"<ul> <li>Starta Visual Studio Code</li> <li>SKAPA PROJEKTET</li> <li>St\u00e4ng nuvarande projekt: File \u2192 Close folder</li> <li>Explorer \u2192 Create .NET Project (C# Dev Kit)</li> <li>V\u00e4lj \"Console App\"</li> <li>Skapa och v\u00e4lj en mapp att skapa projektet i.</li> <li>V\u00e4lj ett namn p\u00e5 projektet.<ul> <li>Namnet b\u00f6r vara i formen PlatformGame (inga mellanslag, stor bokstav i b\u00f6rjan av varje ord)</li> </ul> </li> <li>\u00d6ppna csproj-filen och ta bort (eller kommentera bort) raden med <code>&lt;Nullable&gt;</code>.</li> <li>G\u00d6R S\u00c5 PROJEKTET KAN K\u00d6RAS</li> <li>G\u00e5 till \"run and debug\" (Ctrl+Shift+D, eller ikonen med play-knapp och insekt).</li> <li>Tryck p\u00e5 \"Run and Debug\".</li> <li>V\u00e4lj \"C#\" och sedan projektets namn (b\u00f6r vara enda i listan).</li> <li>SKAPA GIT-REPOSITORY</li> <li>F1 \u2192 Add gitignore<ul> <li>V\u00e4lj Visual Studio</li> </ul> </li> <li>G\u00e5 till Source Control</li> <li>Initialize Repository</li> <li>Skriv in ditt f\u00f6rsta commit-meddelande och stage:a alla filer du vill ha med (manuellt eller automatiskt)</li> <li>Klicka p\u00e5 \"Publish Branch\".</li> <li>V\u00e4lj \"Publish to GitHub public repository\"</li> <li>Om du beh\u00f6ver logga in eller g\u00f6ra n\u00e5got annat kommer VSCode att s\u00e4ga till. F\u00f6lj instruktionerna.</li> </ul>"},{"location":"lathund-wpf/","title":"Lathund \u2013 koda WPF-applikationer","text":""},{"location":"lathund-wpf/#appens-fonster","title":"Appens f\u00f6nster","text":"<pre><code>&lt;Window ...\n        Title=\"MinApp\"\n        MaxWidth=\"800\" MaxHeight=\"450\"\n        SizeToContent=\"WidthAndHeight\"&gt;\n    &lt;!-- Inneh\u00e5llet i f\u00f6nstret --&gt;\n&lt;/Window&gt;\n</code></pre>"},{"location":"lathund-wpf/#vanliga-kontroller-och-attribut-i-xaml","title":"Vanliga kontroller och attribut i XAML","text":""},{"location":"lathund-wpf/#layoutkontroller-stackpanel","title":"Layoutkontroller \u2013 StackPanel","text":"<p>En layoutkontroll som ordnar sina barnkontroller i en vertikal eller horisontell stapel.  </p> <pre><code>    &lt;StackPanel Background=\"#EEE\" Orientation=\"Horizontal\"&gt;\n        &lt;!-- Barnkontroller --&gt;\n    &lt;/StackPanel&gt;\n</code></pre>"},{"location":"lathund-wpf/#vanliga-kontroller","title":"Vanliga kontroller","text":"<pre><code>&lt;Label Margin=\"10\" FontSize=\"24\" Foreground=\"#FFF\"&gt;Ange ditt namn&lt;/Label&gt;\n&lt;Button Margin=\"10\" Padding=\"10\" Background=\"Red\" FontWeight=\"Bold\" Width=\"100\"&gt;Spara&lt;/Button&gt;\n&lt;TextBox Margin=\"10\" Padding=\"10\" Height=\"100\"&gt;&lt;/TextBox&gt;\n&lt;ListBox Margin=\"10\" Padding=\"10\"&gt;&lt;/ListBox&gt;\n</code></pre> <p>Andra anv\u00e4ndbara attribut f\u00f6r <code>TextBox</code>-kontrollen: - <code>ReadOnly=\"True\"</code> \u2013 g\u00f6r textf\u00e4ltet skrivskyddat - <code>TextWrapping=\"Wrap\"</code> \u2013 g\u00f6r att texten bryts om den \u00e4r f\u00f6r l\u00e5ng f\u00f6r att f\u00e5 plats i f\u00e4ltet - <code>AcceptsReturn=\"True\"</code> \u2013 g\u00f6r att anv\u00e4ndaren kan trycka p\u00e5 Enter f\u00f6r att skapa en ny rad</p>"},{"location":"lathund-wpf/#koppla-kontroller-till-c-kod","title":"Koppla kontroller till C#-kod","text":""},{"location":"lathund-wpf/#click-event-och-event-metoder","title":"click-event och event-metoder","text":"<p>N\u00e4r en anv\u00e4ndare klickar p\u00e5 en knapp utl\u00f6ses ett <code>click</code>-event. </p> <pre><code>&lt;Button Click=\"KlickSpara\" Margin=\"10\" Padding=\"10\"&gt;Spara&lt;/Button&gt;\n</code></pre> <pre><code>void KlickSpara(object sender, RoutedEventArgs e)\n{\n    MessageBox.Show(\"Du sparade dina \u00e4ndringar!\");\n}\n</code></pre>"},{"location":"lathund-wpf/#referens-till-kontroller-name-attributet","title":"Referens till kontroller: Name-attributet","text":"<p>Med <code>Name</code>-attributet kan vi referera till kontroller i C#-koden:</p> <pre><code>&lt;TextBox Name=\"txbResultat\" Margin=\"10\" Padding=\"10\"&gt;&lt;/TextBox&gt;\n</code></pre> <pre><code>// L\u00e4s inneh\u00e5llet i textf\u00e4ltet\nstring innehall = txbResultat.Text;\n\n// S\u00e4tt nytt inneh\u00e5ll i textf\u00e4ltet\ntxbResultat.Text = \"Nytt inneh\u00e5ll visas h\u00e4r!\";\n</code></pre>"},{"location":"lathund-wpf/#visa-en-list-i-en-listbox","title":"Visa en list i en ListBox","text":"<p>Inneh\u00e5llet i en lista kan visas i en <code>ListBox</code>-kontroll:</p> <pre><code>&lt;ListBox Name=\"lbResultat\" Margin=\"10\" Padding=\"10\"&gt;&lt;/ListBox&gt;\n</code></pre> <pre><code>List&lt;string&gt; namnLista =[\"Anna\", \"Bertil\", \"Cecilia\"];\n\n// S\u00e4tt listan som k\u00e4lla f\u00f6r ListBox-kontrollen\nlbResultat.ItemsSource = namnLista;\n\n// Uppdatera ListBox-kontrollen med ny data\nlbResultat.Items.Refresh();\n</code></pre>"},{"location":"annat/pseudokod-och-diagram/","title":"Pseudokod och diagram","text":""},{"location":"annat/pseudokod-och-diagram/#pseudokod","title":"Pseudokod","text":"<p>\"Pseudo-\" beskriver n\u00e5got som ser ut som, men inte riktigt \u00e4r, n\u00e5got annat \u2013 pseudovetenskap \u00e4r inte vetenskap, men ser ofta ut som vetenskap.</p> <p>Pseudokod \u00e4r text som ser ut som kod, och beskriver logik, men som inte \u00e4r k\u00f6rbar kod. Det finns inga regler f\u00f6r hur pseudokod ska skrivas, utan det \u00e4r mer ett s\u00e4tt att planera sin kod innan man skriver den \u2013 utan att beh\u00f6va komma ih\u00e5g syntax eller bry sig om exakt hur spr\u00e5ket fungerar.</p> <p>Ett exempel:</p> <p>Slumpa ett tal.</p> <p>L\u00e4s in en siffra</p> <p>Kolla om siffran \u00e4r l\u00e4gre \u00e4n talet</p> <p>    S\u00e4g att spelaren m\u00e5ste gissa h\u00f6gre</p> <p>Kolla om siffran \u00e4r h\u00f6gre \u00e4n talet</p> <p>    S\u00e4g att spelaren m\u00e5ste gissa h\u00f6gre</p> <p>Kolla om siffran \u00e4r exakt r\u00e4tt</p> <p>    Gratulera spelaren</p> <p>Om den inte \u00e4r r\u00e4tt, l\u00e4s in en ny siffra</p> <p>Ingenstans finns n\u00e5gra if-satser eller n\u00e5gra WriteLines, men det \u00e4r \u00e4nd\u00e5 tydligt att det \u00e4r en algoritm \u2013 och att den skulle kunna skrivas, med lite modifikationer, i C# eller valfritt annat programmeringsspr\u00e5k.</p>"},{"location":"annat/pseudokod-och-diagram/#mer-formell-pseudokod","title":"Mer formell pseudokod","text":"<p>Det finns de som vill ha mer formaliserad pseudokod. Man l\u00e4gger sig d\u00e5 n\u00e4rmare \"riktig\" kod.</p> <p>WHILE tal \u2260 siffra</p> <p>    tal = slump()</p> <p> INPUT siffra</p> <p> IF siffra &lt; tal THEN</p> <p> OUTPUT \"Du m\u00e5ste gissa h\u00f6gre!</p> <p> ELSE IF siffra &gt; tal THEN</p> <p> OUTPUT \"Du m\u00e5ste gissa l\u00e4gre!\"</p> <p> ELSE</p> <p> OUTPUT \"Grattis!</p>"},{"location":"annat/pseudokod-och-diagram/#flodesscheman-aktivitetsdiagram","title":"Fl\u00f6desscheman / aktivitetsdiagram","text":"<p>Fl\u00f6desscheman \u00e4r ett mer grafiskt s\u00e4tt att anteckna inf\u00f6r kodning. </p> <p>Aktiviteter \u2013 Saker som utf\u00f6rs \u2013 ritas normalt ut som rektanglar</p> <p>Beslut \u2013 punkter d\u00e4r programmet ska g\u00f6ra ett val mellan tv\u00e5 (eller flera) alternativ \u2013 ritas ut som romber</p> <p>Pilar visar hur fl\u00f6det g\u00e5r.</p> <p>Finns det n\u00e5got s\u00e4tt att f\u00f6rb\u00e4ttra algoritmen ovan?</p>"},{"location":"annat/databaser/","title":"Databaser","text":"<p>N\u00e4r det g\u00e4ller att lagra stora m\u00e4ngder data s\u00e5 anv\u00e4nds n\u00e4stan alltid n\u00e5gon form av specialiserad mjukvara f\u00f6r detta. Ett vanligt exempel \u00e4r MySQL, som k\u00f6rs som ett helt eget databas-serverprogram som olika programmeringsspr\u00e5k sedan kan kontakta. Ett mer l\u00e4ttanv\u00e4nt exempel \u00e4r SQLite, d\u00e4r databaserna \u00e4r relativt enkla textfiler som kan l\u00e4sas av genom enkla anrop till ett SQLite-bibliotek. Ingen servermjukvara beh\u00f6ver k\u00f6ras p\u00e5 datorn.</p> <p>SQL st\u00e5r f\u00f6r Structured Query Language, och alla SQL-spr\u00e5k brukar anv\u00e4nda liknande spr\u00e5k. SQLite st\u00f6der f\u00e4rre SQL-kommandon \u00e4n MySQL, men man kan \u00e4nd\u00e5 g\u00f6ra det mesta. Se SQLite-kommandon f\u00f6r dokumentation</p> <p>Det finns extensions f\u00f6r Visual Studio Code som g\u00f6r att man kan jobba med SQLite-databaser utan att skriva C#-kod. Det \u00e4r praktiskt f\u00f6r att skapa tabeller och f\u00f6rbereda databaser.</p> <p>Slutligen finns C#-bibliotek man kan installera via NuGet Gallery f\u00f6r att k\u00f6ra SQL-kommandon mot en specifik SQLite-databas.</p>"},{"location":"annat/databaser/#databas","title":"Databas","text":"<p>En traditionell relationell databas best\u00e5r av ett antal tabeller. Varje tabell beskriver en kategori av saker. Det som g\u00f6r databasen relationell \u00e4r kopplingarna mellan tabellerna. Om man t.ex. har en tabell med anv\u00e4ndare, och en tabell med artiklar som anv\u00e4ndarna skrivit, s\u00e5 lagrar man inte anv\u00e4ndarnamnet etc f\u00f6r respektive anv\u00e4ndare i artikel-tabellen. Ist\u00e4llet lagrar man anv\u00e4ndarens unika ID.</p>"},{"location":"annat/databaser/#tabeller","title":"Tabeller","text":"<p>En tabell inneh\u00e5ller data om en kategori av \"saker\" \u2013 man kan till exempel ha en tabell f\u00f6r anv\u00e4ndare, eller en tabell f\u00f6r highscores. En tabell best\u00e5r av ett antal kolumner och rader.</p>"},{"location":"annat/databaser/#kolumner","title":"Kolumner","text":"<p>Varje kolumn i en tabell beskriver n\u00e5gon egenskap hos de saker som tabellen beskriver. T.ex. kan en kolumn inneh\u00e5lla f\u00f6rnamn, efternamn, anv\u00e4ndarnamn, l\u00f6senord, etc. Varje kolumn ska helst bara inneh\u00e5lla EN kategori av v\u00e4rden, s\u00e5 att varje cell i tabellen i sin tur bara inneh\u00e5ller ETT v\u00e4rde.</p>"},{"location":"annat/databaser/#rader","title":"Rader","text":"<p>Varje rad i en tabell beskriver en \"sak\", till exempel en anv\u00e4ndare, en artikel, ett highscore eller ett datorspel. Rader kan ocks\u00e5 kallas entries.</p>"},{"location":"annat/databaser/#primarnycklar","title":"Prim\u00e4rnycklar","text":"<p>F\u00f6r att kunna identifiera en specifik entry i en tabell, beh\u00f6ver man vara s\u00e4ker p\u00e5 att det finns n\u00e5got unikt med varje rad. Den delen som \u00e4r unik brukar kallas \"prim\u00e4rnyckel\". I teorin kan vilken kolumn eller kombination av kolumner som helst vara prim\u00e4rnyckel, men i de allra flesta fall ges bara varje entry ett unikt nummer, ett ID, som deklareras som prim\u00e4rnyckel.</p>"},{"location":"annat/databaser/#relation","title":"Relation","text":"<p>Ifall man har en tabell vars information beh\u00f6ver refereras i en annan tabell, s\u00e5 s\u00e4ger man att de tv\u00e5 tabellerna har en relation. Den enklaste formen av relation \u00e4r en-till-m\u00e5nga. Till exempel: En anv\u00e4ndare kan tillh\u00f6ra en grupp, men en grupp kan inneh\u00e5lla m\u00e5nga anv\u00e4ndare. D\u00e5 kan man ha en tabell f\u00f6r grupper och en f\u00f6r anv\u00e4ndare, och s\u00e5 har man en kolumn i anv\u00e4ndar-tabellen som beskriver vilken grupp den anv\u00e4ndaren tillh\u00f6r \u2013 d\u00e4r lagras grupptabellens prim\u00e4rnyckel.</p>"},{"location":"annat/databaser/#normalisering","title":"Normalisering","text":"<p>Normalisering kallas det n\u00e4r man f\u00f6ljer ett antal regler designade att g\u00f6ra databasen s\u00e5 l\u00e4tt att anv\u00e4nda som m\u00f6jligt. Till exempel f\u00f6rs\u00f6ker man att se till s\u00e5 att ingen data finns lagrad p\u00e5 flera st\u00e4llen.</p>"},{"location":"annat/databaser/#crud","title":"CRUD","text":"<p>CRUD \u2013 Create, Read, Update och Delete \u2013 \u00e4r de fyra operationer man brukar beh\u00f6va g\u00f6ra med information som lagras i en databas.</p>"},{"location":"annat/databaser/#create","title":"Create","text":"<p>L\u00e4gga till nya saker i en tabell, t.ex. nya anv\u00e4ndare.</p>"},{"location":"annat/databaser/#read","title":"Read","text":"<p>L\u00e4sa av informationen om en sak i en tabell, t.ex. l\u00e4sa av en anv\u00e4ndares anv\u00e4ndarnamn och l\u00f6senord f\u00f6r att kolla av mot inloggningsuppgifter.</p>"},{"location":"annat/databaser/#update","title":"Update","text":"<p>\u00c4ndra en sak i en tabell, t.ex. byta en anv\u00e4ndares mailadress.</p>"},{"location":"annat/databaser/#delete","title":"Delete","text":"<p>Ta bort en sak ur en tabell, t.ex. ta bort en artikel.</p>"},{"location":"annat/databaser/c-och-sqlite/","title":"C# och SQLite","text":"<p>B\u00f6rja med att l\u00e4gga till NuGet-paketet Microsoft.Data.Sqlite. Antingen genom att anv\u00e4nda NuGet Gallery eller genom att k\u00f6ra i konsolen:</p> <pre><code>dotnet add package Microsoft.Data.Sqlite\n</code></pre>"},{"location":"annat/databaser/c-och-sqlite/#sqliteconnection","title":"SqliteConnection","text":"<p>En SqliteConnection \u00e4r ett objekt som \u00e4r kopplat till en SQLite-databasfil.</p> <pre><code>SqliteConnection connection = new SqliteConnection(\"Data Source=users.sqlite\")\nconnection.Open();\n</code></pre> <p>Det \u00e4r ofta en bra id\u00e9 att anv\u00e4nda ett using-kodblock f\u00f6r att s\u00e4kerst\u00e4lla att programmet inte h\u00e5ller kvar kopplingen l\u00e4ngre \u00e4n n\u00f6dv\u00e4ndigt. D\u00e5 st\u00e4ngs kopplingen ner s\u00e4kert i samband med att using.kodblocket avslutas.</p> <pre><code>using (SqliteConnection connection = new SqliteConnection(\"Data Source=users.sqlite\"))\n{\n  connection.Open();\n  // Kod som anv\u00e4nder kopplings-objektet\n}\n</code></pre>"},{"location":"annat/databaser/c-och-sqlite/#createcommand","title":"CreateCommand()","text":"<p>Skapar ett nytt SqliteCommand-objekt. Se nedan.</p> <pre><code>SqliteCommand command = connection.CreateCommand();\n</code></pre>"},{"location":"annat/databaser/c-och-sqlite/#sqlitecommand","title":"SqliteCommand","text":"<p>Ett SqliteCommand \u00e4r ett objekt som motsvarar ett SQLite-kommando. Det har ett textinneh\u00e5ll i form av sj\u00e4lva kommandot, och kan k\u00f6ras p\u00e5 flera olika s\u00e4tt. Ett SQLiteCommand \u00e4r alltid kopplat till en SqliteConnection; kommandot skickas alltid till den SQLite-databasen.</p>"},{"location":"annat/databaser/c-och-sqlite/#commandtext","title":"commandText","text":"<p>commandText \u00e4r kommandotexten som ska k\u00f6ras mot databasen.</p> <pre><code>command.CommandText =\n  @\"\n    SELECT name\n    FROM users\n  \";\n</code></pre>"},{"location":"annat/databaser/c-och-sqlite/#executenonquery","title":"ExecuteNonQuery()","text":"<p>K\u00f6r kommandot. Perfekt f\u00f6r t.ex kommandon som l\u00e4gger in ny information i en tabell. Returnerar en integer som beskriver hur m\u00e5nga rader som \u00e4ndrats, tagits bort eller lagts till.</p> <pre><code>SqliteCommand newUserCommand = connection.CreateCommand();\ncommand.CommandText =\n  @\"\n    INSERT INTO users (name,password,email)\n    VALUES('Mikael Bergstr\u00f6m','12345','fake@bullshit.com');\n  \";\n\nint rowsAffected = command.ExecuteNonQuery();\n</code></pre>"},{"location":"annat/databaser/c-och-sqlite/#executescalar","title":"ExecuteScalar()","text":"<p>K\u00f6r kommandot, och returnerar resultatet \u2013 men bara f\u00f6rsta cellen (f\u00f6rsta kolumnen i f\u00f6rsta raden). Resultatet returneras som ett object, som dessutom kan vara null ifall operationen inte returnerade n\u00e5got. Med andra ord beh\u00f6vs b\u00e5de casting och n\u00e5got s\u00e4tt att hantera nullv\u00e4rden t.ex. via null-coalescing.</p> <pre><code>SqliteCommand countCommand = connection.CreateCommand();\n\ncountCommand.CommandText =\n@\"\n  SELECT COUNT(*)\n  FROM users\n\";\n\nlong result = 0;\nobject resultObj = countCommand.ExecuteScalar() ?? 0;\nresult = (long)resultObj;\n</code></pre>"},{"location":"annat/databaser/c-och-sqlite/#executereader","title":"ExecuteReader()","text":"<p>K\u00f6r kommandot, och returnerar en SQLiteDataReader f\u00f6r att l\u00e4sa av resultatet. Passar b\u00e4st f\u00f6r SELECT-kommandon som returnerar flera rader och/eller kolumner.</p> <pre><code>SqliteCommand selectCommand = connection.CreateCommand();\n\nselectCommand.CommandText =\n@\"\n  SELECT (name)\n  FROM users\n\";\n\nusing (SqliteDataReader reader = selectCommand.ExecuteReader())\n{\n  // kod f\u00f6r att l\u00e4sa datan\n}\n</code></pre>"},{"location":"annat/databaser/c-och-sqlite/#sqlitedatareader","title":"SqliteDataReader","text":"<p>Ett SqliteDataReader-objekt anv\u00e4nds f\u00f6r att l\u00e4sa av ett resultat fr\u00e5n en SQL-operation (ofta ett SELECT-kommando), en rad i taget.</p> <p>Precis som med SqliteConnection-objekt anv\u00e4nder man oftast ett using-block f\u00f6r att se till s\u00e5 att reader-objektet tas bort ordentligt n\u00e4r man \u00e4r klar med det.</p>"},{"location":"annat/databaser/c-och-sqlite/#read","title":"Read()","text":"<p>Flyttar readerns \"l\u00e4shuvud\" till n\u00e4sta rad, om den finns. Om den inte finns, returneras true.</p> <pre><code>while (reader.Read())\n{\n  // Kod f\u00f6r att l\u00e4sa radens data\n}\n</code></pre>"},{"location":"annat/databaser/c-och-sqlite/#get","title":"Get?()","text":"<p>Det finns m\u00e5nga metoder som b\u00f6rjar med Get \u2013 till exempel GetString, GetInt32, GetFloat och GetBoolean. De tar alla emot en integer som parameter, och returnerar datan den nuvarande raden och den kolumn som anges av siffran. De f\u00f6rs\u00f6ker ocks\u00e5 konvertera (parse) datan till r\u00e4tt datatyp.</p> <pre><code>while (reader.Read())\n{\n  // L\u00e4ser datan i den f\u00f6rsta kolumnen och tolkar den som en string\n  string name = reader.GetString(0);\n\n  Console.WriteLine(name);\n}\n</code></pre>"},{"location":"annat/databaser/c-och-sqlite/#fieldcount","title":"FieldCount","text":"<p>En property som talar om hur m\u00e5nga f\u00e4lt (kolumner) resultatet inneh\u00e5ller.</p>"},{"location":"annat/databaser/c-och-sqlite/#getname","title":"GetName()","text":"<p>Returnerar namnet p\u00e5 en specifik kolumn i resultatet.</p> <pre><code>for (var i = 0; i &lt; reader.FieldCount; i++)\n{\n  Console.WriteLine(reader.GetName(i));\n}\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/","title":"Entity Framework Core","text":"<p>Entity Framework Core \u00e4r ett ramverk som g\u00f6r att man slipper skriva SQL-kommandon sj\u00e4lv. EF fungerar som en mellanhand \u2013 vi kan s\u00e4ga \u00e5t EF hur datan som ska sparas ser ut och vad som ska g\u00f6ras med den, och EF f\u00f6rvandlar det till databaskommandon \u00e5t oss, och sk\u00f6ter interaktionen med databasen.</p>"},{"location":"annat/databaser/entity-framework-core/#installation","title":"Installation","text":"<p>K\u00f6r f\u00f6ljande kommando f\u00f6r att installera EF-verktygen p\u00e5 din dator:</p> <pre><code>dotnet tool install --global dotnet-ef\n</code></pre> <p>L\u00e4gg till NuGet-paketet Microsoft.EntityFrameworkCore till ditt projekt via NuGet gallery eller via kommandot:</p> <pre><code>dotnet add package Microsoft.EntityFrameworkCore\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#modellen","title":"Modellen","text":"<p>Skapa en klass f\u00f6r varje typ av objekt som ska lagras i databasen. Det enda som lagras i databasen \u00e4r klassernas properties. Tillsammans bildar alla dessa klasser \"modellen\" f\u00f6r databasen.</p> <p>{% code title=\"User.cs\" %} <pre><code>public class User\n{\n  public int UserId { get; set; }\n  public string Username { get; set; } = \"\";\n  public string Password { get; set; } = \"\";\n}\n</code></pre></p> <p>Tabellen som skapas f\u00f6r att lagra anv\u00e4ndare kommer att d\u00f6pas till samma sak som klassen plus en plural-\u00e4ndelse (Users). Som prim\u00e4rnyckel f\u00f6r tabellen anv\u00e4nds f\u00f6rsta b\u00e4sta property som antingen heter Id eller klassens namn plus Id.</p> <p>Modellen kan inkludera komposition, vilket automatiskt leder till att en relation skapas i databasen.</p> <p>{% code title=\"Group.cs\" %} <pre><code>public class Group\n{\n  public int Id { get; set; }\n  public string Name { get; set; } = \"\";\n\n  // Eftersom relationen \u00e4r en en-till-m\u00e5nga-relation, skapas automatiskt en\n  // kolumn i User-tabellen som inneh\u00e5ller r\u00e4tt grupps Id.\n  // Man kan ocks\u00e5 f\u00e5 samma effekt genom att ha en Group-property i User-klassen.\n  public List&lt;User&gt; Members { get; set; } = new();\n}\n</code></pre></p>"},{"location":"annat/databaser/entity-framework-core/#attribut","title":"Attribut","text":"<p>Man kan anv\u00e4nda attribut f\u00f6r att f\u00e5 mer kontroll \u00f6ver databastabellerna som skapas f\u00f6r att motsvara modellen. F\u00f6r att f\u00e5 anv\u00e4nda attributen m\u00e5ste man inkludera r\u00e4tt namespaces:</p> <pre><code>using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#table","title":"[Table]","text":"<p>Anv\u00e4nds f\u00f6r att ange tabellens namn.</p> <pre><code>[Table(\"UserInfo\")]\npublic class User\n{\n  // ...\n}\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#column","title":"[Column]","text":"<p>Anv\u00e4nds f\u00f6r att ange kolumnegenskaper t.ex. namn och vilken ordning kolumnen ska ha i tabellen.</p> <pre><code>public class User\n{\n  [Column(\"Id\", Order = 1)]\n  public int UserId { get; set; }\n\n  [Column(\"Name\")]\n  public string Username { get; set; } = \"\";\n\n  public string Password { get; set; } = \"\";\n}\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#notmapped","title":"[NotMapped]","text":"<p>Anv\u00e4nds f\u00f6r att ange att en viss property inte ska ing\u00e5 i modellen.</p> <pre><code>public class User\n{\n  public int UserId { get; set; }\n  public string Username { get; set; } = \"\";\n  public string Password { get; set; } = \"\";\n\n  [NotMapped]\n  public string CurrentHitpoints { get; set; }\n}\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#required","title":"[Required]","text":"<p>Anv\u00e4nds f\u00f6r att ange att en viss property m\u00e5ste ges ett v\u00e4rde och inte f\u00e5r vara tom. Motsvarar NOT NULL.</p> <pre><code>public class User\n{\n  [Required]\n  public int UserId { get; set; }\n\n  // ... \n}\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#dbcontext","title":"DbContext","text":"<p>En klass som representerar kopplingen till en databas, och som kommunikationen med database sker genom. Detta kallas en databas-kontext.</p> <p>Man skapar en egen databaskontext, med egna inst\u00e4llningar, genom att skapa en klass som \u00e4rver fr\u00e5n DbContext.</p> <p>{% code title=\"DatabaseContext.cs\" %} <pre><code>public class DatabaseContext : DbContext\n{\n  public DbSet&lt;User&gt; Users { get; set; }\n\n  protected override void OnConfiguring (DbContextOptionsBuilder optionsBuilder)\n  {\n    optionsBuilder.UseSqlite(\"Data Source=ef_users.sqlite\");\n  }\n}\n</code></pre></p> <p>Sedan skapar man en instans av sin nya DbContext-klass, och via denna instans kan man sedan g\u00f6ra CRUD-operationer mot databasen.</p> <p>{% code title=\"program.cs\" %} <pre><code>using (var context = new DatabaseContext())\n{\n  User user = new User() { Username = \"Micke\", Password = \"12345\" };\n\n  context.Users.Add(user);\n\n  context.SaveChanges();\n}\n</code></pre></p>"},{"location":"annat/databaser/entity-framework-core/#dbset","title":"DbSet","text":"<p>Varje klass som ing\u00e5r i modellen l\u00e4ggs in som en DbSet-property i klassen som \u00e4rver fr\u00e5n DbContext.</p> <pre><code>public class DatabaseContext : DbContext\n{\n  public DbSet&lt;User&gt; Users { get; set; }\n  public DbSet&lt;Group&gt; Users { get; set; }\n  public DbSet&lt;Post&gt; Users { get; set; }\n}\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#onconfiguring","title":"OnConfiguring","text":"<p>F\u00f6r att g\u00f6ra egna inst\u00e4llningar i databas-kontexten, g\u00f6r en override av basklassens OnConfiguring-metod.</p> <pre><code>protected override void OnConfiguring (DbContextOptionsBuilder optionsBuilder)\n{\n  optionsBuilder.UseSqlite(\"Data Source=ef_users.sqlite\");\n}\n</code></pre> <p>Objektet optionsbuilder anv\u00e4nds sedan f\u00f6r att g\u00f6ra diverse inst\u00e4llningar. Den viktigaste h\u00e4r \u00e4r UseSqlite, som g\u00f6r att databaskontexten kommer att kopplas till en SqLite-databas. D\u00e4r anges ocks\u00e5 databasens filnamn.</p>"},{"location":"annat/databaser/entity-framework-core/#migrations","title":"Migrations","text":"<p>Migrations anv\u00e4nds f\u00f6r att antingen generera en databasfil fr\u00e5n klasser eller tv\u00e4rtom. N\u00e4r man genererar en databas utifr\u00e5n klasser kallas det att man arbetar \"code first\".</p> <p>F\u00f6r att skapa och k\u00f6ra migrations beh\u00f6ver man anv\u00e4nda terminalen, och man beh\u00f6ver vara i samma mapp som csproj-filen. I Visual Studio Code kan man med andra ord beh\u00f6va byta till den mappen, t.ex:</p> <pre><code>PS C:\\Programming\\EFDemo&gt; cd EFDemo\nPS C:\\Programming\\EFDemo\\EFDemo&gt;\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#skapa-en-migration","title":"Skapa en migration","text":"<p>En migration \u00e4r, lite f\u00f6renklat, en databasf\u00f6r\u00e4ndring. Det betyder att man g\u00f6r en stor migration i b\u00f6rjan n\u00e4r man f\u00f6rst skapat sin modell, och sedan kan g\u00f6ra f\u00f6r\u00e4ndringar i form av fler migrationer i efterhand.</p> <pre><code>dotnet ef migrations add CreateDB\n</code></pre> <p>I exemplet ovan skapas en migration med namnet CreateDB. Alla migrationer beh\u00f6ver ha ett unikt namn. Namnet best\u00e4mmer man sj\u00e4lv, men undvik mellanslag.</p>"},{"location":"annat/databaser/entity-framework-core/#uppdatera-databasen","title":"Uppdatera databasen","text":"<p>N\u00e4r en ny migration skapats beh\u00f6ver databasen uppdateras.</p> <pre><code>dotnet ef database update\n</code></pre> <p>Om modellen uppdateras beh\u00f6ver allts\u00e5 en ny migration skapas och d\u00e4refter beh\u00f6ver databasen uppdateras.</p>"},{"location":"annat/databaser/entity-framework-core/#hamta-data","title":"H\u00e4mta data","text":"<p>Man h\u00e4mtar data fr\u00e5n databasen genom att anv\u00e4nda sig av olika metoder som ing\u00e5r i respektive DbSet. Ofta anv\u00e4nds Linq-metoder eller Linq-queries. Vanligast \u00e4r Where.</p> <pre><code>// H\u00e4mtar anv\u00e4ndaren Micke, f\u00f6rutsatt att hans l\u00f6senord \u00e4r 12345.\nUser u = context.Users.Where(\n  u =&gt; u.Username == \"Micke\" &amp;&amp;\n  u.Password == \"12345\")\n  .FirstOrDefault();\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#include","title":"Include()","text":"<p>N\u00e4r datan som ska h\u00e4mtas \u00e4r lagrad i flera tabeller (dvs det finns en relation), beh\u00f6ver man anv\u00e4nda Include() f\u00f6r att den extra datan ska laddas in. Resultatet blir d\u00e5 att kompositionen fungerar.</p> <pre><code>// H\u00e4mtar grupp 1 &amp; fyller dess Members-lista med instanser av User-klassen\n//  som f\u00e5r sin data fr\u00e5n Users-tabellen.\nGroup coolGroup = context.Groups\n  .Where(g =&gt; g.Id == 1)\n  .Include(g =&gt; g.Members)\n  .FirstOrDefault();\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#fromsql","title":"FromSql()","text":"<p>Om man vill kan man skriva sina egna SQL-fr\u00e5gor ist\u00e4llet f\u00f6r att g\u00e5 via Linq. Det g\u00f6r man d\u00e5 via FromSql-metoden. Den tar emot en formaterbar string som parameter, s\u00e5 anv\u00e4nd $ framf\u00f6r f\u00f6rsta citattecknet. L\u00e4gg ocks\u00e5 till @ ifall du vill dela upp SQL-fr\u00e5gan p\u00e5 flera rader.</p> <pre><code>  User u = context.Users.FromSql(@$\"\n    Select * \n    from Users \n    where Username = 'Micke' \n    and Password == '12345'\n    \").FirstOrDefault();\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#modifiera-data","title":"Modifiera data","text":"<p>N\u00e4r det g\u00e4ller CUD-operationer (Create, Update och Delete) s\u00e5 inneb\u00e4r de att datan i den lokala databaskontexten f\u00f6rst \u00e4ndras, och sedan m\u00e5ste synkroniseras mot databasen. Synkroniseringen sker via metoden SaveChanges().</p> <pre><code>using (var context = new DatabaseContext())\n{\n  // Kod som g\u00f6r \u00e4ndringar\n\n  context.SaveChanges();\n}\n</code></pre> <p>K\u00f6rs inte SaveChanges s\u00e5 f\u00f6rsvinner allts\u00e5 \u00e4ndringarna n\u00e4r programmet avslutas.</p>"},{"location":"annat/databaser/entity-framework-core/#stoppa-in-data","title":"Stoppa in data","text":"<p>Eftersom DbSets \u00e4r generiska samlingar s\u00e5 \u00e4r det ganska enkelt att l\u00e4gga in ny data i dem:</p> <pre><code>using (var context = new DatabaseContext())\n{\n  User micke = new() { Username = \"Micke\", Password = \"12345\" };\n  Group group = new() { Name = \"Coola klubben\" };\n  group.Members.Add(micke);\n\n  context.Groups.Add(group);\n  context.Users.Add(micke);\n\n  context.SaveChanges();\n}\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#modifiera-data_1","title":"Modifiera data","text":"<p>B\u00f6rja med att h\u00e4mta det som ska \u00e4ndras. \u00c4ndra p\u00e5 instansen. Det \u00e4r allt som kr\u00e4vs! Entity Framework h\u00e5ller reda p\u00e5 objekt som h\u00e4mtats ut, och ser till att synkronisera deras data med databasen automatiskt.</p> <pre><code>using (var context = new DatabaseContext())\n{\n  User u = context.Users.FromSql(@$\"\n    Select * \n    from Users \n    where Username = 'Amanda' \n    \").FirstOrDefault();\n\n  u.Password = \"password1\";\n  context.SaveChanges();\n}\n</code></pre>"},{"location":"annat/databaser/entity-framework-core/#ta-bort-data","title":"Ta bort data","text":"<p>B\u00f6rja med att h\u00e4mta det som ska tas bort. Anv\u00e4nd d\u00e4refter Remove()-metoden f\u00f6r att ta bort det ur databasen.</p> <pre><code>using (var context = new DatabaseContext())\n{\n    User u = context.Users.FromSql(@$\"\n    Select * \n    from Users \n    where Username = 'Micke' \n    \").FirstOrDefault();\n\n  context.Users.Remove(u);\n  context.SaveChanges();\n}\n</code></pre>"},{"location":"annat/databaser/sqlite-kommandon/","title":"SQLite-kommandon","text":""},{"location":"annat/databaser/sqlite-kommandon/#create-table","title":"CREATE TABLE","text":"<p>Skapar en tabell. </p> <pre><code>CREATE TABLE users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    password TEXT NOT NULL,\n    email TEXT NOT NULL\n);\n</code></pre> <p>Ovanst\u00e5ende skapar tabellen users med kolumnerna id, name, password och email.</p> <ul> <li>INTEGER betyder att kolumnen bara kan inneh\u00e5lla siffror, p\u00e5 samma s\u00e4tt som en integer-variabel i C#..</li> <li>TEXT betyder att kolumnen bara kan inneh\u00e5lla text, lite som en string.</li> <li>PRIMARY KEY betyder att det \u00e4r v\u00e4rdet i den kolumnen som \u00e4r unikt och anv\u00e4nds f\u00f6r att identifiera varje rad.</li> <li>AUTOINCREMENT betyder att om man l\u00e4gger till en rad i tabellen utan att ange ett v\u00e4rde f\u00f6r denna kolumn s\u00e5 ges den ett automatiskt nytt v\u00e4rde.</li> <li>NOT NULL betyder att man inte f\u00e5r l\u00e4mna kolumnen tom.</li> </ul> id\ud83d\udd11namepasswordemail"},{"location":"annat/databaser/sqlite-kommandon/#drop-table","title":"DROP TABLE","text":"<p>Raderar en tabell.</p> <pre><code>DROP TABLE users;\n</code></pre>"},{"location":"annat/databaser/sqlite-kommandon/#alter-table","title":"ALTER TABLE","text":"<p>G\u00f6r \u00e4ndringar i en existerande tabell</p>"},{"location":"annat/databaser/sqlite-kommandon/#rename","title":"RENAME","text":"<p>Byter namn p\u00e5 tabellen.</p> <pre><code>ALTER TABLE users\nRENAME TO students;\n</code></pre>"},{"location":"annat/databaser/sqlite-kommandon/#add-column","title":"ADD COLUMN","text":"<p>L\u00e4gger till en ny kolumn</p> <pre><code>ALTER TABLE users\nADD COLUMN twitter_handle TEXT;\n</code></pre>"},{"location":"annat/databaser/sqlite-kommandon/#drop-column","title":"DROP COLUMN","text":"<p>Tar bort en kolumn (och all data som finns i den). Fungerar inte f\u00f6r alla kolumner \u2013 till exempel kan man inte ta bort de som \u00e4r prim\u00e4rnycklar.</p> <pre><code>ALTER TABLE users\nDROP COLUMN twitter_handle;\n</code></pre>"},{"location":"annat/databaser/sqlite-kommandon/#rename-column","title":"RENAME COLUMN","text":"<p>Byter namn p\u00e5 en kolumn</p> <pre><code>ALTER TABLE users\nRENAME COLUMN name TO username;\n</code></pre>"},{"location":"annat/databaser/sqlite-kommandon/#insert-into","title":"INSERT INTO","text":"<p>L\u00e4gger till en rad i en tabell.</p> <pre><code>INSERT INTO users (name,password,email)\nVALUES('Mikael Bergstr\u00f6m','12345','fake@bullshit.com');\n</code></pre> <p>Ovanst\u00e5ende stoppar in en rad i tabellen users.</p> <ul> <li>(name,password,email) betyder att det \u00e4r de tre kolumnerna som v\u00e4rden ska stoppas in i.</li> <li>VALUES('Mikael Bergstr\u00f6m','12345','fake@bullshit.com') betyder att texten \"Mikael Bergstr\u00f6m\" l\u00e4ggs in i den f\u00f6rsta angivna kolumnen (name), \"12345\" l\u00e4ggs in i den andra kolumnen (password) och att \"fake@bullshit.com\" l\u00e4ggs in i den tredje (email).</li> </ul> <p>En av tabellens fyra kolumner, \"id\", anges inte och f\u00e5r inget v\u00e4rde. Eftersom den \u00e4r AUTOINCREMENT f\u00e5r den \u00e4nd\u00e5 ett v\u00e4rde, automatiskt.</p> id\ud83d\udd11namepasswordemail1Mikael Bergstr\u00f6m12345fake@bullshit.com <p>Observera att man anv\u00e4nder ' f\u00f6r att avgr\u00e4nsa texter (strings). </p>"},{"location":"annat/databaser/sqlite-kommandon/#select","title":"SELECT","text":"<p>H\u00e4mtar data fr\u00e5n en tabell</p> <pre><code>SELECT * FROM users;\n</code></pre> <p>Ovanst\u00e5ende h\u00e4mtar alla rader och alla kolumner fr\u00e5n tabellen.</p> id\ud83d\udd11namepasswordemail1Mikael Bergstr\u00f6m12345fake@bullshit.com2Jacob Marleymoney$moneyman@scroogemarley.com <pre><code>SELECT name,email FROM users;\n</code></pre> <p>Ovanst\u00e5ende h\u00e4mtar alla rader, men bara kolumnerna name och email.</p> nameemailMikael Bergstr\u00f6mfake@bullshit.comJacob Marleymoneyman@scroogemarley.com"},{"location":"annat/databaser/sqlite-kommandon/#as","title":"AS","text":"<p>G\u00f6r att kolumner kan ges nya namn i resultatet.</p> <pre><code>SELECT name AS namn FROM users;\n</code></pre> namnMikael Bergstr\u00f6mJacob Marley"},{"location":"annat/databaser/sqlite-kommandon/#where","title":"WHERE","text":"<p>G\u00f6r att man kan vara mer specifik med vilken eller vilka rader man vill l\u00e4sa av.</p> <pre><code>SELECT name,email FROM users WHERE id=1;\n</code></pre> <p>Ovanst\u00e5ende h\u00e4mtar bara kolumnerna name och email, och bara de rader d\u00e4r kolumnen id har v\u00e4rdet 0.</p> nameemailMikael Bergstr\u00f6mfake@bullshit.com"},{"location":"annat/databaser/sqlite-kommandon/#and","title":"AND","text":"<p>G\u00f6r att man kan s\u00e4tta ihop flera olika kriterier i en WHERE.</p> <pre><code>SELECT name FROM users WHERE email='fake@bullshit.com' AND password='12345';\n</code></pre>"},{"location":"annat/databaser/sqlite-kommandon/#count","title":"COUNT","text":"<p>R\u00e4knar antalet rader som inneh\u00e5ller ett v\u00e4rde.</p> <pre><code>SELECT COUNT(*) FROM users WHERE id=0;\n</code></pre>"},{"location":"annat/databaser/sqlite-kommandon/#delete","title":"DELETE","text":"<p>Tar bort en eller flera rader fr\u00e5n en tabell, baserat p\u00e5 ett eller flera kriterier.</p> <pre><code>DELETE FROM users WHERE id=0;\n</code></pre> <p>Kriterierna anges via WHERE, precis som f\u00f6r SELECT.</p>"},{"location":"annat/databaser/sqlite-kommandon/#update","title":"UPDATE","text":"<p>\u00c4ndrar information i en eller flera celler, baserat p\u00e5 ett eller flera kriterier.</p> <pre><code>UPDATE users\nSET email = 'deep@fake.com'\nWHERE id=0;\n</code></pre> <p>Ovanst\u00e5ende kod \u00e4ndrar email-kolumnens data till \"deep@fake.com\" f\u00f6r alla rader d\u00e4r id-kolumnen inneh\u00e5ller en nolla.</p> id\ud83d\udd11namepasswordemail0Mikael Bergstr\u00f6m12345deep@fake.com1Jacob Marleymoney$moneyman@scroogemarley.com"},{"location":"annat/databaser/sqlite-kommandon/#avancerat-relationer","title":"Avancerat: Relationer","text":"<p>En viktig funktion i relationella databaser, som MySQL eller SQLite, \u00e4r relationer. Relationer \u00e4r ett s\u00e4tt att slippa dubletter av data. Ett exempel kan vara en databas d\u00e4r man h\u00e5ller reda p\u00e5 elever och klasser. F\u00f6r varje elev ska databasen h\u00e5lla reda p\u00e5 f\u00f6rnamn, efternamn och personnummer. F\u00f6r varje klass ska databasen h\u00e5lla reda p\u00e5 klassens namn och vilken l\u00e4rare som \u00e4r klassens mentor.</p> <p>Dessutom beh\u00f6ver databasen h\u00e5lla reda p\u00e5 vilken elev som g\u00e5r i vilken klass. Var lagras den informationen? Ett s\u00e4tt vore att ha allting i en enda j\u00e4ttetabell:</p> <p>students</p> id\ud83d\udd11namesurnamepnumberclassnamementor0MikaelBergstr\u00f6mXXXXXX-XXXXTE00AMira Belle1MohammadMohammadiXXXXXX-XXXXTE00BKevin McAllister2Anna-KarinKarlssonXXXXXX-XXXXTE00AMira Belle <p>Nackdelen blir att vi f\u00e5r dubletter \u2013 klassnamnen och mentorernas namn st\u00e5r dubbelt! F\u00f6r att undvika detta skapar man generellt ist\u00e4llet tv\u00e5 olika tabeller \u2013 en f\u00f6r elever och en f\u00f6r klasser \u2013 som har en relation.</p> <p>students</p> id\ud83d\udd11namesurnamepnumberclassid1MikaelBergstr\u00f6mXXXXXX-XXXX12MohammadMohammadiXXXXXX-XXXX23Anna-KarinKarlssonXXXXXX-XXXX1 <p>classes</p> id\ud83d\udd11namementor1TE00AMira Belle2TE00BKevin McAllister <p>H\u00e4r \u00e4r relationen att kolumnen classid i tabellen students inneh\u00e5ller siffror som h\u00f6r ihop med kolumnen id i tabellen classes. Observera att det \u00e4r classes-tabellens prim\u00e4rnyckel som anv\u00e4nds.</p> <p>F\u00f6r att hindra anv\u00e4ndare fr\u00e5n att l\u00e4gga in icke-giltiga v\u00e4rden classid-kolumnen s\u00e5 kan relationen skrivas in i tabellens definition n\u00e4r den skapas (Det kan INTE g\u00f6ras i efterhand!):</p> <pre><code>CREATE TABLE classes (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    mentor TEXT NOT NULL\n);\n\nCREATE TABLE students (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    surname TEXT NOT NULL,\n    pnumber TEXT NOT NULL,\n    class_id INTEGER NOT NULL,\n    FOREIGN KEY(class_id) REFERENCES classes(id)\n);\n</code></pre> <p>Med andra ord l\u00e4gger man helt enkelt till <code>FOREIGN KEY(x) REFERENCES table(y)</code> f\u00f6r att koppla kolumnen x till kolumnen y i tabellen \"table\"</p>"},{"location":"annat/databaser/sqlite-kommandon/#avancerat-join","title":"Avancerat: JOIN","text":"<p>Joins \u00e4r ett s\u00e4tt att s\u00e4tta ihop tabeller som har en relation, n\u00e4r man efterfr\u00e5gar data med SELECT.</p> <pre><code>SELECT students.name AS student_name, classes.name AS class\n    FROM students\n   INNER JOIN classes\n    ON students.classid = classes.id;\n</code></pre> <p>Det finns flera sorters JOIN, men INNER JOIN \u00e4r den vanligaste. Man anger f\u00f6rst som vanligt vilka kolumner man vill ha med, sedan FROM en f\u00f6rsta tabell. Sedan l\u00e4gger man till INNER JOIN en annan tabell, och s\u00e5 ON vilka kolumner som ska kopplas ihop.</p> student_name class Mikael TE00A Mohammad TE00B Anna-Karin TE00A <p>Observera att man allts\u00e5 m\u00e5ste specifiera vilken tabell varje kolumn kommer fr\u00e5n i f\u00f6rsta delen av SELECT-kommandot, framf\u00f6r allt n\u00e4r kolumner i b\u00e5da tabellerna har samma namn.</p>"},{"location":"annat/databaser/sqlite-och-vscode/","title":"SQLite och VSCode","text":"<p>Visual Studio Code har inget inbyggt st\u00f6d f\u00f6r SQLite, men det finns s\u00e5klart bra extensions:</p> <ul> <li>SQLite - g\u00f6r att man kan \u00f6ppna och utf\u00f6ra kommandon/queries mot en SQLite-databas</li> </ul>"},{"location":"annat/databaser/sqlite-och-vscode/#oppna-en-databas","title":"\u00d6ppna en databas","text":"<p>H\u00f6gerklicka p\u00e5 en sqlite-fil eller en db-fil och v\u00e4lj \"Open database\".</p> <p></p> <p>Man kan ocks\u00e5 \"\u00f6ppna\" tomma filer som SQLite-databaser \u2013 genom att sedan k\u00f6ra CREATE TABLE s\u00e5 g\u00f6rs den tomma filen till en databas.</p> <p>N\u00e4r databasen \u00e4r \u00f6ppnad b\u00f6r det dyka upp en \"SQLite Explorer\"-flik:</p> <p></p> <p>Databasen i exemplet ovan inneh\u00e5ller en tabell som heter users, som i sin tur har kolumnerna id och name.</p>"},{"location":"annat/databaser/sqlite-och-vscode/#stang-en-databas","title":"St\u00e4ng en databas","text":"<p>H\u00f6gerklicka p\u00e5 databasen i SQLite Explorer och v\u00e4lj \"Close database\".</p>"},{"location":"annat/databaser/sqlite-och-vscode/#kora-ett-kommando","title":"K\u00f6ra ett kommando","text":"<p>H\u00f6gerklicka p\u00e5 antingen databasen eller en av tabellerna i SQLite Explorer och v\u00e4lj \"New query\". F\u00f6r tabellen kan man v\u00e4lja mellan tv\u00e5 f\u00e4rdigifyllda query-mallar: en f\u00f6r INSERT INTO och en f\u00f6r SELECT.</p> <p>Det du f\u00e5r \u00e4r en ny textfil som inneh\u00e5ller antingen ett tomt utrymme d\u00e4r du kan skriva en query, eller en ny textfil med f\u00f6rifyllda kommandon du kan redigera.</p> <p></p> <p>F\u00f6r att k\u00f6ra queryn, tryck p\u00e5 F1 och k\u00f6r \"SQLite: Run Query\". Om det du k\u00f6rde var en SELECT-query b\u00f6r resultatet nu dyka upp i ett sidof\u00f6nster.</p>"},{"location":"annat/databaser/sqlite-och-vscode/#skapa-en-databas","title":"Skapa en databas","text":"<p>Skapa en tom fil, som du d\u00f6per till n\u00e5got som slutar med .sqlite, t.ex. \"database.sqlite\".</p> <p>\u00d6ppna filen som en databas, enligt ovan.</p> <p>H\u00f6gerklicka p\u00e5 databasen i SQLite, v\u00e4lj \"New Query\".</p> <p>L\u00e4gg till en tabell genom att skriva in kommandot f\u00f6r CREATE TABLE.</p> <p>Tryck F1 och v\u00e4lj \"SQLite: Run Query\".</p>"},{"location":"annat/databaser/sqlite-och-vscode/#titta-pa-en-tabell","title":"Titta p\u00e5 en tabell","text":"<p>Se till att databasen \u00e4r \u00f6ppnad.</p> <p>H\u00f6gerklicka p\u00e5 tabellen i SQLite Explorer, v\u00e4lj \"Show Table\".</p>"},{"location":"annat/linq/","title":"Linq*","text":"<p>LINQ st\u00e5r f\u00e5r \"Language-integrated query\" och l\u00e4gger dels till st\u00f6d f\u00f6r databas-fr\u00e5gor (queries) direkt i C#, och dels en serie metoder som g\u00f6r det enklare att hitta specifik data i samlingar. </p> <p>Linq-metoder | Linq-queries</p>"},{"location":"annat/linq/linq-metoder/","title":"Linq-metoder","text":"<p>Linq-biblioteket bygger ut existerande samlings-datatyper (som List och \u00e4ven arrayer) med nya metoder.</p> <p>Ofta tar metoderna emot delegater som parametrar, och ofta anv\u00e4nds d\u00e5 ist\u00e4llet Lambda-uttryck.</p> <p>Flera av metoderna returnerar en generisk samling av den Linq-specifika datatypen Enumerable, som i sin tur kan omvandlas till en lista genom att man anropar ToList().</p>"},{"location":"annat/linq/linq-metoder/#hamta-flera","title":"H\u00e4mta flera","text":""},{"location":"annat/linq/linq-metoder/#where","title":"Where()","text":"<p>Tar emot ett kriterium i form av en delegat eller ett Lambda-uttryck, och returnerar en Enumerator som inneh\u00e5ller alla f\u00f6rem\u00e5l som matchar kriteriet.</p> <pre><code>List&lt;GameObject&gt; objects = new();\nobjects.Add(new Enemy());\n\nList&lt;GameObject&gt; lowHealth = \n  objects.Where(g =&gt; g.hp &lt; 10)\n  .ToList();\n</code></pre>"},{"location":"annat/linq/linq-metoder/#oftype","title":"OfType&lt;&gt;()","text":"<p>Returnerar en Enumerable som inneh\u00e5ller alla f\u00f6rem\u00e5l som \u00e4r av en specifik datatyp. V\u00e4ldigt anv\u00e4ndbart ifall man anv\u00e4nt polymorfism f\u00f6r att lagra instanser av subklasser i en samling d\u00e4r typvariabeln \u00e4r basklassen.</p> <pre><code>List&lt;GameObject&gt; objects = new();\nobjects.Add(new Enemy());\n\nList&lt;Enemy&gt; enemies = objects.OfType&lt;Enemy&gt;().ToList();\n</code></pre>"},{"location":"annat/linq/linq-metoder/#hamta-enstaka","title":"H\u00e4mta enstaka","text":""},{"location":"annat/linq/linq-metoder/#first-last","title":"First() / Last()","text":"<p>Returnerar det f\u00f6rsta/sista v\u00e4rdet i samlingen. Om samlingen \u00e4r tom s\u00e5 skapas ett runtime-fel.</p> <pre><code>List&lt;int&gt; myList = new List&lt;int&gt;() {4,3,2,1};\n\nint i = myList.First(); // i blir 4\n</code></pre>"},{"location":"annat/linq/linq-metoder/#firstordefault-lastordefault","title":"FirstOrDefault() / LastOrDefault()","text":"<p>Fungerar som First/Last, utom att metoden returnerar null, eller ett default-v\u00e4rde (t.ex. 0 f\u00f6r ints) ifall samlingen \u00e4r tom.</p> <pre><code>List&lt;int&gt; myList = new List&lt;int&gt;();\nint i = myList.FirstOrDefault(); // i blir 0\n</code></pre>"},{"location":"annat/linq/linq-metoder/#orderby","title":"OrderBy()","text":"<p>Tar emot en delegate eller ett Lambda-uttryck som parameter, och anv\u00e4nder den f\u00f6r att sortera samlingen. Delegaten tar emot ett f\u00f6rem\u00e5l, och returnerar det v\u00e4rde som ska avg\u00f6ra f\u00f6rem\u00e5lens sortering.</p> <p>OrderBy returnerar en Enumerable som inneh\u00e5ller samma f\u00f6rem\u00e5l som originalsamlingen, sorterade i r\u00e4tt ordning.</p> <pre><code>List&lt;Character&gt; sortedCharacters = \n  characters.OrderBy(c =&gt; c.name)\n  .ToList();\n</code></pre>"},{"location":"annat/linq/linq-metoder/#select","title":"Select","text":"<p>Tar emot en delegate eller ett Lambda-uttryck som parameter, och bygger en ny samling med det som returneras fr\u00e5n delegaten/uttrycket f\u00f6r varje f\u00f6rem\u00e5l i originalsamlingen.</p> <p>Anges bara en parameter i delegaten/uttrycket s\u00e5 ska denna vara samma datatyp som originalsamlingens typparameter.</p> <pre><code>List&lt;int&gt; intList = new() { 1, 2, 3, 4, 5 };\n\nList&lt;int&gt; higherIntList = \n  intList.Select(x =&gt; x + 6)\n  .ToList(); // 7,8,9,10,11\n</code></pre> <p>Skapa en lista med instanser av Character, d\u00e4r varje Characters konstruktor tar emot en string i form av ett namn (n):</p> <pre><code>string[] names = {\"Bj\u00f6rn\", \"Mira\", \"Mohammad\", \"Kim\"};\n\nList&lt;Character&gt; characters = \n  names.Select(n =&gt; new Character(n))\n  .ToList();\n</code></pre> <p>Skapa en lista med instanser av Character, d\u00e4r varje Characters konstruktor tar emot en string i form av ett namn (n) samt en siffra som \u00e4r namnets index plus 1:</p> <pre><code>string[] names = {\"Bj\u00f6rn\", \"Mira\", \"Mohammad\", \"Kim\"};\n\nList&lt;Character&gt; characters = \n  names.Select((n, i) =&gt; new Character(n, i+1))\n  .ToList();\n</code></pre>"},{"location":"annat/linq/linq-metoder/#boolska","title":"Boolska","text":""},{"location":"annat/linq/linq-metoder/#all","title":"All()","text":"<p>Tar emot ett kriterium i form av en delegat eller ett Lambda-uttryck, och returnerar true ifall samtliga f\u00f6rem\u00e5l i samlingen st\u00e4mmer in p\u00e5 kriteriet.</p> <pre><code>List&lt;int&gt; intList = new() { 1, 2, 3, 4, 5 };\n\nbool allHigh = intList.All(n =&gt; n &gt; 3); // false, f\u00f6r alla \u00e4r inte &gt; 3\n</code></pre>"},{"location":"annat/linq/linq-metoder/#any","title":"Any()","text":"<p>Tar emot ett kriterium i form av en delegat eller ett Lambda-uttryck, och returnerar true ifall minst ett f\u00f6rem\u00e5l i samlingen st\u00e4mmer in p\u00e5 kriteriet.</p> <pre><code>List&lt;int&gt; intList = new() { 1, 2, 3, 4, 5 };\n\nbool hasHigh = intList.Any(n =&gt; n &gt; 3); // true, f\u00f6r minst en \u00e4r &gt; 3\n</code></pre>"},{"location":"annat/linq/linq-metoder/#matematiska","title":"Matematiska","text":"<p>Dessa fungerar bara f\u00f6r samlingar med tal \u2013 ints, doubles, floats och s\u00e5 vidare.</p>"},{"location":"annat/linq/linq-metoder/#max","title":"Max()","text":"<p>Returnerar det h\u00f6gsta v\u00e4rdet i samlingen.</p> <pre><code>List&lt;int&gt; intList = new() { 2, 67, 23, 100, 1 };\n\nint highest = intList.Max(); // 100\n</code></pre>"},{"location":"annat/linq/linq-metoder/#min","title":"Min()","text":"<p>Returnerar det l\u00e4gsta v\u00e4rdet i samlingen.</p> <pre><code>List&lt;int&gt; intList = new() { 2, 67, 23, 100, 1 };\n\nint lowest = intList.Min(); // 1\n</code></pre>"},{"location":"annat/linq/linq-metoder/#average","title":"Average()","text":"<p>Returnerar medelv\u00e4rdet av alla v\u00e4rden i samlingen, som en double.</p> <pre><code>List&lt;int&gt; intList = new() { 2, 67, 23, 100, 1 };\n\ndouble avg = intList.Average(); // 38.6\n</code></pre>"},{"location":"annat/linq/linq-queries/","title":"Linq-queries","text":"<p>Linq queries \u00e4r databasfr\u00e5gor som fungerar likadant oavsett om man k\u00f6r dem mot en databas eller vilken samling som helst.</p> <pre><code>List&lt;Character&gt; characters = new()\n{\n  new Character() {Name=\"Linda\"},\n  new Character() {Name=\"Micke\"},\n  new Character() {Name=\"Mira\"},\n  new Character() {Name=\"Pontus\"},\n  new Character() {Name=\"George\"},\n};\n\nvar shortNames =\n            from c in characters\n            where c.Name.Length &lt; 6\n            orderby c.Name\n            select c;\n            // Samlingen shortNames inneh\u00e5ller karakt\u00e4rerna Micke, Mira och Linda,\n            // sorterade i bokstavsordning efter namn.\n</code></pre> <p>Det finns en hel del man kan g\u00f6ra med Linq, men oftast klarar man sig med from, in, where, orderby och select.</p>"},{"location":"annat/linq/linq-queries/#fromin","title":"From\u2026in","text":"<p>From och in anger tillsammans varifr\u00e5n datan ska h\u00e4mtas, och vilken variabel varje rad tillf\u00e4lligt ska lagras i. F\u00f6rst skrivs from, d\u00e4refter namnet p\u00e5 en variabel (som inte behlver skapas innan eller ger datatyp), d\u00e4refter in och slutligen datak\u00e4llan.</p> <pre><code>var shortNames = from c in characters\n            select c;\n</code></pre>"},{"location":"annat/linq/linq-queries/#where","title":"Where","text":"<p>Where anger ett villkor som fungerar som ett filter \u2013 bara de f\u00f6rem\u00e5l i samlingen (eller rader i tabellen) som matchar kriteriet f\u00e5r vara med i resultatet.</p> <pre><code>var user = from c in characters\n           where c.Name == \"Micke\" &amp;&amp; c.Password == \"12345\"\n           select c;\n</code></pre>"},{"location":"annat/linq/linq-queries/#orderby","title":"Orderby","text":"<p>Orderby avg\u00f6r hur resultaten sorteras.</p> <pre><code>var shortNames =\n            from c in characters\n            where c.Name.Length &lt; 6\n            orderby c.Age\n            select c;\n            // Samlingen shortNames inneh\u00e5ller karakt\u00e4rerna Micke, Mira och Linda,\n            // sorterade efter \u00e5lder.\n</code></pre>"},{"location":"annat/linq/linq-queries/#select","title":"Select","text":"<p>Select avg\u00f6r vad som l\u00e4ggs in i resultatsamlingen.</p> <pre><code>var shortNames =\n            from c in characters\n            where c.Name.Length &lt; 6\n            orderby c.Name\n            select c.Name;\n            // shortNames blir en string-samling med karakt\u00e4rernas namn\n</code></pre>"},{"location":"annat/monogame/","title":"MonoGame","text":"<p>Monogame \u00e4r ett ramverk f\u00f6r att g\u00f6ra spel \u2013 lite som Raylib men lite mer komplicerat. D\u00e4remot \u00e4r det fr\u00e5n b\u00f6rjan skrivet f\u00f6r C#, all dokumentation och alla tutorials f\u00f6r MonoGame \u00e4r skrivna f\u00f6r C# vilket g\u00f6r det lite l\u00e4ttare att hitta hj\u00e4lp.</p> <p>Info</p> <p>Mer info kommer, sidan \u00e4r bara p\u00e5b\u00f6rjad</p>"},{"location":"annat/monogame/#installera-monogame-och-mcgb-editor","title":"Installera MonoGame och MCGB Editor","text":"<p>K\u00f6r f\u00f6ljande kommandon i terminalen:</p> <pre><code>dotnet new install MonoGame.Templates.CSharp\ndotnet tool install --global dotnet-mgcb-editor\n</code></pre> <p>Det f\u00f6rsta kommandot installerar MonoGames-mallarna s\u00e5 att du kan skapa nya MonoGame-projekt.</p> <p>Det andra kommandot installerat verktyget MCGB editor, som du kommer att beh\u00f6va f\u00f6r att l\u00e4gga in bilder och annat inneh\u00e5ll (MCGB st\u00e5r f\u00f6r Monogame Content Builder Tool).</p>"},{"location":"annat/monogame/grafik/","title":"Grafik*","text":""},{"location":"annat/monogame/grafik/#graphicsdevice","title":"GraphicsDevice","text":"<p>En abstraktion som ger tillg\u00e5ng till renderingssystemet.</p>"},{"location":"annat/monogame/grafik/#clear","title":"Clear()","text":"<p>Rensar sk\u00e4rmen/f\u00f6nstret, anv\u00e4nder f\u00e4rgen som anges som parameter.</p> <pre><code>GraphicsDevice.Clear(Color.CornflowerBlue);\n</code></pre>"},{"location":"annat/monogame/grafik/#color","title":"Color","text":"<p>Datatyp som MonoGame anv\u00e4nder f\u00f6r att hantera f\u00f6rg.</p> <pre><code>Color hotPink = new(255, 105, 180);\nColor semiTransparentWhite = new(255, 255, 255, 128);\n</code></pre> <p>V\u00e4rdena som anges som parametrar \u00e4r m\u00e4ngden r\u00f6tt, gr\u00f6nt och bl\u00e5tt som f\u00e4rgen ska inneh\u00e5lla, p\u00e5 skalan 0\u2013255. Anges ett fj\u00e4rde v\u00e4rde s\u00e5 tolkas det som m\u00e4ngden \"Alpha\", allts\u00e5 genomskinlighet d\u00e4r 0 \u00e4r helt genomskinligt och 255 \u00e4r helt ogenomskinligt.</p>"},{"location":"annat/monogame/grafik/#texture2d","title":"Texture2D","text":"<p>Ett Texture2D-objekt \u00e4r en tv\u00e5dimensionell bild. Oftast skapas de genom att man laddar in resources som man tidigare f\u00f6rberett i mcgb-editor.md.</p> <pre><code>Texture2D hero = Content.Load&lt;Texture2D&gt;(\"heroSprite\");\n</code></pre> <p>Man kan ocks\u00e5 skapa nya Texture2Ds. N\u00e4r de skapas \u00e4r de d\u00e5 helt tomma.</p> <pre><code>// Skapa en Texture2D som \u00e4r 1x1 i storlek\nTexture2D pixel = new Texture2D(GraphicsDevice, 1, 1);\n</code></pre>"},{"location":"annat/monogame/grafik/#getdatacolor","title":"GetData&lt;Color&gt;()","text":"<p>Avancerat \u2013 Fyller en array med f\u00e4rgdatan fr\u00e5n texturen. F\u00f6rsta parametern ska vara den array som fylls med datan; den m\u00e5ste ges samma storlek som det totala antalet pixlar i texturen.</p> <pre><code>// Skapa en array av r\u00e4tt storlek\nColor[] pixels = new Color[hero.Height * hero.Width]\n\n// H\u00e4mta datan in i arrayen\nhero.GetData&lt;Color&gt;(pixels);\n</code></pre> <p>Arrayen \u00e4r endimensionell \u2013 alla pixlar ligger efter varandra. Den \u00e4r organiserad i rader, s\u00e5 f\u00f6rst ligger alla pixlar p\u00e5 bildens f\u00f6rsta rad, sedan alla p\u00e5 bildens andra rad, sedan tredje raden, osv.</p> <p>F\u00f6r att byta f\u00e4rg p\u00e5 en enskild pixel i arrayen anv\u00e4nds sedan vanlig indexering, och datatypen h\u00e4r \u00e4r Color.</p>"},{"location":"annat/monogame/grafik/#setdata","title":"SetData()","text":"<p>Avancerat \u2013 Motsvarigheten till GetData(). Anv\u00e4nds f\u00f6r att stoppa in en array med f\u00e4rgdata in i en Texture2D.</p> <pre><code>hero.SetData&lt;Color&gt;(pixels);\n</code></pre>"},{"location":"annat/monogame/grafik/#spritebatch","title":"SpriteBatch","text":"<p>2D-grafik i Monogame ritas ut med SpriteBatches. N\u00e4r man skapar ett nytt Monogame-projekt f\u00e5r man automatiskt en SpriteBatch-variabel i Game1-klassen:</p> <pre><code>private SpriteBatch _spriteBatch;\n</code></pre> <p>Och den initieras och kopplas till sysyemets renderingssystem (GraphicsDevice) i LoadContent:</p> <pre><code>protected override void LoadContent()\n{\n  _spriteBatch = new SpriteBatch(GraphicsDevice);\n}\n</code></pre> <p>D\u00e4refter kan den anv\u00e4ndas i Draw() f\u00f6r att rita ut Texture2D-objekt till MonoGame-f\u00f6nstret.</p> <pre><code>protected override void Draw(GameTime gameTime)\n{\n  GraphicsDevice.Clear(Color.CornflowerBlue);\n\n  _spriteBatch.Begin();\n  _spriteBatch.Draw(pixel, rectangle, Color.Red);\n  _spriteBatch.End();\n\n  // ...\n  base.Draw(gameTime);\n}\n</code></pre>"},{"location":"annat/monogame/grafik/#begin","title":"Begin()","text":"<p>Aktiverar en SpriteBatch och g\u00f6r den redo f\u00f6r att b\u00f6rja rita ut sprites till sk\u00e4rmen.</p> <pre><code>_spriteBatch.Begin();\n</code></pre>"},{"location":"annat/monogame/grafik/#end","title":"End()","text":"<p>Avslutar en SpriteBatch' ritande f\u00f6r den h\u00e4r bildrutan.</p> <pre><code>_spriteBatch.End();\n</code></pre>"},{"location":"annat/monogame/grafik/#draw","title":"Draw()","text":"<p>Ritar ut en Texture2D till sk\u00e4rmen. F\u00f6rsta parametern \u00e4r alltid den textur som ska ritas ut och den sista \u00e4r den f\u00e4rg som texturen ska f\u00e4rgas med. Anv\u00e4nd <code>Color.White</code> om du bara vill anv\u00e4nda texturens normala f\u00e4rger.</p> <pre><code>Rectangle rect = new (10,20,64,64);\nVector2 pos = new(100,20);\n\n// Rita ut 'hero' och passa in den i rektangeln 'rect'\n_spriteBatch.Draw(hero, rect, Color.White);\n\n// Rita ut 'monster' p\u00e5 positionen som anges av vektorn 'pos'\n_spriteBatch.Draw(monster, pos, Color.White);\n</code></pre> <p>Vill man bara rita ut en del av en Texture2D s\u00e5 kan man ange en extra rektangel som beskriver vilken del som ska klippas ut och visas.</p> <pre><code>Rectangle rect = new (10,20,64,64);\nRectangle localRect = new(0,0,16,16);\n\n// Rita ut den del av 'spritesheet' som finns inom 'localRect' och \n// passa in den i rektangeln 'rect'\n_spriteBatch.Draw(spriteSheet, rect, localRect, Color.White);\n</code></pre> <p>Det finns \u00e4ven andra varianter av Draw() som inte dokumenteras h\u00e4r.</p>"},{"location":"annat/monogame/input/","title":"Input*","text":""},{"location":"annat/monogame/kollisioner/","title":"Kollisioner","text":""},{"location":"annat/monogame/ljud/","title":"Ljud*","text":""},{"location":"annat/monogame/mcgb-editor/","title":"MCGB Editor*","text":""},{"location":"annat/monogame/monogame-projekt/","title":"Monogame-projekt*","text":""},{"location":"annat/monogame/monogame-projekt/#skapa-ett-projekt","title":"Skapa ett projekt","text":"<p>Skapa ett nytt \".Net Project\" som vanligt, men ist\u00e4llet f\u00f6r Console App v\u00e4ljer du MonoGame Cross-Platform Desktop Application.</p>"},{"location":"annat/monogame/monogame-projekt/#projektstruktur","title":"Projektstruktur*","text":"<ul> <li>Program.cs</li> <li>Game-klass</li> <li>Initialize</li> <li>LoadContent</li> <li>Update</li> <li>Draw</li> </ul>"},{"location":"annat/naetverk-och-internet/","title":"N\u00e4tverk och internet [\u2026]","text":"<ul> <li>CRUD, HTTP och REST</li> <li>URL:er och REST</li> <li>RESTful client</li> <li>RESTful server</li> </ul>"},{"location":"annat/naetverk-och-internet/rest-och-crud/","title":"CRUD, HTTP och REST","text":"<p>Se Databaser och framf\u00f6r allt CRUD.</p>"},{"location":"annat/naetverk-och-internet/rest-och-crud/#http","title":"HTTP","text":"<p>HyperText Transfer Protocol. En standard f\u00f6r att f\u00f6ra \u00f6ver information via n\u00e4tverk. \u00c4r grunden till internet.</p> <p>HTTP bygger p\u00e5 request-response-modellen:</p> <ol> <li>Klienten skickar ett request-meddelande till servern. I det specifieras vad det \u00e4r man vill g\u00f6ra och vilken resurs man vill g\u00f6ra det med. Till exempel: h\u00e4mta en specifik html-fil eller l\u00e4sa av en specifik pryl ur en databas.</li> <li>Servern svarar med ett response-meddelande. I det specifieras vad resultatet blev n\u00e4r servern f\u00f6rs\u00f6kte utf\u00f6ra det klienten bad om.</li> </ol>"},{"location":"annat/naetverk-och-internet/rest-och-crud/#header-och-body","title":"Header och body","text":"<p>Varje HTTP-meddelande best\u00e5r av en header och en body. Bodyn kan vara tom, och det \u00e4r den ofta n\u00e4r man t.ex. f\u00f6rs\u00f6ker h\u00e4mta en hemsida som inte finns eller n\u00e4r man inte f\u00f6rs\u00f6kte h\u00e4mta n\u00e5got alls.</p> <p>Headern inneh\u00e5ller allm\u00e4n data och information om meddelandet. H\u00e4r finns till exempel info om vilken version av HTTP som anv\u00e4nds, serverns/klientens mjukvara, n\u00e4r meddelandet skickades etc.</p> <p>Request-meddelanden inneh\u00e5ller alltid en \"metod\" \u2013 motsvarar ungef\u00e4r verb. Metoden avg\u00f6r vilken sorts operation det \u00e4r man f\u00f6rs\u00f6ker g\u00f6ra \u2013 POST, PUT, GET etc.</p> <p>Response-meddelanden inneh\u00e5ller alltid en respons-kod som talar om ifall requesten lyckades eller om n\u00e5got gick fel. Det kan t.ex. vara kod 200 (\"ok\") eller 404 (\"not found\").</p>"},{"location":"annat/naetverk-och-internet/rest-och-crud/#post","title":"POST","text":"<p>Anv\u00e4nds f\u00f6r att skicka in en ny resurs till en server.</p>"},{"location":"annat/naetverk-och-internet/rest-och-crud/#get","title":"GET","text":"<p>Anv\u00e4nds f\u00f6r att h\u00e4mta en resurs fr\u00e5n en server.</p>"},{"location":"annat/naetverk-och-internet/rest-och-crud/#put","title":"PUT","text":"<p>Anv\u00e4nds f\u00f6r att ers\u00e4tta en resurs som redan finns p\u00e5 en server med en ny resurs.</p>"},{"location":"annat/naetverk-och-internet/rest-och-crud/#delete","title":"DELETE","text":"<p>Anv\u00e4nds f\u00f6r att ta bort en resurs fr\u00e5n en server.</p>"},{"location":"annat/naetverk-och-internet/rest-och-crud/#rest","title":"REST","text":"<p>REST \u00e4r en f\u00f6rkortning av Representational State Transfer. F\u00f6renklat kan man s\u00e4ga att REST inneb\u00e4r att man utf\u00f6r CRUD-operationer med hj\u00e4lp av HTTP-kommandon p\u00e5 ett standardiserat s\u00e4tt.</p> CRUD HTTP Create POST Read GET Update PUT Delete DELETE <p>S\u00e5 f\u00f6r att till exempel l\u00e4sa/h\u00e4mta information om en specifik artikel s\u00e5 kan man i ett REST-API skicka en HTTP-request med GET som metod till https://www.somenews.net/api/articles/45 och d\u00e5 f\u00e5r man ett HTTP-response som inneh\u00e5ller artikel nummer 45s data.</p> <p>Och f\u00f6r att l\u00e4gga in en ny artikel skulle man d\u00e5 kunna skicka en HTTP-request med POST som metod till http://www.somenews.net/api/articles. D\u00e5 skulle man ocks\u00e5 inkludera den nya artikelns data i requesten. Som svar skulle man d\u00e5 kunna f\u00e5 ett HTTP-response med statuskoden Ok, och d\u00e5 vet man att artikeln lagts till.</p> <p>Exakt hur requests ska se ut beror p\u00e5 vad den som bygger servern best\u00e4mmer. Det finns inget automatiskt i att det \u00e4r just /api/articles som g\u00e4ller, det skulle lika g\u00e4rna kunnat vara /cyberzone/fluff/gauntlet eller vad som helst.</p>"},{"location":"annat/naetverk-och-internet/restful-client/","title":"RESTful client*","text":""},{"location":"annat/naetverk-och-internet/restful-client/#snabbstart","title":"Snabbstart","text":"<p>Nedanst\u00e5ende exempelkod skapar ett klientobjekt och ett requestobjekt, skickar requesten genom klienten f\u00f6r att f\u00e5 ett response, och deserialiserar response-objektets text till en instans av Pokemon-klassen.</p> <pre><code>using System.Text.Json;\n\nHttpClient client = new HttpClient();\nclient.BaseAddress = new Uri(\"https://pokeapi.co/api/v2/\");\nHttpResponseMessage result = client.GetAsync(\"pokemon/ditto\").Result;\nPokemon p = JsonSerializer.Deserialize&lt;Pokemon&gt;(result.Content.ReadAsStringAsync().Result);\n\n// Alternativ till de tv\u00e5 sista raderna:\n\nPokemon p = result.Content.ReadAsAsync&lt;Pokemon&gt;().Result;\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-client/#httpclient","title":"HttpClient","text":"<p>En klass som sk\u00f6ter kommunikationen med API-servern.</p> <pre><code>HttpClient client = new HttpClient();\nclient.BaseAddress = new Uri(\"https://pokeapi.co/api/v2/\");\n</code></pre> <p>Skapar ett klientobjekt som kommer att skicka requests till PokeAPI.</p> <p>BaseAddress beh\u00f6ver egentligen inte \u00e4ndras, men det \u00e4r praktiskt ifall man ska g\u00f6ra m\u00e5nga anrop till url:er som b\u00f6rjar p\u00e5 samma s\u00e4tt.</p>"},{"location":"annat/naetverk-och-internet/restful-client/#getasync-postasync-putasync-delasync","title":"GetAsync, PostAsync, PutAsync, DelAsync","text":"<p>Dessa metoder anv\u00e4nds f\u00f6r att skicka en request till en RESTful API-server och leverera resultatet.</p> <p>V\u00e4lj r\u00e4tt metod:</p> MetodHTTP-metodAktivitetPostAsyncPOSTSkapa en ny resursGetAsyncGETH\u00e4mta data om en resursPutAsyncPUT\u00c4ndra en resursDelAsyncDELETETa bort en resurs <p>Metoderna tar alla emot en url-str\u00e4ng och returnerar en Task. Denna Task ger sedan ifr\u00e5n sig, som Result, ett HttpResponseMessage.</p> <pre><code>HttpResponseMessage response = client.GetAsync(\"pokemon/snorlax\").Result;\n</code></pre> <p>Post och Put vill ocks\u00e5 ha en body \u2013 allts\u00e5 det som ska skickas in.</p> <pre><code>using System.Net.Http.Json;\n\n// ---\n\n// Serialisera snorlax till JSON och skicka som body\nJsonContent jsonBody = JsonContent.Create&lt;Pokemon&gt;(snorlax);\nHttpResponseMessage response = client.PostAsync(\"pokemon/snorlax\", jsonBody).Result;\n</code></pre> <p>M\u00e5nga metoder h\u00e4r \u00e4r asynkrona metod. Med andra ord g\u00e5r det att anv\u00e4nda await ist\u00e4llet f\u00f6r .Result om man \u00e4r i en asynkron metod.</p> <pre><code>async string GetPokemon(string pokemonName)\n{\n  Task&lt;HttpResponseMessage&gt; task = client.GetAsync($\"pokemon/{pokemonName}\");\n\n  // g\u00f6r n\u00e5got annat medan klienten h\u00e4mtar resultatet\n\n  await task;\n  return task.Result;\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-client/#httpresponsemessage","title":"HttpResponseMessage","text":"<p>Ett HttpResponseMessage-objekt inneh\u00e5ller det svar servern skickat tillbaka.</p>"},{"location":"annat/naetverk-och-internet/restful-client/#statuscode","title":"StatusCode","text":"<p>I response-objektet ing\u00e5r en StatusCode. Dess datatyp \u00e4r en Enum som heter HttpStatusCode och finns i biblioteket System.Net. Dess m\u00f6jliga v\u00e4rden \u00e4r alla existerande, definierade statuskoder fr\u00e5n HTTP-standarden. Till exempel Ok och NotFound.</p> <pre><code>  if (response.StatusCode == System.Net.HttpStatusCode.NotFound)\n  {\n    Console.WriteLine(\"Not found!\");\n  }\n</code></pre> <p>F\u00f6r att slippa skriva System.Net hela tiden kan du anv\u00e4nda ett using-statement h\u00f6gst upp i filen:</p> <pre><code>using System.Net;\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-client/#content","title":"Content","text":"<p>Content \u00e4r det \"inneh\u00e5ll\" servern svarat med.</p> <pre><code>// H\u00e4mtar content som string-data\nstring jsonText = response.Content.ReadAsStringAsync().Result;\nConsole.WriteLine(jsonText);\n</code></pre> <p>Ofta \u00e4r Content JSON eller XML-format, och d\u00e5 kan informationen deserialiseras till ett objekt antingen via JSON-deserialisering eller XML-deserialisering.</p> <p>Om det \u00e4r JSON s\u00e5 finns ett enklare s\u00e4tt \u2013 inkludera <code>System.Net.Http.Json</code> och anv\u00e4nd <code>ReadFromJsonAsync</code> ist\u00e4llet f\u00f6r <code>ReadAsStringAsync</code>.</p> <pre><code>using System.Net.Http.Json;\n\nHttpClient client = new();\nclient.BaseAddress = new(\"https://pokeapi.co/api/v2/\");\nHttpResponseMessage response = client.GetAsync(\"pokemon/snorlax\").Result;\nPokemon p = response.Content.ReadFromJsonAsync&lt;Pokemon&gt;().Result;\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-client/#kommunicera-med-en-lokal-server","title":"Kommunicera med en lokal server","text":"<p>Om du vill anropa en lokal server (localhost) men f\u00e5r ett felmeddelande om ett SSL-fel, s\u00e5 kan du k\u00f6r denna kod i terminalen f\u00f6r att det ska fungera:</p> <pre><code>dotnet dev-certs https --trust\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-client/#oppna-databas-apier","title":"\u00d6ppna databas-API:er","text":"<ul> <li>Pokemon API</li> <li>Digimon API</li> <li>Star Wars API</li> <li>Star Trek API</li> <li>Steam-API</li> <li>Skaffa en API-nyckel</li> <li>Dokumentation</li> <li>Marvel API (kr\u00e4ver en del egna efterforskningar och kr\u00e5ngel \u2013 h\u00f6g sv\u00e5righetsgrad!)</li> </ul>"},{"location":"annat/naetverk-och-internet/thunder/","title":"Thunder","text":"<p>VSCode-pluginet Thunder Client l\u00e5ter oss g\u00f6ra REST-anrop till servrar utan att programmera en klient.</p> <p></p> <p>Den \u00e4r ganska enkel att anv\u00e4nda.</p> <ul> <li>G\u00e5 till Thunder client i VSCode.</li> <li>V\u00e4lj din metod, t.ex. GET eller POST</li> <li>Skriv in din URL</li> <li>Klicka SEND</li> <li>Resultatet ser du under Response.</li> </ul>"},{"location":"annat/naetverk-och-internet/thunder/#skicka-json-data","title":"Skicka JSON-data","text":"<p>Om man ska skicka in data till ett API den h\u00e4r v\u00e4gen, beh\u00f6ver den skrivas in i requestens Body-del. </p> <p>Antagligen beh\u00f6ver datan ocks\u00e5 formateras som JSON. Om man till exempel vill POST:a in en ny Pokemon in i exempel-API-servern vars modeller beskrivs under Models/dataklasser s\u00e5 skriver man s\u00e5h\u00e4r i Body:</p> <pre><code>{\n    \"name\": \"Nyarlathotep\"\n}\n</code></pre> <p>Ofta kan man unders\u00f6ka den output man f\u00e5r fr\u00e5n GET f\u00f6r att se hur JSON-datan beh\u00f6ver vara formaterad.</p>"},{"location":"annat/naetverk-och-internet/url-er-och-rest/","title":"URL:er och REST","text":"<p>En URL p\u00e5 internet har kan till exempel se ut s\u00e5h\u00e4r:</p> <pre><code>http://test.stapi.co/api/v1/rest/animal?uid=ANMA0000032338\n</code></pre> <p>Den best\u00e5r av f\u00f6ljande delar:</p> <ul> <li>Protokollet: <code>http</code></li> <li>Dom\u00e4nen: <code>test.stapi.co</code></li> <li>Dom\u00e4nnamn: <code>stapi</code></li> <li>Underdom\u00e4n: <code>test</code></li> <li>Toppdom\u00e4n: <code>co</code></li> <li>Mappar: <code>api, v1, rest</code></li> <li>Resurs: <code>animal</code></li> <li>Parametrar: <code>uid=ANMA0000032338</code></li> </ul>"},{"location":"annat/naetverk-och-internet/url-er-och-rest/#rest-endpoint","title":"REST-endpoint","text":"<p>En \"REST-endpoint\" \u00e4r den delen av REST-URL:en som \u00e4r gemensam f\u00f6r alla anrop till API:et. F\u00f6r Star Trek-API:t \u00e4r endpointen denna:</p> <pre><code>http://test.stapi.co/api/v1/rest/\n</code></pre> <p>Den best\u00e5r allts\u00e5 av protokoll, dom\u00e4nnamn och ofta en eller flera mappar.</p>"},{"location":"annat/naetverk-och-internet/url-er-och-rest/#rest-resurs","title":"REST-resurs","text":"<p>En REST-resurs \u00e4r den del av databasen eller systemet som API:et ger tillg\u00e5ng till som man vill h\u00e4mta information fr\u00e5n. Ett exempel fr\u00e5n Star Trek API:t \u00e4r t.ex. \"animal\". Om man d\u00e5 l\u00e4gger ihop endpoint plus resurs s\u00e5 f\u00e5r man d\u00e5:</p> <pre><code>http://test.stapi.co/api/v1/rest/animal\n</code></pre> <p>I vissa API:er anv\u00e4nds bara endpoints och resurser. I PokeApi till exempel anger man namnet p\u00e5 den pokemon man vill ha information om som en resurs:</p> <pre><code>https://pokeapi.co/api/v2/pokemon/ditto\n</code></pre>"},{"location":"annat/naetverk-och-internet/url-er-och-rest/#parametrar-och-rest","title":"Parametrar och REST","text":"<p>Parametrar kan ge ytterligare information om t.ex. Det \u00e4r generellt h\u00e4r man anger sin API-nyckel f\u00f6r databaser som kr\u00e4ver en s\u00e5dan. Det finns API:er som anv\u00e4nder parametrar f\u00f6r att specificera vilken resurs man vill h\u00e4mta eller modifiera, men det \u00e4r strikt taget inte riktigt REST d\u00e5.</p> <p>Parametrar skrivs genom att man f\u00f6rst har ett fr\u00e5getecken som separerar parametrarna fr\u00e5n resten, och sedan par av parameter+v\u00e4rde. Paren separeras fr\u00e5n varandra med &amp; och parametern separeras fr\u00e5n v\u00e4rdet med ett likamed-tecken.</p> <pre><code>http://stapi.co/api/v1/rest/animal?uid=ANMA0000032338\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/","title":"RESTful server (Web API) [\u2026]","text":"<p>Controllers | Models/dataklasser | Tester med RESTer | Thunder</p> <p>Nedan \u00e4r instruktioner f\u00f6r att skapa en enkel API-server som svarar p\u00e5 GET-anrop.</p>"},{"location":"annat/naetverk-och-internet/restful-server/#skapa-projektet","title":"Skapa projektet","text":"<p>Skapa projektets solution som vanligt, men v\u00e4lj .NET Core Web API som projekttyp ist\u00e4llet f\u00f6r Console application.</p>"},{"location":"annat/naetverk-och-internet/restful-server/#rensa-bort-weather-forecast-delarna","title":"Rensa bort Weather Forecast-delarna","text":"<ul> <li>Ta bort WeatherForecast.cs</li> <li>Ta bort WeatherForecastController, som ligger i Controllers-mappen.</li> </ul>"},{"location":"annat/naetverk-och-internet/restful-server/#controller","title":"Controller","text":"<p>Skapa en ny klass i Controllers-mappen. D\u00f6p den till SomethingController. Du kan byta ut \"Something\" mot n\u00e5got annat om du vill.</p> <pre><code>using Microsoft.AspNetCore.Mvc;\n\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class SomethingController : ControllerBase\n{\n  [HttpGet]\n  public ActionResult Get()\n  {\n    return Ok(\"Hej\");\n  }\n}\n</code></pre> <p>Route och ApiController \u00e4r decorators. De talar om att den h\u00e4r klassen \u00e4r en API-controller och att den ska kopplas till url:en api/Something. [controller] i Routen byts allts\u00e5 ut automatiskt mot det som st\u00e5r innan Controller i klassens namn.</p> <p>HttpGet \u00e4r ocks\u00e5 en decorator, som talar om att metoden Get ska anropas n\u00e4r n\u00e5gon f\u00f6rs\u00f6ker h\u00e4mta data fr\u00e5n controllern (via url:en).</p> <p>ActionResult \u00e4r en klass som tillhandah\u00e5lls av .Net och inneh\u00e5ller allt s\u00e5dant som ett server-svar brukar behova inneh\u00e5lla.</p> <p>Ok \u00e4r en metod som returnerar ett f\u00e4rdigt ActionResult med HTTP-koden \"ok\". Resultatets meddelande blir det som anges som det f\u00f6rsta parameterv\u00e4rdet, i det h\u00e4r fallet allts\u00e5 \"hej\".</p>"},{"location":"annat/naetverk-och-internet/restful-server/#kora-och-testa-servern","title":"K\u00f6ra och testa servern","text":""},{"location":"annat/naetverk-och-internet/restful-server/#gor-sa-servern-kan-nas-fran-andra-datorer-behover-goras-1-gang","title":"G\u00f6r s\u00e5 servern kan n\u00e5s fr\u00e5n andra datorer (beh\u00f6ver g\u00f6ras 1 g\u00e5ng)","text":"<ul> <li>I Properties-mappen, \u00f6ppna LaunchSettings.json</li> <li>Let r\u00e4tt p\u00e5 \"applicationUrl\" en bit ner. Inte den som ligger i [iissettings], utan den som ligger kring rad 25.</li> <li>\u00c4ndra localhost till *</li> <li>\u00c4ndra ocks\u00e5 \"launchBrowser\" till false.</li> </ul>"},{"location":"annat/naetverk-och-internet/restful-server/#starta-servern","title":"Starta servern","text":"<ul> <li>Tryck p\u00e5 F5 som vanligt.</li> </ul>"},{"location":"annat/naetverk-och-internet/restful-server/#titta-pa-apiet-i-en-webblasare","title":"Titta p\u00e5 API:et i en webbl\u00e4sare.","text":"<ul> <li>Starta t.ex. Chrome medan servern k\u00f6rs.</li> <li>G\u00e5 till <code>https://localhost:5001/api/Something</code></li> </ul>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/","title":"Controllers","text":"<p>Controllers \u00e4r klasser som kopplar ihop klientens HTTP-requests med serverns data, via lite egen logik.</p> <p>Nedan \u2013 ett exempel p\u00e5 en controller som kopplar ihop GET-requests till url:en som slutar p\u00e5 /api/Something med metoden Get().</p> <pre><code>using Microsoft.AspNetCore.Mvc;\n\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class SomethingController : ControllerBase\n{\n  [HttpGet]\n  public ActionResult Get()\n  {\n    return Ok(\"Hej\");\n  }\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#attribut","title":"Attribut","text":"<p>Mer om attribut h\u00e4r.</p>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#apicontroller","title":"[ApiController]","text":"<p>Dekorerar en klass. Meddelar API-serversystemet att denna klass \u00e4r en API Controller och ska kunna ta emot requests.</p> PokemonController.cs <pre><code>[ApiController]\npublic class PokemonController : ControllerBase\n{\n\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#routething","title":"[Route(\"thing\")]","text":"<p>Dekorerar en klass eller en metod. Meddelar API-serversystemet att klassen eller metoden ska ta emot requests till en specifik \"route\". Exempel:</p> <ul> <li>https://localhost:5001/api/pokemon \u2192 routen \u00e4r \"api/pokemon\"</li> <li>https://www.test.com/hello/world \u2192 routen \u00e4r \"hello/world\"</li> <li>https://192.168.1.100/number \u2192 routen \u00e4r \"number\"</li> </ul> PokemonController.cs <pre><code>[ApiController]\n[route(\"hello/world\")]\npublic class PokemonController : ControllerBase\n{\n\n}\n</code></pre> <p>N\u00e4r man dekorerar metoder med en Route, s\u00e5 l\u00e4ggs denna till klassens route med snedstreck mellan. I exemplet nedan blir routen som leder till metoden allts\u00e5 hello/world.</p> PokemonController.cs <pre><code>[ApiController]\n[route(\"hello\")]\npublic class PokemonController : ControllerBase\n{\n  [HttpGet]\n  [Route(\"world\")]\n  public ActionResult Getter()\n  {\n    // Routen till denna metod blir hello/world.\n  }\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#routecontroller","title":"[Route(\"[controller]\")]","text":"<p>N\u00e4r man dekorerar en klass, kan man skriva [controller] inom hakparenteser inuti sin route. Det betyder att [controller] i praktiken byts ut mot det som st\u00e5r innan Controller i klassens namn. \u00d6vrig text st\u00e5r kvar of\u00f6r\u00e4ndrad.</p> AngelController.cs <pre><code>[ApiController]\n[route(\"creatures/[controller]\")]\npublic class AngelController : ControllerBase\n{\n  // Routen f\u00f6r denna klass blir creatures/angel.\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#httpget","title":"[HttpGet]","text":"<p>Registrerar en metod som mottagare av GET-requests.</p> <pre><code>[HttpGet]\npublic ActionResult Get()\n{\n  return Ok(\"Response\");\n}\n</code></pre> <p>Man kan ocks\u00e5 ange olika unika routes f\u00f6r olika Get-metoder. Det g\u00f6r man genom att skriva in routen inom parenteser direkt i [HttpGet].</p> <pre><code>[ApiController]\n[route(\"creatures/[controller]\")]\npublic class AngelController : ControllerBase\n{\n  [HttpGet(\"all\")]\n  public ActionResult Get()\n  {\n    // Ifall anv\u00e4ndaren skickar en request till routen \n    // creatures/angel/all s\u00e5 kommer den h\u00e4r metoden k\u00f6ras. \n\n    return Ok(\"Response for your request\");\n  }\n\n  [HttpGet(\"n/{num}\")]\n  public ActionResult Get(int num)\n  {\n    // Ifall anv\u00e4ndaren skickar en request till routen \n    // creatures/angel/n/7 s\u00e5 kommer parametern \n    // \"num\" i den h\u00e4r metoden att f\u00e5 v\u00e4rdet \"7\".\n    return Ok(\"Response for your request for #\" + num);\n  }\n\n  [HttpGet(\"name/{name}\")]\n  public ActionResult Get(string name)\n  {\n    // Ifall anv\u00e4ndaren skickar en request till routen \n    // creatures/angel/name/gabriel s\u00e5 kommer parametern \n    // \"name\" i den h\u00e4r metoden att f\u00e5 v\u00e4rdet \"gabriel\".\n\n    return Ok(\"Response for your request for \" + name);\n  }\n</code></pre> <p>En [HttpGet]-metod brukar normalt returnera via Ok(), NotFound(), NoContent() eller BadRequest().</p>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#httppost","title":"[HttpPost]","text":"<p>Registrerar en metod som mottagare av POST-requests. API-servern g\u00f6r ocks\u00e5 ett f\u00f6rs\u00f6k att deserialisera inkommande JSON-data (angiven i requestens body) till r\u00e4tt sorts instans.</p> <pre><code>[HttpPost]\npublic ActionResult AddPokemon(Pokemon newPokemon)\n{\n  // Parametern newPokemon inneh\u00e5ller h\u00e4r f\u00f6rhoppningsvis \u2013 \n  // om det gick att deserialisera bodyn \u2013 \n  // en ny Pokemon-instans.\n}\n</code></pre> <p>\u00c4ven HttpPosts kan ges route-information precis som HttpGet.</p> <pre><code>[HttpPost(\"secret\")]\npublic ActionResult AddPokemon(Pokemon newPokemon)\n{\n  // Den h\u00e4r metoden k\u00f6rs om anv\u00e4ndaren l\u00e4gger till /secret i slutet av\n  // sin URL.\n}\n</code></pre> <p>En [HttpPost]-metod brukar normalt returnera via Ok() eller BadRequest().</p> <p>Warning</p> <p>OBSERVERA: F\u00f6r att servern ska kunna deserialisera inskickad JSON korrekt, m\u00e5ste Content-Type i requesten vara \"application/json\".</p>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#httpput","title":"[HttpPut]","text":"<p>Registrerar en metod som mottagare av PUT-requests. API-servern g\u00f6r ocks\u00e5 ett f\u00f6rs\u00f6k att deserialisera inkommande JSON-data (angiven i requestens body) till r\u00e4tt sorts instans.</p> <p>Skillnaden mellan POST och PUT \u00e4r att n\u00e4r n\u00e5gon skickar en POST s\u00e5 f\u00f6rv\u00e4ntar de sig att det alltid ska skapas en ny sak i databasen, men vid PUT f\u00f6rv\u00e4ntar man sig att det bara skapas en ny sak ifall det inte finns en gammal, liknande, som kan uppdateras. Vad som best\u00e4mmer ifall det finns en gammal, liknande \u00e4r du som programmerare. I en Pokemon-databas skulle man t.ex. kunna kolla om det redan finns en pokemon med samma unika ID-nummer.</p> <pre><code>[HttpPut]\npublic ActionResult UpdatePokemon(Pokemon newPokemon)\n{\n  // Parametern newPokemon inneh\u00e5ller h\u00e4r f\u00f6rhoppningsvis \u2013 \n  // om det gick att deserialisera bodyn \u2013 \n  // en ny Pokemon-instans.\n}\n</code></pre> <p>\u00c4ven HttpPuts kan ges route-information precis som HttpGet.</p> <pre><code>[HttpPut(\"n/{id}\")]\npublic ActionResult UpdatePokemon(int id, Pokemon newPokemon)\n{\n  // Den h\u00e4r metoden k\u00f6rs om anv\u00e4ndaren l\u00e4gger till /n/ och en siffra \n  // i slutet av sin URL, t.ex. /n/7.\n  // Variabeln id f\u00e5r d\u00e5 v\u00e4rde 7.\n  // D\u00e5 kan man t.ex. byta ut den pokemonen som har id 7 mot den som\n  // deserialiserats fr\u00e5n http-bodyn.\n}\n</code></pre> <p>En [HttpPut]-metod brukar normalt returnera via Ok(), NotFound(), NoContent() eller BadRequest().</p> <p>Warning</p> <p>OBSERVERA: F\u00f6r att servern ska kunna deserialisera inskickad JSON korrekt, m\u00e5ste Content-Type i requesten vara \"application/json\".</p>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#httpdelete","title":"[HttpDelete]","text":"<p>Registrerar en metod som mottagare av DELETE-requests.</p> <pre><code>[HttpDelete(\"n/{id}\"]\npublic ActionResult DeletePokemon()\n{\n  // Den h\u00e4r metoden k\u00f6rs om anv\u00e4ndaren l\u00e4gger till /n/ och en siffra \n  // i slutet av sin URL, t.ex. /n/7.\n  // Variabeln id f\u00e5r d\u00e5 v\u00e4rde 7.\n  // D\u00e5 kan man t.ex. ta bort den pokemon som har id 7 fr\u00e5n databasen.\n}\n</code></pre> <p>En [HttpDelete]-metod brukar normalt returnera via Ok(), NotFound() eller BadRequest().</p>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#actionresponse-metoder","title":"ActionResponse-metoder","text":"<p>ActionResponse \u00e4r en klass som beskriver vanliga HTTP-responses. Genom att anv\u00e4nda de h\u00e4r f\u00e4rdiga metoderna, som returnerar f\u00e4rdiga ActionResponse-instanser, kan man g\u00f6ra det enkelt f\u00f6r sig.</p> <p>Det finns s\u00e5dana metoder f\u00f6r m\u00e5nga HTTP-statuskoder \u2013 de nedan \u00e4r bara exempel.</p>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#ok","title":"Ok()","text":"<p>Ger ett ActionResult med HTTP-koden \"ok\" (200). Parameterv\u00e4rdet skickas som body.</p> <pre><code>[HttpGet]\npublic ActionResult Get()\n{\n  return Ok(\"Response\");\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#created","title":"Created()","text":"<p>Ger ett ActionResult med HTTP-koden \"created\" (201). Parameterv\u00e4rdet skickas som body.</p> <p>Created betyder att servern skapat en ny sak, baserat p\u00e5 den request som skickades.</p> <pre><code>[HttpPost]\npublic ActionResult AddPokemon()\n{\n  return Created(\"Response\");\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#notfound","title":"NotFound()","text":"<p>Ger ett ActionResult med HTTP-koden \"not found\" (404). Parameterv\u00e4rdet skickas som body.</p> <p>Not found betyder att den sak som efterfr\u00e5gades inte finns.</p> <pre><code>[HttpGet]\npublic ActionResult Get()\n{\n  return NotFound(\"Response\");\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#nocontent","title":"NoContent()","text":"<p>Ger ett ActionResult med HTTP-koden \"no content\" (202). Parameterv\u00e4rdet skickas som body.</p> <p>No content betyder att servern tog emot requesten men att det inte finns n\u00e5gon content att visa.</p> <pre><code>[HttpGet]\npublic ActionResult Get()\n{\n  return NoContent(\"Response\");\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/controllers/#badrequest","title":"BadRequest()","text":"<p>Ger ett ActionResult med HTTP-koden \"bad request\" (400). Parameterv\u00e4rdet skickas som body.</p> <p>Bad request betyder att det var n\u00e5got fel p\u00e5 den request klienten skickade till servern, och att servern inte kunde g\u00f6ra n\u00e5got vettigt med den.</p> <pre><code>[HttpGet]\npublic ActionResult Get()\n{\n  return BadRequest(\"Response\");\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/models/","title":"Models/dataklasser","text":"<p>Models, eller modeller, \u00e4r helt enkelt klasser som anv\u00e4nds av t.ex. en REST-server f\u00f6r att beskriva information. Ofta beskriver modellerna objekt som lagras i en databas av n\u00e5got slag, men det g\u00e5s inte in p\u00e5 h\u00e4r.</p>"},{"location":"annat/naetverk-och-internet/restful-server/models/#modellklasserdataklasser","title":"Modellklasser/dataklasser","text":"<p>Alla egenskaper som ska returneras av API:t m\u00e5ste vara publika properties.</p> Pokemon.cs <pre><code>public class Pokemon\n{\n  public string Name {get; set;}\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/models/#returnera-instanser-som-svar-pa-requests","title":"Returnera instanser som svar p\u00e5 requests","text":""},{"location":"annat/naetverk-och-internet/restful-server/models/#json-serialiserade-instanser","title":"JSON-serialiserade instanser","text":"<p>F\u00f6r att en [HttpGet]-metod ska returnera en JSON-serialiserad version av en instans av en modellklass, beh\u00f6vs tv\u00e5 saker: </p> <ul> <li>N\u00e4r man deklarerar metoden s\u00e4ger man att den ska returnera ActionResult&lt;Something&gt;, d\u00e4r Something \u00e4r namnet p\u00e5 klassen vars instanser ska serialiseras.</li> <li>N\u00e4r man k\u00f6r Ok, s\u00e5 l\u00e4gger man in en instans av den klassen inom parenteserna.</li> </ul> PokemonController.cs <pre><code>namespace WebApplication1.Controllers\n{\n  [Route(\"api/[controller]\")]\n  [ApiController]\n  public class PokemonController : ControllerBase\n  {\n    [HttpGet]\n    public ActionResult&lt;Pokemon&gt; Get()\n    {\n      Pokemon p = new Pokemon();\n      p.Name = \"Pikachu\";\n\n      return Ok(p);\n    }\n  }\n}\n</code></pre> <p>Resultatet av ovanst\u00e5ende blir att f\u00f6ljande JSON-kod skickas med i HTTP-response-bodyn:</p> <pre><code>{\n    \"name\": \"Pikachu\"\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/models/#json-serialiserade-listor-med-instanser","title":"JSON-serialiserade listor med instanser","text":"<p>Nedanst\u00e5ende kod skapar en lista med tv\u00e5 pokemons, och returnerar den listan till klienter som anropar servern med ett GET-anrop.</p> <pre><code>namespace WebApplication1.Controllers\n{\n  [Route(\"api/[controller]\")]\n  [ApiController]\n  public class PokemonController : ControllerBase\n  {\n    private static List&lt;Pokemon&gt; pList = new List&lt;Pokemon&gt;()\n    {\n      new Pokemon() {Name = \"Pikachu\"},\n      new Pokemon() {Name = \"Bulbasaur\"}\n    };\n\n    [HttpGet]\n    public ActionResult&lt;List&lt;Pokemon&gt;&gt; Get()\n    {\n      return Ok(pList);\n    }\n  }\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/models/#mer-specifika-fragor","title":"Mer specifika fr\u00e5gor","text":"<p>Om en anv\u00e4ndare ska kunna stoppa in mer specifik information i sin request, och svaret anpassas efter denna information, s\u00e5 beh\u00f6vs n\u00e5got s\u00e4tt att l\u00e4sa av den informationen i Controllern.</p> <p>N\u00e4r man skapar sin Get-metod s\u00e5 kan man l\u00e4gga till en <code>[Route]</code>, och specificera n\u00e5got som ska bli en variabel mellan m\u00e5svingar. S\u00e5 i nedanst\u00e5ende exempel st\u00e5r det <code>[Route(\"{num}\")]</code>, vilket betyder att det \u00e4r den metoden som ska anv\u00e4ndas om n\u00e5got anges i slutet av request-url:en \u2013 t.ex. att url:en \u00e4r <code>/api/pokemon/23</code>.</p> <p>Det som st\u00e5r inom {} kommer att tolkas som data, som stoppas in som parameter i metoden \u2013 observera att metoden ocks\u00e5 har en \"num\". Det nummer som anges i request-url:en kommer allts\u00e5 at omvandlas till en int och stoppas in som motsvarande parameter.</p> <p>Hade det st\u00e5tt <code>[Route(\"/find/{num}\")]</code> ist\u00e4llet, s\u00e5 hade routen matchat t.ex. <code>/api/pokemon/find/23</code>. 23 hade fortfarande omvandlats till int-parametern num.</p> <pre><code>namespace WebApplication1.Controllers\n{\n  [Route(\"api/[controller]\")]\n  [ApiController]\n  public class PokemonController : ControllerBase\n  {\n    private static List&lt;Pokemon&gt; pList = new List&lt;Pokemon&gt;()\n    {\n      new Pokemon() {Name = \"Pikachu\"},\n      new Pokemon() {Name = \"Bulbasaur\"}\n    };\n\n    [HttpGet]\n    public ActionResult&lt;List&lt;Pokemon&gt;&gt; Get()\n    {\n      return Ok(pList);\n    }\n\n    [HttpGet]\n    [Route(\"{num}\")]\n    public ActionResult&lt;Pokemon&gt; Get(int num)\n    {\n      if (num &gt; 0 &amp;&amp; num &lt; pList.Count)\n      {\n        return Ok(pList[num]);\n      }\n      else\n      {\n        return NotFound();\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server/tester-med-rester/","title":"Tester med RESTer","text":"<p>Chrome-pluginet RESTer l\u00e5ter oss g\u00f6ra REST-anrop till servrar utan att programmera en klient.</p> <p></p> <p>Det \u00e4r ganska enkelt att anv\u00e4nda</p> <ul> <li>G\u00e5 in i RESTer</li> <li>V\u00e4lj din metod, t.ex. GET eller POST</li> <li>Skriv in din URL</li> <li>Klicka SEND</li> <li>Resultatet ser du under Response.</li> </ul>"},{"location":"annat/naetverk-och-internet/restful-server/tester-med-rester/#skicka-json-data","title":"Skicka JSON-data","text":"<p>Om man ska skicka in data till ett API den h\u00e4r v\u00e4gen, beh\u00f6ver den skrivas in i RESTers Body-del. </p> <p>Antagligen beh\u00f6ver datan ocks\u00e5 formateras som JSON. Om man till exempel vill POST:a in en ny Pokemon in i exempel-API-servern vars modeller beskrivs under Models/dataklasser s\u00e5 skriver man s\u00e5h\u00e4r i Body:</p> <pre><code>{\n    \"name\": \"Nyarlathotep\"\n}\n</code></pre> <p>Ofta kan man unders\u00f6ka den output man f\u00e5r fr\u00e5n GET f\u00f6r att se hur JSON-datan beh\u00f6ver vara formaterad.</p> <p>Warning</p> <p>OBSERVERA: Om du skickar in JSON-data, kom ih\u00e5g att l\u00e4gga till en header som s\u00e4ger att Content-Type \u00e4r \"application/json\".</p>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/","title":"RESTful server (Minimal API)","text":"<p>Nedan \u00e4r instruktioner f\u00f6r att skapa en enkel API-server som svarar p\u00e5 GET-anrop.</p> <p>H\u00e4r finns Microsofts officiella snabbreferens.</p>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/#skapa-projektet","title":"Skapa projektet","text":"<p>Skapa projektets solution som vanligt, men v\u00e4lj ASP.NET Core Empty som projekttyp ist\u00e4llet f\u00f6r Console application.</p>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/#ett-minimalt-projekt","title":"Ett minimalt projekt","text":"<p>Nedanst\u00e5ende \u00e4r ett absolut minimalt, enkelt projekt som helt enkelt skickar \"Hello World!\" till den som skickar en get-request till programmet:</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Skapa en webbapplikation-instans\nWebApplication app = WebApplication.Create(args);\n\n// Anv\u00e4nd HTTPS n\u00e4r det g\u00e5r\napp.UseHttpsRedirection();\n\n// N\u00e4r en GET-request kommer f\u00f6r \"/\" s\u00e5 svarar servern med det som \n//  returneras fr\u00e5n GimmeHello\napp.MapGet(\"/\", GimmeHello);\n\n// K\u00f6r webbapplikationen\napp.Run();\n\n// Metoden som ska k\u00f6ras n\u00e4r n\u00e5gon g\u00f6r en GET-request\nstatic string GimmeHello()\n{\n  return \"Hello World!\";\n}\n</code></pre></p>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/#webapplication","title":"WebApplication","text":"<p>WebApplication-objektet \u00e4r det som sk\u00f6ter kommunikationen \u00f6ver webben och som ser till att anropa r\u00e4tt metod n\u00e4r r\u00e4tt HTTP-request skickas till programmet.</p>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/#mapget-mappost-mapput-och-mapdelete","title":"MapGet(), MapPost(), MapPut() och MapDelete()","text":"<p>Dessa metoder kopplar en HTTP-metod (GET, POST, PUT eller DELETE) och en REST-resurs till en specifik C#-metod. Detta kallas \"mapping\".</p> <pre><code>app.MapGet(\"/pokemon/\", GimmePokemon);\n</code></pre> <p>Om n\u00e5gon sedan g\u00f6r en request till serverns adress, och requesten har metoden GET och inkluderar /pokemon/ (t.ex. https://localhost:7174/pokemon, s\u00e5 kommer det response som skickas tillbaka vara det som returneras fr\u00e5n GimmePokemon-metoden.</p> <p>MapGet kopplar till GET-requests, MapPost till POST-requests, MapPut till PUT-requests och MapDelete till DELETE-requests.</p> <p>C#-metoden kan vara en statisk metod, en instansmetod eller ett Lambda-uttryck.</p> <pre><code>app.MapGet(\"/hello/\", () =&gt; \"Say hello!\");\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/#parametrar","title":"Parametrar","text":"<p>C#-metoden kan f\u00f6rses med parameterv\u00e4rden via URL:en.</p> <pre><code>app.MapGet(\"/double/{num}/\", Double);\n\nstatic string Double(int num)\n{\n  return (num * 2).ToString();\n}\n</code></pre> <p>N\u00e4r man i exemplet ovan bes\u00f6ker t.ex. https://localhost:7174/double/7 s\u00e5 blir det 14 som skickas tillbaka som HTTP-response.</p> <p>Detta anv\u00e4nds ofta f\u00f6r att v\u00e4lja vilken data som ska skickas \u2013 en parameter kan till exempel vara ett unikt ID eller namnet p\u00e5 ett objekt (en anv\u00e4ndare eller ett dokument). D\u00e5 skriver man en metod som letar igenom en lista eller en databas efter r\u00e4tt ID, och returnerar den datan. Ofta skickas d\u00e5 datan som ett objekt.</p>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/#returnera-objekt-som-json","title":"Returnera Objekt som JSON","text":"<p>Om metoden som mappas returnerar ett objekt, s\u00e5 kommer det objektet serialiseras till JSON innan det skickas tillbaka som ett HTTP-response.</p> <p>{% code title=\"Hero.cs\" %} <pre><code>public class Hero\n{\n  public string Name { get; set; }\n  public int Hitpoints { get; set; }\n}\n</code></pre></p> <pre><code>app.MapGet(\"/hero/superman/\", GetSuperman);\n\nstatic Hero GetSuperman()\n{\n  Hero h = new Hero();\n  h.Name = \"Superman\";\n  h.Hitpoints = 100;\n  return h;\n}\n</code></pre> <p>Resultatet om man skickar en GET-request till /hero/superman:</p> <pre><code>{\n  \"name\": \"Superman\",\n  \"hitpoints\": 100\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/#skicka-in-nya-objekt-via-postput-och-json","title":"Skicka in nya objekt via POST/PUT och JSON","text":"<p>F\u00f6r att kunna hantera att nya objekt skickas till serverprogrammet, mappa POST eller PUT till en metod som har en parameter av den datatyp JSON-koden ska deserialiseras till.</p> <pre><code>app.MapPost(\"/hero/new/\", AddNewHero);\n\nstatic void AddNewHero(Hero h)\n{\n  heroList.Add(h);\n  Console.WriteLine($\"Added hero {} to the list\"\n}\n</code></pre> <p>N\u00e4r en anv\u00e4ndare d\u00e5 skickar in JSON-kod som body i sin HTTP-request till servern, s\u00e5 deserialiseras koden automatiskt till en instans av klassen och resultatet hamnar i parametern n\u00e4r metoden anropas.</p>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/#results","title":"Results","text":"<p>F\u00f6r att skicka n\u00e5gon annan statuskod \u00e4n OK, g\u00f6r s\u00e5 att C#-metoderna returnerar Results.</p> <pre><code>static IResult GetBatman()\n{\n  Hero h = new Hero();\n  h.Name = \"Batman\";\n  h.Hitpoints = 30;\n  return Results.Ok(h);\n}\n</code></pre> <p>Det finns en hel del olika HTTP-statuskoder, till exempel:</p> <ul> <li>Results.Ok \u2013 allt gick bra.</li> <li>Results.NotFound \u2013 det du fr\u00e5gade efter fanns inte.</li> <li>Results.BadRequest \u2013 den request du skickade kunde inte tolkas, eller inneh\u00f6ll fel.</li> </ul>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/#komma-at-servern-fran-andra-datorer","title":"Komma \u00e5t servern fr\u00e5n andra datorer","text":"<p>Normalt sett kan servern inte kommas \u00e5t fr\u00e5n andra datorer \u00e4n den den k\u00f6rs p\u00e5; den kallas \"localhost\". F\u00f6r att ocks\u00e5 kunna komma \u00e5t den fr\u00e5n andra datorer p\u00e5 samma n\u00e4tverk, l\u00e4gg till en URL med wildcard (*):</p> <pre><code>app.Urls.Add(\"http://localhost:3000\");\napp.Urls.Add(\"http://*:3000\");\n</code></pre> <p>Ovanst\u00e5ende g\u00f6r att man kan komma \u00e5t servern b\u00e5de genom url:en localhost:3000 (p\u00e5 den lokala datorn) och genom att skriva datorns ip-nummer f\u00f6ljt av 3000 (p\u00e5 den lokala datorn eller p\u00e5 n\u00e5gonnannan dator p\u00e5 samma n\u00e4tverk).</p>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/#webapplicationbuilder","title":"WebApplicationBuilder","text":"<p>Ifall man vill g\u00f6ra n\u00e5got lite mer avancerat med sin WebApplication, s\u00e5 anv\u00e4nder man en WebApplicationBuilder f\u00f6r att konstruera den. Buildern fungerar d\u00e5 som en \"fabrik\" \u2013 man skapar den, g\u00f6r inst\u00e4llningar, och s\u00e4ger sedan \u00e5t den att skapa en WebApplication.</p> <pre><code>WebApplicationBuilder builder = WebApplication.CreateBuilder();\n\n// L\u00e4gg till funktionalitet f\u00f6r Swagger/OpenAPI\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\n// Bygg sj\u00e4lva applikationen\nWebApplication app = builder.Build();\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/#anvanda-https","title":"Anv\u00e4nda HTTPS","text":"<p>Om du f\u00e5r problem med att komma \u00e5t din server, via webbl\u00e4sare eller via klienter skrivna i C#, s\u00e5 kan det h\u00e4r beh\u00f6vas.</p> <p>B\u00f6rja med att generera och l\u00e4gga till ett certifikat f\u00f6r lokal utveckling och debuggning. K\u00f6r i terminalen:</p> <pre><code>dotnet dev-certs https\ndotnet dev-certs https --trust\n</code></pre> <p>L\u00e4gg sedan till URL:er f\u00f6r https:</p> <pre><code>app.Urls.Add(\"https://localhost:3000\");\napp.Urls.Add(\"https://*:3000\");\n</code></pre> <p>Nu b\u00f6r HTTPS fungera \u2013 \u00e5tminstone p\u00e5 din egna dator.</p>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/swagger-och-openapi/","title":"Swagger och OpenAPI","text":"<p>OpenAPI \u2013 \u00e4ven kallat Swagger \u2013 \u00e4r ett s\u00e4tt att snabbt och enkelt dokumentera det API servern tillhandah\u00e5ller s\u00e5 att den som f\u00f6rs\u00f6ker anv\u00e4nda APIt vet vad som kan g\u00f6ras och hur. Swagger UI get ett grafiskt webbgr\u00e4nssnitt f\u00f6r att f\u00f6renkla testning av APIt.</p> <p>St\u00f6d f\u00f6r OpenAPI/Swagger sker i C# normalt genom biblioteket Swashbuckle, som ing\u00e5r som standard i alla Minimal API-projekt (kolla sj\u00e4lv i csproj-filen).</p>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/swagger-och-openapi/#lagga-till-swagger","title":"L\u00e4gga till Swagger","text":"<p>B\u00f6rja med att se till s\u00e5 att WebApplication-objektet har tillg\u00e5ng till r\u00e4tt Services \u2013 EndpointsApiExplorer och SwaggerGen.</p> <pre><code>WebApplicationBuilder builder = WebApplication.CreateBuilder();\n\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\n// Skapa en webbapplikation-instans\nWebApplication app = builder.Build();\n</code></pre> <p>D\u00e4refter aktiveras Swagger enkelt genom metoden UseSwagger.</p> <pre><code>app.UseSwagger();\n</code></pre> <p>Om man bara vill att Swagger ska vara aktiverat medan man utvecklar servern s\u00e5 kan man l\u00e4gga in UseSwagger i en if-sats:</p> <pre><code>if (app.Environment.IsDevelopment())\n{\n  app.UseSwagger();\n}\n</code></pre> <p>Om man nu bes\u00f6ker serverns url f\u00f6ljt av /swagger/v1/swagger.json s\u00e5 f\u00e5r man en json-representation av serverns endpoints. Den \u00e4r i f\u00f6rsta hand t\u00e4nkt att l\u00e4sas av andra maskiner (klienter), inte m\u00e4nniskor.</p> <pre><code>{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n    \"title\": \"My awesome server\",\n    \"version\": \"1.0\"\n  },\n  \"paths\": {\n    \"/\": {\n      \"get\": {\n        \"tags\": [\n          \"ApiTest\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": { }\n}\n</code></pre>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/swagger-och-openapi/#konfigurera-swagger","title":"Konfigurera Swagger","text":"<p>Man kan g\u00f6ra inst\u00e4llningar som \u00e4ndrar metadatan i Swagger-json-datan genom att \u00e4ndra i AddSwaggerGen-metodanropet:</p> <pre><code>builder.Services.AddSwaggerGen(c =&gt;\n  {\n    c.SwaggerDoc(\"v1\", new() { \n      Version = \"1.0\", \n      Title = \"My awesome server\" });\n  }\n);\n</code></pre> <p>Det man l\u00e4gger till \u00e4r allts\u00e5 ett lambda-uttryck som matchar en delegat som tar emot ett SwaggerGenOptions-objekt (c, i det h\u00e4r fallet) som vi sedan kan g\u00f6ra \u00e4ndringar i. Den \u00e4ndring vi g\u00f6r \u00e4r att vi k\u00f6r SwaggerDoc-metoden d\u00e4r vi l\u00e4gger till ett dokument som heter \"1.0\" i vilken vi \u00e4ndrar metadatan Version och Title.</p>"},{"location":"annat/naetverk-och-internet/restful-server-minimal-api/swagger-och-openapi/#swaggerui","title":"SwaggerUI","text":"<p>F\u00f6r att aktivera Swagger UI, anropa metoden UseSwaggerUI(). Det brukar g\u00f6ras p\u00e5 samma st\u00e4lle som UseSwagger().</p> <pre><code>app.UseSwagger();\napp.UseSwaggerUI();\n</code></pre> <p>Om man nu bes\u00f6ker serverns URL f\u00f6ljt av /swagger s\u00e5 m\u00f6ts man av ett snyggt UI som visar vilka endpoints etc som API:et har. H\u00e4r kan man dessutom testa API:et.</p>"},{"location":"annat/raylib/","title":"RayLib [\u2026]","text":"<p>RayLib \u00e4r ett grafikbibliotek som \u00e4r ganska l\u00e4tt att komma ig\u00e5ng med och som p\u00e5minner om traditionella bibliotek som t.ex. SDL.</p> <p>I vanliga fall \u00e4r RayLib, som de flesta bibliotek, gjort f\u00f6r C++. Men det g\u00e5r ganska l\u00e4tt att anv\u00e4nda till C# ocks\u00e5.</p> <p>Den officiella dokumentationen best\u00e5r dels av en lathund, dels av en ganska v\u00e4lfylld wiki. D\u00e4remot \u00e4r b\u00e5da 100% anpassade f\u00f6r C++ och inte C#, vilket g\u00f6r att man det \u00e4r en del skillnader.</p> <p>Inneh\u00e5ll:</p> <ul> <li>Raylib setup</li> <li>F\u00f6nster i Raylib</li> <li>Grundl\u00e4ggande grafik</li> <li>Geometriska former</li> <li>Bilder och texturer</li> <li>Input</li> <li>Text</li> <li>Rectangle</li> <li>Kollisioner</li> <li>Kamera</li> <li>Ljud</li> </ul>"},{"location":"annat/raylib/foenster-i-raylib/","title":"F\u00f6nster i Raylib","text":""},{"location":"annat/raylib/foenster-i-raylib/#skapa-fonster","title":"Skapa f\u00f6nster","text":"<p>Att skapa ett nytt f\u00f6nster f\u00f6r Raylib g\u00f6rs med en enkel kodrad:</p> <pre><code>Raylib.InitWindow(800, 600, \"Hello World\");\n</code></pre> <p>800 \u00e4r f\u00f6nstrets bredd, 600 dess h\u00f6jd, och \"Hello World\" \u00e4r vad som kommer att st\u00e5 i titeln.</p>"},{"location":"annat/raylib/foenster-i-raylib/#windowshouldclose","title":"WindowShouldClose()","text":"<p>Returnerar False s\u00e5 l\u00e4nge anv\u00e4ndaren inte skickat signalen att f\u00f6nstret borde st\u00e4ngas \u2013 till exempel genom att trycka p\u00e5 krysset.</p> <p>Ett vanligt s\u00e4tt att bygga spelets grund-loop \u00e4r att anv\u00e4nda denna ihop med en while-loop:</p> <pre><code>while (!Raylib.WindowShouldClose())\n{\n  // Spelets logik\n}\n</code></pre>"},{"location":"annat/raylib/foenster-i-raylib/#ett-enkelt-komplett-exempel","title":"Ett enkelt komplett exempel","text":"<p>I exemplet nedan initieras Raylib-f\u00f6nstret. Sedan k\u00f6rs en loop s\u00e5 l\u00e4nge f\u00f6nstret \u00e4r \u00f6ppet, och varje bildruta ritas f\u00f6rst en vit bakgrund och sedan en magentaf\u00e4rgad cirkel.</p> <pre><code>using Raylib_cs;\n\nRaylib.InitWindow(800, 600, \"The title of my window\");\nRaylib.SetTargetFPS(60);\n\nwhile (!Raylib.WindowShouldClose())\n{\n  Raylib.BeginDrawing();\n\n  Raylib.ClearBackground(Color.WHITE);\n\n  Raylib.DrawCircle(100,100,100,Color.MAGENTA);\n\n  Raylib.EndDrawing();\n}\n</code></pre>"},{"location":"annat/raylib/foenster-i-raylib/#snippet","title":"Snippet","text":"<p>H\u00e4r \u00e4r koden f\u00f6r en snippet som skapar grundkoden f\u00f6r Raylib:</p> <pre><code>\"Raylib-boilerplate\": {\n  \"prefix\": \"rayl\",\n  \"body\": [\n    \"using Raylib_cs;\\n\",\n    \"Raylib.InitWindow(${1:800}, ${2:600}, \\\"${3:Title}\\\");\",\n    \"Raylib.SetTargetFPS(60);\\n\",\n    \"while (!Raylib.WindowShouldClose())\",\n    \"{\",\n    \"  $0\\n\",\n    \"  Raylib.BeginDrawing();\",\n    \"  Raylib.ClearBackground(Color.WHITE);\",\n    \"  Raylib.EndDrawing();\",\n    \"}\"\n  ]\n},\n</code></pre>"},{"location":"annat/raylib/geometriska-former/","title":"Geometriska former","text":""},{"location":"annat/raylib/geometriska-former/#rektanglar","title":"Rektanglar","text":""},{"location":"annat/raylib/geometriska-former/#drawrectangle","title":"DrawRectangle()","text":"<pre><code>Raylib.DrawRectangle(10, 10, 30, 40, Color.ORANGE);\n</code></pre> <p>Parametrarna \u00e4r, i tur och ordning: X- och Y-position f\u00f6r rektangelns \u00f6vre v\u00e4nstra h\u00f6rn, rektangelns bredd och h\u00f6jd, och dess f\u00e4rg.</p>"},{"location":"annat/raylib/geometriska-former/#drawrectanglelines-drawcirclelines","title":"DrawRectangleLines(), DrawCircleLines()","text":"<p>Fungerar precis som DrawCircle respektive DrawRectangle, men anv\u00e4nder f\u00e4rgen f\u00f6r att rita ut respektive forms kanter ist\u00e4llet f\u00f6r att fylla dem.</p> <pre><code>Raylib.DrawCircleLines(150, 200, 40, Color.MAGENTA);\n</code></pre>"},{"location":"annat/raylib/geometriska-former/#drawrectanglerec","title":"DrawRectangleRec()","text":"<p>Fungerar precis som DrawRectangle, men tar emot ett Rectangle-objekt ist\u00e4llet f\u00f6r koordinater och bredd/h\u00f6jd.</p> <pre><code>Rectangle r1 = new Rectangle(10,5,30,15);\nRaylib.DrawRectangleRec(r1, Color.PINK);\n</code></pre>"},{"location":"annat/raylib/geometriska-former/#cirklar-och-elipser","title":"Cirklar och elipser","text":""},{"location":"annat/raylib/geometriska-former/#drawcircle","title":"DrawCircle()","text":"<pre><code>Raylib.DrawCircle(150, 200, 40, Color.MAGENTA);\n</code></pre> <p>Parametrarna \u00e4r, i tur och ordning: X- och Y-position f\u00f6r cirkelns mitt, cirkelns radie, och cirkelns f\u00e4rg.</p>"},{"location":"annat/raylib/geometriska-former/#drawcirclev","title":"DrawCircleV()","text":"<p>Ritar en cirkel men anv\u00e4nder en Vector2 som mittpunkt.</p> <pre><code>Vector2 midPoint = new Vector2(100, 100);\nRaylib.DrawCircleV(midPoint, 40, Color.PINK);\n</code></pre>"},{"location":"annat/raylib/geometriska-former/#drawcirclesector","title":"DrawCircleSector()","text":"<p>Ritar en del av en cirkel.</p> <pre><code>Vector2 midPoint = new Vector2(100, 100);\nRaylib.DrawCircleSector(midPoint, 50, 0, -45, 100, Color.PINK);\n</code></pre> <p>Parametrarna \u00e4r allts\u00e5 mittpunkten, radien, startgraden, slutgraden, antalet segment som ska ritas ut samt f\u00e4rgen. Graderna utg\u00e5r fr\u00e5n att noll \u00e4r rakt ned\u00e5t, och r\u00e4knar motsols(!). Med andra ord \u00e4r 0 ned\u00e5t, 90 \u00e4r rakt \u00e5t h\u00f6ger och \u221290 \u00e4r rakt \u00e5t v\u00e4nster.</p>"},{"location":"annat/raylib/geometriska-former/#drawellipse","title":"DrawEllipse()","text":"<p>Ritar ut en ellips. Parametrarna \u00e4r mittpunktens x- och y-v\u00e4rde, den horisontella radien och den vertikala radien.</p> <pre><code>Raylib.DrawEllipse(100, 250, 50, 200, Color.PINK);\n</code></pre>"},{"location":"annat/raylib/geometriska-former/#andra-former","title":"Andra former","text":""},{"location":"annat/raylib/geometriska-former/#drawtriangle","title":"DrawTriangle()","text":"<p>Ritar ut en triangel. Parametrarna \u00e4r triangelns tre h\u00f6rn som Vector2 samt den f\u00e4rg triangeln ska ha.</p> <pre><code>Vector2 top = new Vector2(150, 100);\nVector2 bottomLeft = new Vector2(100, 150);\nVector2 bottomRight = new Vector2(200, 150);\n\nRaylib.DrawTriangle(top, bottomLeft, bottomRight, Color.GRAY);\n</code></pre> <p>Info</p> <p>OBSERVERA: Ange vektorerna i motsols ordning.</p>"},{"location":"annat/raylib/geometriska-former/#drawpoly","title":"DrawPoly()","text":"<p>Ritar en polygon. Parametrarna \u00e4r mittpunkten, antalet sidor, radien, rotationen och f\u00e4rgen.</p> <pre><code>Raylib.DrawPoly(centerPoint, 7, 64, 0, Color.GREEN);\n</code></pre>"},{"location":"annat/raylib/geometriska-former/#linjer","title":"Linjer","text":""},{"location":"annat/raylib/geometriska-former/#drawline","title":"DrawLine()","text":"<p>Ritar en linje mellan tv\u00e5 punkter. Parametrarna \u00e4r startpunktens x- och y-v\u00e4rden och slutpunktens x- och y-v\u00e4rde, samt f\u00e4rgen.</p> <pre><code>Raylib.DrawLine(10, 10, 10, 20, Color.PINK);\n</code></pre>"},{"location":"annat/raylib/geometriska-former/#drawlinev","title":"DrawLineV()","text":"<p>Ritar en linje mellan tv\u00e5 punkter. Parametrarna \u00e4r en vektor2 f\u00f6r startpunkten, en vektor2 f\u00f6r slutpunkten, samt f\u00e4rgen.</p> <pre><code>  Vector2 start = new Vector2(10,10);\n  Vector2 end = new Vector2(10,20);\n\n  Raylib.DrawLineV(start, end, Color.RED);\n</code></pre>"},{"location":"annat/raylib/geometriska-former/#drawlineex","title":"DrawLineEx()","text":"<p>Precis som DrawLineV fast med en extra parameter: tjockleken.</p> <pre><code>Raylib.DrawLineEx(start, end, 10, Color.GREEN);\n</code></pre>"},{"location":"annat/raylib/geometriska-former/#drawlinebezierquad","title":"DrawLineBezierQuad()","text":"<p>Rita en b\u00f6jd linje. Funkar som DrawLineEx, men med en extra parameter: en punkt som linjen b\u00f6jer sig mot.</p> <pre><code>  Vector2 start = new Vector2(10,10);\n  Vector2 end = new Vector2(100,100);\n  Vector2 control = new Vector2(200, 10);\n\n  Raylib.DrawLineBezierQuad(start, end, control, 5, Color.GREEN);\n</code></pre>"},{"location":"annat/raylib/grafik/","title":"Grafik","text":""},{"location":"annat/raylib/grafik/#matt-och-koordinatsystem","title":"M\u00e5tt och koordinatsystem","text":"<p>Observera att koordinatsystemet i Raylib har origo i \u00f6vre v\u00e4nstra h\u00f6rnet, och att Y-axeln \u00e4r omv\u00e4nd s\u00e5 att positiva v\u00e4rden g\u00e5r ned\u00e5t.</p> <p>M\u00e5tten \u00e4r i pixlar.</p>"},{"location":"annat/raylib/grafik/#settargetfps","title":"SetTargetFps()","text":"<p>Anv\u00e4nds normalt utanf\u00f6r spel-loopen, f\u00f6r att begr\u00e4nsa antalet bildrutor per sekund. \u00c4r ett av de s\u00e4tt som finns att f\u00e5 t.ex. f\u00f6rflyttningar att ske lika snabbt p\u00e5 alla datorer.</p> <pre><code>Raylib.SetTargetFps(60); // Begr\u00e4nsar till 60fps\n</code></pre>"},{"location":"annat/raylib/grafik/#begindrawing-enddrawing","title":"BeginDrawing(), EndDrawing()","text":"<p>Anv\u00e4nds f\u00f6r att p\u00e5b\u00f6rja, respektive avsluta, den delen av spelloopen som ritar ut saker till f\u00f6nstret.</p> <pre><code>while (!Raylib.WindowShouldClose())\n{\n  // Spelets logik\n\n  Raylib.BeginDrawing();\n\n  // Kod f\u00f6r att rita ut saker till f\u00f6nstret\n\n  Raylib.EndDrawing();\n}\n</code></pre>"},{"location":"annat/raylib/grafik/#clearbackground","title":"ClearBackground()","text":"<p>Rensar f\u00f6nstret. G\u00f6rs normalt kort efter BeginDrawing.</p> <pre><code>while (!Raylib.WindowShouldClose())\n{\n  Raylib.BeginDrawing();\n\n  Raylib.ClearBackground(Color.WHITE);\n\n  Raylib.EndDrawing();\n}\n</code></pre>"},{"location":"annat/raylib/grafik/#farger","title":"F\u00e4rger","text":"<p>Det finns en hel del f\u00e4rdiga f\u00e4rger i Raylib, till exempel Color.MAGENTA eller Color.ORANGE.</p> <p>Om man vill skapa en egen ny f\u00e4rg s\u00e5 kan man g\u00f6ra det:</p> <pre><code>Color hotPink = new Color(255, 105, 180, 255);\n</code></pre> <p>Parametrarna \u00e4r helt enkelt siffror fr\u00e5n 0\u2013255 f\u00f6r r\u00f6tt, gr\u00f6nt, bl\u00e5tt och alpha (genomskinlighet). 0 alpha \u00e4r helt genomskinlig, 255 \u00e4r helt ogenomskinlig.</p>"},{"location":"annat/raylib/input/","title":"Input","text":""},{"location":"annat/raylib/input/#tangentbordet","title":"Tangentbordet","text":""},{"location":"annat/raylib/input/#iskeydown","title":"IsKeyDown()","text":"<p>Tar emot en tangent som parameter; returnerar true om den angivna tangenten \u00e4r nedtryckt \u2013 false om den inte \u00e4r det.</p> <p>Under KeyboardKey finns variabler f\u00f6r i princip alla tangenter p\u00e5 tangentbordet.</p> <pre><code>if (Raylib.IsKeyDown(KeyboardKey.KEY_LEFT))\n{\n  // Kodlogik\n}\n</code></pre>"},{"location":"annat/raylib/input/#iskeyup","title":"IsKeyUp()","text":"<p>Fungerar som IsKeyDown fast\u2026 tv\u00e4rtom</p> <pre><code>if (Raylib.IsKeyUp(KeyboardKey.KEY_LEFT))\n{\n  // Kodlogik\n}\n</code></pre>"},{"location":"annat/raylib/input/#iskeypressed","title":"IsKeyPressed()","text":"<p>Returnerar true om knappen tryckts ned denna frame.</p> <pre><code>if (Raylib.IsKeyPressed(KeyboardKey.KEY_SPACE))\n{\n  Jump();\n}\n</code></pre>"},{"location":"annat/raylib/input/#iskeyreleased","title":"IsKeyReleased()","text":"<p>Returnerar true om knappen sl\u00e4ppts upp denna frame.</p> <pre><code>  if (Raylib.IsKeyReleased(KeyboardKey.KEY_LEFT_CTRL))\n  {\n    FireShot(shotPower);\n    shotPower = 0;\n  }\n</code></pre>"},{"location":"annat/raylib/input/#setexitkey","title":"SetExitKey()","text":"<p>I vanliga fall inneb\u00e4r ett tryck p\u00e5 ESC-knappen att hela spelet avslutas. SetExitKey kan anv\u00e4ndas f\u00f6r att byta vilken knapp som har den funktionen \u2013 eller ta bort den helt.</p> <pre><code>Raylib.SetExitKey(KeyboardKey.KEY_Q); // G\u00f6r s\u00e5 Q avslutar spelet\n\nRaylib.SetExitKey(0); // G\u00f6r s\u00e5 att det inte finns n\u00e5gon \"avsluta spelet-knapp\".\n</code></pre>"},{"location":"annat/raylib/input/#musen","title":"Musen","text":""},{"location":"annat/raylib/input/#getmousex-getmousey","title":"GetMouseX, GetMouseY","text":"<p>H\u00e4mtar musens nuvarande position i form av integerv\u00e4rden i x- respektive y-led.</p> <pre><code>int mouseX = Raylib.GetMouseX();\nint mouseY = Raylib.GetMouseY();\n</code></pre>"},{"location":"annat/raylib/input/#getmouseposition","title":"GetMousePosition()","text":"<p>H\u00e4mtar musens nuvarande position i form av en tv\u00e5dimensionell vektor.</p> <pre><code>Vector2 mousePos = Raylib.GetMousePosition();\n</code></pre>"},{"location":"annat/raylib/input/#ismousebuttondown","title":"IsMouseButtonDown()","text":"<p>Anropas med en musknapp som parameter; returnerar true om den musknappen just nu \u00e4r nedtryckt.</p> <pre><code>bool leftDown = Raylib.IsMouseButtonDown(MouseButton.MOUSE_LEFT_BUTTON);\nbool rightDown = Raylib.IsMouseButtonDown(MouseButton.MOUSE_RIGHT_BUTTON);\n</code></pre>"},{"location":"annat/raylib/input/#ismousebuttonpressed","title":"IsMouseButtonPressed()","text":"<p>Anropas med en musknapp som parameter; returnerar true om den musknappen tryckts ned n\u00e5gon g\u00e5ng sedan f\u00f6rra g\u00e5ngen metoden anropades.</p> <pre><code>bool leftWasPressed = Raylib.IsMouseButtonPressed(MouseButton.MOUSE_LEFT_BUTTON);\n</code></pre>"},{"location":"annat/raylib/kamera/","title":"Kamera","text":""},{"location":"annat/raylib/kamera/#camera2d","title":"Camera2D","text":"<p>Kamera f\u00f6r 2D-spel</p> <pre><code>Camera2D camera = new Camera2D(); // Skapa ny kamera\n</code></pre>"},{"location":"annat/raylib/kamera/#zoom","title":"zoom","text":"<p>Hur inzoomad kameran ska vara.</p> <pre><code>  camera.Zoom = 1f; // Best\u00e4mma zoomv\u00e4rdet till 1\n</code></pre> <p>Warning</p> <p>OBSERVERA: Om du inte best\u00e4mmer v\u00e4rdet f\u00f6r zoomen, s\u00e5 kommer kameran att bete sig underligt. Ge alltid kameran zoomv\u00e4rde 1 (eller n\u00e5got annat) manuellt!</p>"},{"location":"annat/raylib/kamera/#target","title":"target","text":"<p>Den punkt i v\u00e4rlden som kameran ska roteras kring, och som \u00e4ven dess zoom fokuseras p\u00e5 \u2013 samt den punkt dess offset ska utg\u00e5 fr\u00e5n.</p> <pre><code>camera.Target = new Vector2(400, 300);\n</code></pre>"},{"location":"annat/raylib/kamera/#offset","title":"offset","text":"<p>Kamerans offset \u00e4r en 2d-vektor som beskriver hur l\u00e5ngt fr\u00e5n sin target kamerans \u00f6vre v\u00e4nstra h\u00f6rn befinner sig \u2013 allts\u00e5 hur l\u00e5ngt den ska flyttas fr\u00e5n sin ursprungsposition, relativt allt annat.</p> <pre><code>float screenWidth = Raylib.GetScreenWidth();\nfloat screenHeight = Raylib.GetScreenHeight();\n\n// G\u00f6r s\u00e5 att kamerans target hamnar i mitten av sk\u00e4rmen\ncamera.Offset = new Vector2(screenWidth / 2, screenHeight/2);\n</code></pre>"},{"location":"annat/raylib/kamera/#rotation","title":"rotation","text":"<p>Hur roterad kameran ska vara.</p> <pre><code>camera.Rotation = 45; // Roterar kameran 45 grader\n</code></pre>"},{"location":"annat/raylib/kamera/#beginmode2d-endmode2d","title":"BeginMode2D() / EndMode2D()","text":"<p>Anv\u00e4nds f\u00f6r att, mellan Raylib.BeginDrawing() och Raylib.EndDrawing(), avgr\u00e4nsa vilka delar som ska ritas relativt kameran. I de flesta spel betyder det \"hela sj\u00e4lva spelet\". Utanf\u00f6r BeginMode / EndMode ritar man ut UI-element och s\u00e5dant som inte ska p\u00e5verkas av kamerans rotationer och f\u00f6rflyttningar.</p> <p>BeginMode2D vill ha en kamera som f\u00f6rsta parameter.</p> <pre><code>Raylib.BeginMode2D(camera);\n\nRaylib.ClearBackground(Color.LIGHTGRAY);\nRaylib.DrawRectangle(390,290,10,10,Color.RED);\n\nRaylib.EndMode2D();\n</code></pre>"},{"location":"annat/raylib/kollisioner/","title":"Kollisioner","text":""},{"location":"annat/raylib/kollisioner/#checkcollisionrecs","title":"CheckCollisionRecs()","text":"<p>Tar emot tv\u00e5 Rectangles som parametrar och returnerar true om de \u00f6verlappar, false om de inte g\u00f6r det.</p> <pre><code>Rectangle playerRect = new Rectangle(5,5,10,10);\nRectangle enemyRect = new Rectangle(10,10,10,10);\n\nbool areOverlapping = Raylib.CheckCollisionRecs(playerRect, enemyRect); // true\n</code></pre>"},{"location":"annat/raylib/kollisioner/#getcollisionrec","title":"GetCollisionRec()","text":"<p>Tar emot tv\u00e5 Rectangles som parametrar och returnerar en Rectangle som motsvarar \u00f6verlappet mellan dem.</p> <pre><code>Rectangle playerRect = new Rectangle(50,50,100,100);\nRectangle enemyRect = new Rectangle(100,100,100,100);\nRectangle overlap = Raylib.GetCollisionRec(playerRect, enemyRect);\n\nRaylib.DrawRectangleRec(playerRect, Color.RED);\nRaylib.DrawRectangleRec(enemyRect, Color.BLUE);\nRaylib.DrawRectangleRec(overlap, Color.ORANGE);\n</code></pre> <p> </p>"},{"location":"annat/raylib/kollisioner/#checkcollisioncircles","title":"CheckCollisionCircles()","text":"<p>Tar emot tv\u00e5 vektorer som beskriver tv\u00e5 cirklars mittpunkter, och tv\u00e5 floats som beskriver cirklarnas radie, och returnerar true om de \u00f6verlappar, false om de inte g\u00f6r det.</p> <pre><code>Vector2 playerPos = new Vector2(10,10);\nVector2 enemyPos = new Vector2(20,20);\n\n// true\nbool areOverlapping = Raylib.CheckCollisionCircles(playerPos, 10, enemyPos, 15);\n</code></pre>"},{"location":"annat/raylib/kollisioner/#checkcollisioncirclerec","title":"CheckCollisionCircleRec()","text":"<p>Tar emot en positionsvektor och en radie f\u00f6r en cirkel, och en Rectangle. Returnerar true om rektangeln och cirkeln \u00f6verlappar varandra, false om de inte g\u00f6r det.</p> <pre><code>Rectangle playerRect = new Rectangle(5,5,10,10);\nVector2 enemyPos = new Vector2(20,20);\n\n// true\nbool areOverlapping = Raylib.CheckCollisionCircleRec(enemyPos, 15, playerRect);\n</code></pre>"},{"location":"annat/raylib/kollisioner/#checkcollisionpointrec","title":"CheckCollisionPointRec()","text":"<p>Tar emot en punkt i form av en positionsvektor samt en Rectangle. Returnerar true om punkten befinner sig inuti rektangeln, false om den inte g\u00f6r det.</p> <pre><code>Rectangle enemyRect = new Rectangle(10,10,10,10);\n\nmousePos = Raylib.GetMousePosition();\n\nbool areOverlapping = Raylib.CheckCollisionPointRec(mousePos, enemyRect))\n</code></pre>"},{"location":"annat/raylib/ljud/","title":"Ljud","text":"<p>Raylib har st\u00f6d f\u00f6r en hel del ljudformat, bland annat mp3, ogg och wave.</p>"},{"location":"annat/raylib/ljud/#initaudiodevice","title":"InitAudioDevice()","text":"<p>G\u00f6r att Raylibs ljudsystem initieras.</p> <pre><code>Raylib.InitAudioDevice();\n</code></pre>"},{"location":"annat/raylib/ljud/#setmastervolume","title":"SetMasterVolume()","text":"<p>Best\u00e4mmer volymen \u00f6verlag p\u00e5 en skala mellan 0.0 och 1.0.</p> <pre><code>Raylib.SetMasterVolume(0.3f);\n</code></pre>"},{"location":"annat/raylib/ljud/#ljudeffekter","title":"Ljudeffekter","text":""},{"location":"annat/raylib/ljud/#sound","title":"Sound","text":"<p>En datatyp f\u00f6r ljudeffekter.</p>"},{"location":"annat/raylib/ljud/#loadsound","title":"LoadSound()","text":"<p>L\u00e4ser in en ljudfil och placerar dess inneh\u00e5ll i minnet, redo att l\u00e4sas av och spelas upp.</p> <pre><code>Sound exampleSound = Raylib.LoadSound(\"woop_woop.ogg\");\n</code></pre>"},{"location":"annat/raylib/ljud/#playsound","title":"PlaySound()","text":"<p>Spelar upp ett ljud</p> <pre><code>Raylib.PlaySound(exampleSound);\n</code></pre>"},{"location":"annat/raylib/ljud/#pausesound","title":"PauseSound()","text":"<p>Pausar uppspelningen av ett ljud.</p> <pre><code>Raylib.PauseSound(exampleSound);\n</code></pre>"},{"location":"annat/raylib/ljud/#resumesound","title":"ResumeSound()","text":"<p>Forts\u00e4tter uppspelningen av ett pausat ljud.</p> <pre><code>Raylib.ResumeSound(exampleSound);\n</code></pre>"},{"location":"annat/raylib/ljud/#stopsound","title":"StopSound()","text":"<p>Avbryter uppspelningen av ett ljud.</p> <pre><code>Raylib.StopSound(exampleSound);\n</code></pre>"},{"location":"annat/raylib/ljud/#issoundplaying","title":"IsSoundPlaying()","text":"<p>Returnerar en bool \u2013 true om ljudet just nu spelas, annars false.</p> <pre><code>bool isPlaying = Raylib.IsSoundPlaying(exampleSound);\n</code></pre>"},{"location":"annat/raylib/ljud/#setsoundvolume","title":"SetSoundVolume()","text":"<p>Best\u00e4mmer volym f\u00f6r ett ljud. Volymen anges som en float mellan 0.0 och 1.0.</p> <pre><code>Raylib.SetSoundVolume(exampleSound, 0.35f);\n</code></pre>"},{"location":"annat/raylib/ljud/#musik","title":"Musik","text":""},{"location":"annat/raylib/ljud/#music","title":"Music","text":"<p>En datatyp f\u00f6r musikstr\u00f6mmar.</p>"},{"location":"annat/raylib/ljud/#loadmusicstream","title":"LoadMusicStream()","text":"<p>Skapar en musikstr\u00f6m baserad p\u00e5 en ljudfil. Hela ljudfilen l\u00e4ses inte in i minnet samtidigt, utan bara en liten bit i taget.</p> <pre><code>Music exampleMusic = Raylib.LoadMusicStream(\"file_example_OOG_1MG.ogg\");\n</code></pre>"},{"location":"annat/raylib/ljud/#playmusicstream","title":"PlayMusicStream()","text":"<p>Aktiverar uppspelningen av en musikstr\u00f6m.</p> <pre><code>Raylib.PlayMusicStream(exampleMusic);\n</code></pre>"},{"location":"annat/raylib/ljud/#pausemusicstream","title":"PauseMusicStream()","text":"<p>Pausar uppspelningen av en musikstr\u00f6m.</p> <pre><code>Raylib.PauseMusicStream(exampleMusic);\n</code></pre>"},{"location":"annat/raylib/ljud/#resumemusicstream","title":"ResumeMusicStream()","text":"<p>Forts\u00e4tter uppspelningen av en pausad musikstr\u00f6m.</p> <pre><code>Raylib.ResumeMusicStream(exampleMusic);\n</code></pre>"},{"location":"annat/raylib/ljud/#stopmusicstream","title":"StopMusicStream()","text":"<p>Avbryter uppspelningen av musikstr\u00f6mmen helt.</p> <pre><code>Raylib.StopMusicStream(exampleMusic);\n</code></pre>"},{"location":"annat/raylib/ljud/#updatemusicstream","title":"UpdateMusicStream()","text":"<p>Beh\u00f6ver k\u00f6ras varje frame. Kollar ifall mer data beh\u00f6ver laddas in fr\u00e5n ljudfilen som musikstr\u00f6mmen \u00e4r kopplad till, och g\u00f6r det i s\u00e5 fall.</p> <pre><code>Raylib.UpdateMusicStream(exampleMusic);\n</code></pre>"},{"location":"annat/raylib/ljud/#ismusicplaying","title":"IsMusicPlaying()","text":"<p>Returnerar en bool \u2013 true om musikstr\u00f6mmen just nu spelas, annars false.</p> <pre><code>bool isPlaying = Raylib.IsMusicPlaying(exampleMusic);\n</code></pre>"},{"location":"annat/raylib/ljud/#setmusicvolume","title":"SetMusicVolume()","text":"<p>Best\u00e4mmer volym f\u00f6r en musikstr\u00f6m. Volymen anges som en float mellan 0.0 och 1.0.</p> <pre><code>Raylib.SetMusicVolume(exampleMusic, 0.75f)\n</code></pre>"},{"location":"annat/raylib/raylib-csharp/","title":"Raylib-CSharp*","text":"<p>Raylib \u00e4r fr\u00e5n b\u00f6rjan ett bibliotek till C++, och Raylib-cs \u00e4r inte det enda s\u00e4ttet att koppla Raylib till C#. Raylib-CSharp \u00e4r ett annat paket, som funkar delvis annorlunda.</p>"},{"location":"annat/raylib/raylib-csharp/#separata-bibliotek","title":"Separata bibliotek","text":"<p>Raylib-CSharp \u00e4r mer uppdelat \u00e4n Raylib-cs. Varje kategori av funktioner har sitt eget bibliotek, som man m\u00e5ste inkludera via using.</p> <pre><code>using System.Numerics;\nusing Raylib_CSharp.Colors;\nusing Raylib_CSharp.Rendering;\nusing Raylib_CSharp.Windowing;\n\nWindow.Init(800, 600, \"Hello\");\n\nVector2 position = new (400, 300);\n\nwhile (!Window.ShouldClose())\n{\n  Graphics.BeginDrawing();\n  Graphics.ClearBackground(Color.Green);\n\n  Graphics.DrawCircleV(position, 40, Color.Black);\n\n  Graphics.EndDrawing();\n}\n</code></pre>"},{"location":"annat/raylib/raylib-csharp/#funktioner","title":"Funktioner","text":"Raylib-csRaylib-CSharpBibliotekRaylib.InitWindowWindow.InitWindowingRaylib.SetTargetFPSTime.SetTargetFPSRaylib_CSharpRaylib.WindowShouldCloseWindow.ShouldCloseWindowingRaylib.BeginDrawingGraphics.BeginDrawingRenderingRaylib.EndDrawingGraphics.EndDrawingRenderingRaylib.ClearBackgroundGraphics.ClearBackgroundRenderingRaylib.DrawRectangleGraphics.DrawRectangleRenderingRaylib.DrawCircleGraphics.DrawCircleRenderingRaylib.DrawLineGraphics.DrawLineRendering <p>Varianter av funktionerna \u2013 DrawRectangleRec, DrawRectangleLines osv finns s\u00e5klart ocks\u00e5.</p>"},{"location":"annat/raylib/raylib-csharp/#datatyper","title":"Datatyper","text":"StructBibliotekRectangleTransformationsColorColorsTextureTexturesImageImages"},{"location":"annat/raylib/raylib-setup/","title":"Raylib setup","text":"<p>Skapa ett nytt konsollprojekt som vanligt.</p> <ul> <li>Ta fram NuGet-fliken i Visual Studio Codes nedre panel (bredvid Terminal). Du beh\u00f6ver ha till\u00e4gget NuGet Gallery installerat.</li> <li>Om du inte ser den fliken, tryck F1 och s\u00f6k efter \"nuget\", v\u00e4lj \"Focus on NuGet view\".</li> <li>I galleriet, s\u00f6k efter Raylib. V\u00e4lj senaste versionen av \"Raylib_cs\".</li> <li>Kryssa i ditt projekt, klicka Install.</li> <li>Om du vill anv\u00e4nda bilder eller andra filer i ditt spel, se till att konfigurera din csproj f\u00f6r att hantera resursfiler.</li> </ul>"},{"location":"annat/raylib/raylib-setup/#inkludera-raylib","title":"Inkludera Raylib","text":"<p>Warning</p> <p>OBSERVERA: F\u00f6r att du ska kunna anv\u00e4nda Raylib s\u00e5 m\u00e5ste du skriva in f\u00f6ljande bland dina using-rader h\u00f6gst upp i programfilen:</p> <pre><code>using Raylib_cs;\n</code></pre>"},{"location":"annat/raylib/rectangle/","title":"Rectangle","text":"<p>Rectangle \u00e4r en datatyp som beskriver rektanglar. De kan anv\u00e4ndas b\u00e5de f\u00f6r att rita ut rektanglar p\u00e5 sk\u00e4rmen och f\u00f6r att kolla kollisioner.</p> <pre><code>// Skapar tv\u00e5 rektanglar\nRectangle r1 = new Rectangle(10,10,50,20);\nRectangle r1 = new Rectangle(5,5,50,20);\n\n// Ritar ut en rektangel\nRaylib.DrawRectangleRec(r1, Color.SKYBLUE);\n\n// Kollar ifall tv\u00e5 rektanglar \u00f6verlappar varandra\nbool isColliding = Raylib.CheckCollisionRecs(r1, r2);\n</code></pre> <p>Man kan \u00e4ndra p\u00e5 en rektangels egenskaper i efterhand.</p> <pre><code>r1.X += 3;\nr1.Y = 90;\nr1.Width = 50;\nr1.Height = 30;\n</code></pre>"},{"location":"annat/raylib/rectangle/#rectangle-och-list","title":"Rectangle och List","text":"<p>Rectangles \u00e4r inte klasser \u2013 de \u00e4r Structs. Det betyder att om man lagrar rectangles i en lista, s\u00e5 kan man inte \u00e4ndra rektanglarna direkt i listan.</p> <pre><code>List&lt;Rectangle&gt; rects = new List&lt;Rectangle&gt;();\n\nrects.Add(new Rectangle());\nrects.Add(new Rectangle());\nrects.Add(new Rectangle());\nrects.Add(new Rectangle());\n\n// S\u00c5H\u00c4R KAN MAN INTE G\u00d6RA\nrects[1].X = 5;\n\n// G\u00d6R S\u00c5H\u00c4R IST\u00c4LLET\nRectangle tmp = rects[1];\ntmp.X = 5;\nrects[1] = tmp;\n</code></pre>"},{"location":"annat/raylib/text/","title":"Text","text":""},{"location":"annat/raylib/text/#drawtext","title":"DrawText()","text":"<p>Ritar ut text.</p> <pre><code>// Ritar ut texten \"Hello World\" p\u00e5 x-position 100 och y-position 50,\n// med text i storlek 20 och med orange f\u00e4rg.\nRaylib.DrawText(\"Hello World\", 100, 50, 20, Color.ORANGE);\n</code></pre>"},{"location":"annat/raylib/text/#loadfont","title":"LoadFont()","text":"<p>Laddar in en typsnittsfil (ttf eller otf-format)</p> <pre><code>Font f1 = Raylib.LoadFont(@\"Metrophobic.ttf\");\n</code></pre>"},{"location":"annat/raylib/text/#loadfontex","title":"LoadFontEx()","text":"<p>Laddar in en typsnittsfil (ttf eller otf-format) med extra parametrar</p> <pre><code>// Ladda in typsnittsfilen Lato-Regular.ttf, i storleken 36.\n//  Vi anger null eftersom vi inte vill ange exakt vilka tecken som ska laddas in.\n//  VI anger -1 eftersom vi inte vill ange ett maxantal tecken att ladda in.\nFont f2 = Raylib.LoadFontEx(@\"Lato-Regular.ttf\", 36, null, -1);\n</code></pre>"},{"location":"annat/raylib/text/#drawtextex","title":"DrawTextEx()","text":"<p>Mer avancerad variant av DrawText, som anv\u00e4nder Vector2 f\u00f6r positionering och till\u00e5ter att man anger typsnitt. Kr\u00e4ver att man lagt in <code>using System.Numerics;</code> h\u00f6gst upp.</p> <pre><code>// Ritar ut texten \"Hello\" p\u00e5 x- position 20 och y-position 15,\n// i storlek 40, utan n\u00e5got extra mellanrum mellan bokst\u00e4verna, med svart f\u00e4rg.\nRaylib.DrawTextEx(f1, \"Hello\", new Vector2(20,15), 40,0,Color.BLACK);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/","title":"Bilder och texturer","text":""},{"location":"annat/raylib/bilder-och-texturer/#bilder-och-texturer_1","title":"Bilder och texturer","text":"<p>I Raylib skiljer man p\u00e5 Images och Textures.</p> <p>Skillnaden \u00e4r att Images kan redigeras. Textures kan ritas ut till sk\u00e4rmen.</p>"},{"location":"annat/raylib/bilder-och-texturer/#filformat-som-stods","title":"Filformat som st\u00f6ds","text":"<ul> <li>png</li> <li>bmp</li> <li>tga</li> <li>gif (dock ej animationer)</li> <li>dds, hdr, ktx, astc</li> </ul> <p>Info</p> <p>Observera att det saknas st\u00f6d f\u00f6r jpg \u2013 detta eftersom jpg \u00e4r v\u00e4ldigt ovanligt i spel.</p> <p>Info</p> <p>Observera att alla bilder \u00e4r resursfiler. Det betyder att du m\u00e5ste kr\u00e5ngla lite f\u00f6r att vara s\u00e4ker p\u00e5 att programmet kan hitta dem. </p>"},{"location":"annat/raylib/bilder-och-texturer/#texture","title":"Texture","text":"<p>En Texture \u00e4r en bild som \u00e4r sparad i grafikkortets minne (VRAM), och \u00e4r redo att ritas ut p\u00e5 sk\u00e4rmen. Man kan skapa en Texture utifr\u00e5n en Image eller l\u00e4sa in en bildfil fr\u00e5n h\u00e5rddisken direkt.</p>"},{"location":"annat/raylib/bilder-och-texturer/#image","title":"Image","text":"<p>En Image \u00e4r en bild som \u00e4r sparad i datorns arbetsminne (RAM), och kan redigeras p\u00e5 olika s\u00e4tt.</p> <p>F\u00f6r att man ska kunna rita ut den till f\u00f6nstret beh\u00f6ver man sedan konvertera den till en texture. Det g\u00f6r man genom LoadTextureFromImage.</p>"},{"location":"annat/raylib/bilder-och-texturer/image/","title":"Image","text":"<p>En Image \u00e4r en bild som \u00e4r sparad i datorns arbetsminne, och kan manipuleras p\u00e5 olika s\u00e4tt.</p> <p>F\u00f6r att man ska kunna rita ut den till f\u00f6nstret beh\u00f6ver man sedan konvertera den till en texture. Det g\u00f6r man genom LoadTextureFromImage.</p>"},{"location":"annat/raylib/bilder-och-texturer/image/#width-och-height","title":"Width och height","text":"<p>Varje image har en width och en height.</p> <pre><code>Console.WriteLine($\"Width: {filebasedImage.Width});\nConsole.WriteLine($\"Height: {filebasedImage.Height});\n\nRectangle hitBox = new Rectangle(0, 0, filebasedImage.Width, filebasedimage.Height);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#skapa-eller-ladda-in","title":"Skapa eller ladda in","text":""},{"location":"annat/raylib/bilder-och-texturer/image/#loadimage","title":"LoadImage()","text":"<p>L\u00e4ser in en bildfil fr\u00e5n h\u00e5rddisken och lagrar den i minnet som en Image.</p> <p>OBS! bilden m\u00e5ste ligga i samma mapp som Program.cs-filen!</p> <pre><code>Image filebasedImage = Raylib.LoadImage(@\"hero.png\");\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#loadimagefromtexture","title":"LoadImageFromTexture()","text":"<p>L\u00e4ser in en bildfil fr\u00e5n en textur och lagrar den i minnet som en Image.</p> <pre><code>Image goombaImage = Raylib.LoadImageFromTexture(goombaTexture);\n</code></pre> <p>Detta \u00e4r allts\u00e5 motsatsen till LoadTextureFromImage().</p>"},{"location":"annat/raylib/bilder-och-texturer/image/#loadimagefromscreen","title":"LoadImageFromScreen()","text":"<p>Kopierar det som just nu syns i f\u00f6nstret.</p> <pre><code>Image screenshot = Raylib.LoadImageFromScree();\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#genimagecolor","title":"GenImageColor()","text":"<p>Skapar en ny blank image i minnet, fylld av den angivna f\u00e4rgen.</p> <pre><code>// Skapar en svart bild som \u00e4r 200x200 pixlar.\nImage blackImage = Raylib.GenImageColor(200, 200, Color.BLACK);\n\n// Skapar en r\u00f6d bild som \u00e4r 200x200 pixlar.\nImage redImage = Raylib.GenImageColor(200, 200, Color.RED);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#redigera","title":"Redigera","text":"<p>De flesta metoder h\u00e4r anv\u00e4nder nyckelordet ref f\u00f6r att ange att den bild man stoppar in som parameter inte returneras i f\u00f6r\u00e4ndrad form, utan \u00e4ndras p\u00e5 plats i minnet.</p>"},{"location":"annat/raylib/bilder-och-texturer/image/#imagedrawpixel","title":"ImageDrawPixel()","text":"<p>\u00c4ndrar f\u00e4rg p\u00e5 en pixel i en Image.</p> <pre><code>// \u00c4ndrar pixeln som \u00e4r 20 pixlar fr\u00e5n v\u00e4nsterkanten och 15 fr\u00e5n \n// toppen av bilden till att bli bl\u00e5\nRaylib.ImageDrawPixel(ref targetImage, 20, 15, Color.BLUE);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#imagedrawcircle","title":"ImageDrawCircle()","text":"<p>Fungerar som DrawCircle().</p> <pre><code>Raylib.ImageDrawCircle(ref targetImage, 150, 200, 40, Color.MAGENTA);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#imagedrawrectangle","title":"ImageDrawRectangle()","text":"<p>Fungerar som DrawRectangle().</p> <pre><code>Raylib.ImageDrawRectangle(ref targetImage, 10, 10, 30, 40, Color.ORANGE);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#imagedrawrectanglerec","title":"ImageDrawRectangleRec()","text":"<p>Fungerar som DrawRectangleRec().</p> <pre><code>Rectangle r1 = new Rectangle(10,5,30,15);\nRaylib.ImageDrawRectangleRec(ref targetImage, r1, Color.PINK);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#imagedrawtext","title":"ImageDrawText()","text":"<p>Fungerar som DrawText().</p> <pre><code>Raylib.ImageDrawText(ref targetImage, \"Hello World\", 100, 50, 20, Color.ORANGE);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#imagedrawtextex","title":"ImageDrawTextEx()","text":"<p>Fungerar som DrawTextEx().</p> <pre><code>Raylib.DrawTextEx(ref targetImage, f1, \"Hello\", new Vector2(20, 15), 40,0,Color.BLACK);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#getimagecolor","title":"GetImageColor()","text":"<p>L\u00e4ser av f\u00e4rgen p\u00e5 en specifik pixel.</p> <pre><code>// H\u00e4mtar f\u00e4rgen fr\u00e5n x: 53, y: 17 i bilden redImage.\nColor c = Raylib.GetImageColor(redImage, 53, 17);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#imagefliphorizontal","title":"ImageFlipHorizontal()","text":"<p>Flippar en Image horisontellt (spegelv\u00e4nder).</p> <pre><code>Raylib.ImageFlipHorizontal(ref targetImage);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#imageflipvertical","title":"ImageFlipVertical()","text":"<p>Flippar en Image vertikalt.</p> <pre><code>Raylib.ImageFlipVertical(ref targetImage);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#imageresizeimageresizenn","title":"ImageResize/ImageResizeNN()","text":"<p>\u00c4ndrar storlek p\u00e5 en bild. NN-versionen ger ett skarpt resultat vilket fungerar bra f\u00f6r pixelart som skalas med j\u00e4mna multiplikationer.</p> <pre><code>//\u00c4ndrar storleken p\u00e5 bilden \"someImage\" till 400x400 pixlar\nRaylib.ImageResize(ref targetImage, 400, 400);\n\n//\u00c4ndrar storleken p\u00e5 bilden \"pixelartImage\" till dubbla dess nuvarande storlek\nRayLib.ImageResizeNN(ref pixelartImage, pixelartImage * 2, pixelartImage * 2);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/image/#spara-till-harddisken","title":"Spara till h\u00e5rddisken","text":""},{"location":"annat/raylib/bilder-och-texturer/image/#exportimage","title":"ExportImage","text":"<p>Sparar en Image till h\u00e5rddisken, som en png-bild.</p> <pre><code>Raylib.ExportImage(sourceImage, \"hello.png\");\n</code></pre> <p>Info</p> <p>OBS: Filnamnet m\u00e5ste sluta med \".png\"!</p>"},{"location":"annat/raylib/bilder-och-texturer/texture/","title":"Texture","text":"<p>En Texture \u00e4r en bild som \u00e4r sparad i grafikkortets minne, och \u00e4r redo att ritas ut p\u00e5 sk\u00e4rmen. Man kan skapa en Texture utifr\u00e5n en Image eller l\u00e4sa in en bildfil fr\u00e5n h\u00e5rddisken direkt.</p>"},{"location":"annat/raylib/bilder-och-texturer/texture/#width-och-height","title":"Width och height","text":"<p>Varje texture har en width och en height.</p> <pre><code>Console.WriteLine($\"Width: {goombaTexture.Width});\nConsole.WriteLine($\"Height: {goombaTexture.Height});\n\nRectangle hitBox = new Rectangle(0, 0, goombaTexture.Width, goombaTexture.Height);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/texture/#lasa-in","title":"L\u00e4sa in","text":""},{"location":"annat/raylib/bilder-och-texturer/texture/#loadtexture","title":"LoadTexture()","text":"<p>L\u00e4ser in en bildfil och skapar en texture direkt fr\u00e5n den.</p> <pre><code>Texture2D goombaTexture = Raylib.LoadTexture(@\"goomba.png\");\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/texture/#loadtexturefromimage","title":"LoadTextureFromImage()","text":"<p>Skapar en ny texture baserat p\u00e5 en Image.</p> <pre><code>Texture2D heroTexture = Raylib.LoadTextureFromImage(originalImage);\n</code></pre> <p>Detta \u00e4r allts\u00e5 motsatsen till LoadImageFromTexture().</p>"},{"location":"annat/raylib/bilder-och-texturer/texture/#rita-ut-till-skarmen","title":"Rita ut till sk\u00e4rmen","text":""},{"location":"annat/raylib/bilder-och-texturer/texture/#drawtexture","title":"DrawTexture()","text":"<p>Ritar ut en texture till f\u00f6nstret.</p> <pre><code>// Ritar texturen heroTexture till f\u00f6nstret, p\u00e5 x-position 40 och \n// y-position 300, utan inf\u00e4rgning (WHITE f\u00e4rgar inte)\nRaylib.DrawTexture(heroTexture, 40, 300, Color.WHITE)\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/texture/#drawtextureex","title":"DrawTextureEx()","text":"<p>Ritar ut en texture till f\u00f6nstret, med andra parametrar: En Vector2 f\u00f6r att ange x och y-positionen den ska ritas ut p\u00e5, och floats som anger rotation och skalning av texturen.</p> <p>Rotationen anges i grader och skalningen i decimalform.</p> <pre><code>// Ritar texturen heroTexture till f\u00f6nstret, p\u00e5 x-position 40 och \n// y-position 300, utan inf\u00e4rgning (WHITE f\u00e4rgar inte)\n// Anv\u00e4nd skalning 0.5 och rotation 0.\nVector2 position = new Vector2(40, 300);\nRaylib.DrawTexture(heroTexture, position, 0, 0.5f, Color.WHITE)\n</code></pre> <p>Info</p> <p>OBSERVERA: F\u00f6r att kunna anv\u00e4nda Vector2 s\u00e5 m\u00e5ste du l\u00e4gga in detta bland dina using-statements:</p> <pre><code>using System.Numerics;\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/texture/#drawtexturerec","title":"DrawTextureRec()","text":"<p>Ritar ut en del av en texture till f\u00f6nstret. Fungerar som DrawTextureEx men utan rotationen och skalan, och med en rektangel som s\u00e4ger vilken del av texturen man vill klippa ut.</p> <pre><code>Rectangle source = new Rectangle(0, 0, 100, 100);\nVector2 position = new Vector(40, 300);\n\nRaylib.DrawTextureRec(heroTexture, source, position, Color.WHITE);\n</code></pre> <p>Det h\u00e4r kan man bland annat anv\u00e4nda sig av n\u00e4r man har en bild som \u00e4r ett s.k. sprite sheet, d\u00e4r alla bildrutor i en karakt\u00e4rs animation finns med. Man beh\u00f6ver d\u00e5 inte klippa upp animationen i en massa olika bildfiler utan kan ist\u00e4llet anv\u00e4nda DrawTexturePro f\u00f6r att kopiera en del av bilden till raylibf\u00f6nstret i taget.</p> <p>Man kan ocks\u00e5 ange en source-rektangel med negativ bredd eller h\u00f6jd f\u00f6r att f\u00e5 en urklippt bild som \u00e4r flippad l\u00e4ngs x- eller y-axeln.</p> <pre><code>Rectangle source = new Rectangle(0, 0, -100, 100);\nVector2 position = new Vector(40, 300);\n\nRaylib.DrawTextureRec(heroTexture, source, position, Color.WHITE);\n</code></pre>"},{"location":"annat/raylib/bilder-och-texturer/texture/#drawtexturepro","title":"DrawTexturePro()","text":"<p>En \u00e4nnu mer avancerad version av DrawTexture. H\u00e4r anges tv\u00e5 rektanglar \u2013 en f\u00f6r k\u00e4llan, allts\u00e5 vilken del av texturen som ska kopieras. Och s\u00e5 en f\u00f6r destinationen, allts\u00e5 var n\u00e5gonstans p\u00e5 f\u00f6nstret kopian ska placeras och hur stor den ska g\u00f6ras.</p> <p>Dessutom anges en Vector2 f\u00f6r \"origin\", som \u00e4r den position som ritandet och roterandet utg\u00e5r fr\u00e5n. Vill man rotera och skala en textur kring dess mittpunkt anger man allts\u00e5 en Vector2 vars x- och y-v\u00e4rden \u00e4r halva destination-rektangelns bredd och h\u00f6jd.</p> <pre><code>Texture2D spriteSheet = Raylib.LoadTexture(\"herosheet.png\");\n\n// Det som ska kopieras fr\u00e5n texturen \u00e4r en ruta i storlek 64x64 pixlar fr\u00e5n \n//  dess \u00f6vre v\u00e4nstra h\u00f6rn (0,0)\nRectangle heroSpriteSource = new Rectangle(0,0,64,64);\n\n// Hj\u00e4ltespriten ska ritas ut p\u00e5 position 200, 200 och f\u00f6rstoras upp till 256x256.\nRectangle heroSpriteDest = new Rectangle(200, 200, 256, 256);\n\n// En Vector2 med halva destinationens bredd och h\u00f6jd som x- och y-v\u00e4rde.\n// Den r\u00e4knas fr\u00e5n destinationens \u00f6vre v\u00e4nstra h\u00f6rn, s\u00e5 hamnar allts\u00e5 i mitten av den.\nVector2 heroOrigin = new Vector2(\n  heroSpriteDest.width / 2,\n  heroSpriteDest.height / 2\n);\n\nfloat rotation = 0;\n\n// ---\n\nRaylib.DrawTexturePro(\n  texture, \n  heroSpriteSource,\n  heroSpriteDest,\n  heroOrigin,\n  rotation,\n  Color.WHITE );\n</code></pre> <p>Bilden nedan visar principen:</p> <p></p>"},{"location":"annat/raylib/bilder-och-texturer/texture/#settexturefilter","title":"SetTextureFilter()","text":"<p>I vanliga fall n\u00e4r man ritar ut en texture i en annan storlek \u00e4n den \u00e4r fr\u00e5n b\u00f6rjan s\u00e5 skalas den med interpolering \u2013 den hittar p\u00e5 mjuka \u00f6verg\u00e5ngar mellan originalpixlarna. Det fungerar bra f\u00f6r foton och liknande, men s\u00e4mre f\u00f6r pixelart.</p> <pre><code>// Best\u00e4m att texturen heroTexture ska skalas med \"point\"-filter, som ger skarp\n// pixelart - ingen interpolering.\nRaylib.SetTextureFilter(heroTexture, TextureFilter.TEXTURE_FILTER_POINT);\n</code></pre>"},{"location":"annat/threading/","title":"Threading","text":"<p>Info</p> <p>OBSERVERA: Threading \u00e4r definitivt \u00f6verkurs och ing\u00e5r varken i Programmering 1 eller 2.</p> <p>Threading inneb\u00e4r att kod kan k\u00f6ras asynkront \u2013 det vill s\u00e4ga att tv\u00e5 bitar kod exekveras samtidigt, i olika \"tr\u00e5dar\" i CPUn. Vanliga anv\u00e4ndningsomr\u00e5den inkluderar:</p> <ul> <li>Se till s\u00e5 att ett grafiskt gr\u00e4nssnitt inte l\u00e5ser sig medan det v\u00e4ntar p\u00e5 svar fr\u00e5n n\u00e5got p\u00e5 internet, eller p\u00e5 att n\u00e5got laddas in fr\u00e5n h\u00e5rddisken.</li> <li>Dela upp n\u00e5got som kr\u00e4ver mycket datorkraft p\u00e5 flera processork\u00e4rnor, och d\u00e4rmed utnyttja datorns kraft mer effektivt.</li> </ul> <p>Normalt k\u00f6rs ett C#-program bara i en enda tr\u00e5d. Det betyder att den bara k\u00f6rs p\u00e5 en enda processork\u00e4rna \u2013 en k\u00e4rna kan k\u00f6ra flera tr\u00e5dar, men en tr\u00e5d kan inte delas upp p\u00e5 flera k\u00e4rnor.</p> <p>Om det arbete en tr\u00e5d utf\u00f6r \u00e4r v\u00e4ldigt tungt s\u00e5 begr\u00e4nsas tr\u00e5den av sin processor \u2013 det syns till exempel i att en processork\u00e4rna arbetar till 100% medan \u00f6vriga knappt g\u00f6r n\u00e5got alls. Vill man d\u00e5 \u00f6ka hastigheten p\u00e5 k\u00f6rningen beh\u00f6ver man dela upp arbetet p\u00e5 flera processorer.</p> <p>Den stora nackdelen med threading \u00e4r att det blir sv\u00e5rt att dela data p\u00e5 ett s\u00e4kert s\u00e4tt mellan olika delar av programmet. Om tv\u00e5 tr\u00e5dar till exempel f\u00f6rs\u00f6ker komma \u00e5t samma resurs finns risk att n\u00e5got g\u00e5r fel.</p>"},{"location":"annat/threading/#debugging","title":"Debugging","text":"<p>N\u00e4r man debuggar ett program som anv\u00e4nder threading, s\u00e5 kan man under Call Stack se alla tr\u00e5dar som k\u00f6rs. Standard \u00e4r att huvudtr\u00e5den f\u00f6r programmet heter \"Main Thread\". Andra tr\u00e5dar visas som \"&lt;No Name&gt;\" om man inte gett dem ett namn via Name-propertyn.</p> <p></p> <p>Om tr\u00e5darna inte syns under Call Stack, testa att klicka p\u00e5 n\u00e5gra av variablerna under Variables s\u00e5 b\u00f6r de dyka upp.</p>"},{"location":"annat/threading/#_1","title":"Threading","text":""},{"location":"annat/threading/task/","title":"Task","text":"<p>Info</p> <p>OBS: Ganska mycket \u00f6verkurs. Det h\u00e4r m\u00f6ter man normalt f\u00f6rst p\u00e5 h\u00f6gskola/universitet.</p> <p>Den korta versionen: Om man anv\u00e4nder ett bibliotek som tillhandah\u00e5ller asynkrona metoder som returnerar Task&lt;&gt;, s\u00e5 kan man g\u00f6ra metoden man sj\u00e4lv skriver, d\u00e4r metoden anropas, asynkron och d\u00e5 f\u00e5r man anv\u00e4nda await.</p> <p>Det g\u00f6r att man inte m\u00e5ste v\u00e4nta p\u00e5 att den asynkrona metoden avslutas innan man g\u00e5r vidare \u2013 man kan g\u00f6ra det v\u00e4ntandet n\u00e4r man vill.</p> <pre><code>static async Task GetMeThing() // Asynkrona metoder returnerar alltid en Task\n{\n  // Anropa en metod som h\u00e4mtar en string fr\u00e5n internet.\n  // Men v\u00e4nta inte p\u00e5 att den ska bli klar - g\u00e5 direkt vidare.\n  Task&lt;string&gt; task = SomeLibrary.FetchThingFromInternetAsync();\n\n  // G\u00f6r n\u00e5got annat arbete medan vi v\u00e4ntar\n\n  // V\u00e4nta tills metoden \u00e4r klar\n  await task;\n  Console.WriteLine(task.Result);\n  // Man beh\u00f6ver inte skriva return h\u00e4r; metoden returnerar \u00e4nd\u00e5 en Task\n}\n</code></pre>"},{"location":"annat/threading/task/#task_1","title":"Task&lt;&gt;","text":"<p>Den generiska Task-klassen abstraherar och f\u00f6renklar anv\u00e4ndningen av threading i C#. </p> <p>Genom att kapsla in en metod i en Task s\u00e5 k\u00f6rs metoden parallellt med \u00f6vrig kod i programmet.</p> <p>Oftast f\u00e5r man dock Tasks fr\u00e5n metoder man inte sj\u00e4lv skrivit, t.ex. fr\u00e5n bibliotek man lagt till.</p>"},{"location":"annat/threading/task/#taskrun","title":"Task.Run()","text":"<p>Anv\u00e4nds f\u00f6r att k\u00f6ra en vanlig (icke-async) metod som en Task. Praktiskt framf\u00f6r allt f\u00f6r CPU-intensiva aktiviteter, som massiva och tidsintensiva ber\u00e4kningar.</p> <p>Task.Run tar emot en Action som parameter, och k\u00f6r den som en Task. Run() returnerar en referens till task:en som k\u00f6rs. Som vanligt kan man ange antingen en existerande metod eller en anonym metod som sin Action.</p> <pre><code>static void RegularWork()\n{\n  // N\u00e5gonting intensivt\n}\n\n// Anv\u00e4nd RegularWork som en Action\nTask t1 = Task.Run(RegularWork);\n</code></pre> <pre><code>static int WorkWithReturn()\n{\n  // N\u00e5gonting intensivt\n  return 23;\n}\n\n// Anv\u00e4nd HelloWorld som en Action&lt;int&gt;\nTask&lt;int&gt; t2 = Task.Run(HelloWorld);\n</code></pre> <p>Taskens typ-parameter ska vara densamma som returtypen f\u00f6r metoden som kapslas in.</p> <p>Vill man k\u00f6ra Task.Run med en metod som tar emot parametrar s\u00e5 kan man nyttja en anonym metod:</p> <pre><code>static string WorkWithParameter(int t)\n{\n  // N\u00e5gonting intensivt\n  return \"ready\";\n}\n\nTask&lt;string&gt; t3 = Task.Run( () =&gt; WorkWithParameter(42) );\n</code></pre>"},{"location":"annat/threading/task/#wait","title":"Wait()","text":"<p>Pausar k\u00f6rningen av koden tills den inkapslade metoden k\u00f6rts f\u00e4rdigt.</p> <pre><code>Console.WriteLine(\"Waiting...\");\nt1.Wait();\nConsole.WriteLine(\"Finished!\");\n</code></pre>"},{"location":"annat/threading/task/#result","title":"Result","text":"<p>Inneh\u00e5ller det som returnerats fr\u00e5n den inkapslade metoden, n\u00e4r den k\u00f6rts f\u00e4rdigt. Om Result l\u00e4ses av innan metoden k\u00f6rts f\u00e4rdigt s\u00e5 pausar koden precis som med Wait().</p> <pre><code>Console.WriteLine(\"Waiting...\");\nint result = taskMaster.Result;\nConsole.WriteLine($\"Finished with a result of {result}!\");\n</code></pre>"},{"location":"annat/threading/task/#await","title":"Await","text":"<p>V\u00e4ntar p\u00e5 att en Task ska avslutas. Tasken kan skapas/k\u00f6ras p\u00e5 samma rad eller, vilket \u00e4r vanligare och smartare, p\u00e5 en rad l\u00e4ngre upp.</p> <pre><code>// Skapa Task:en och k\u00f6r ig\u00e5ng den; spara en referens i variabeln task\nTask&lt;string&gt; task = SomeLibrary.FetchThingFromInternetAsync();\n\n// G\u00f6r n\u00e5got annat arbete medan vi v\u00e4ntar\n\nstring result = await task; // V\u00e4nta tills metoden \u00e4r klar\n\n// Det ofta s\u00e4mre s\u00e4ttet: K\u00f6r ig\u00e5ng task:en direkt, och v\u00e4ntar \n// p\u00e5 samma radtills den \u00e4r klar.\nstring result2 = await SomeLibrary.FetchThingFromInternetAsync();\n</code></pre>"},{"location":"annat/threading/task/#async","title":"Async","text":"<p>De flesta async-metoder f\u00e5r man fr\u00e5n n\u00e5got existerande bibliotek, till exempel RestSharp. Standard \u00e4r att d\u00f6pa dem till n\u00e5got som slutar p\u00e5 Async.</p> <p>En asynkron metod:</p> <ul> <li>Deklareras med async</li> <li>D\u00f6ps till n\u00e5got som slutar med Async</li> <li>Har alltid en Task som returtyp</li> <li>N\u00e4r man faktiskt skriver return, s\u00e5 \u00e4r det inte en Task, utan den datatyp som Task:en har mellan &lt;&gt;. S\u00e5 en async-metod med Task&lt;int&gt; som returtyp b\u00f6r ha t.ex. en <code>return 34;</code>.</li> </ul> <p>Oftast skriver man asynkrona metoder n\u00e4r man har nytta av await \u2013 vilket man normalt sett bara har ifall man vill k\u00f6ra ig\u00e5ng flera Tasks och k\u00f6ra dem parallellt, f\u00f6r att sedan await:a deras avslut.</p> <pre><code>static async Task&lt;int&gt; GetLengthAsync() // Task&lt;int&gt; som returtyp\n{\n  // K\u00f6r ig\u00e5ng 2 Tasks\n  Task&lt;string&gt; t1 = SomeLibrary.FetchThingFromInternetAsync(); \n  Task&lt;string&gt; t2 = SomeLibrary.FetchThingFromInternetAsync(); \n\n  // V\u00e4ntar tills b\u00e5da \u00e4r f\u00e4rdiga\n  string s = await t1;\n  string s2 = await t2;\n\n  // Returnerar en int\n  return s.Length + s2.Length;\n}\n</code></pre>"},{"location":"annat/threading/thread/","title":"Thread","text":"<p>Info</p> <p>OBS: Ganska mycket \u00f6verkurs. Det h\u00e4r m\u00f6ter man normalt f\u00f6rst p\u00e5 h\u00f6gskola/universitet.</p> <p>Info</p> <p>OBS Oftast g\u00f6r man inte threading manuellt p\u00e5 det h\u00e4r viset i C#, men det \u00e4r bra att f\u00f6rst\u00e5 grundkonceptet. Ist\u00e4llet anv\u00e4nds oftast Tasks f\u00f6r asynkron programmering</p> <p>Thread-klassen anv\u00e4nds n\u00e4r man manuellt vill skapa nya tr\u00e5dar. Som parameter anges en metod vars kod ska k\u00f6ras i den separata tr\u00e5den. Observera att det \u00e4r metodens namn \u2013 dess identifier \u2013 som anges, och att man inte skriver () efter namnet.</p> <pre><code>using System.Threading; // Beh\u00f6vs f\u00f6r tillg\u00e5ng till Thread-klassen\n\nThread workerThread = new Thread(DoSomeHeavyLifting);\n\nstatic void DoSomeHeavyLifting()\n{\n  // Kod som ska k\u00f6ras i den separata tr\u00e5den\n}\n</code></pre> <p>Man kan ocks\u00e5 anv\u00e4nda metoder som tar emot en parameter. Parametern m\u00e5ste d\u00e5 vara av datatypen object, som sedan kan castas till sin egentliga datatyp.</p> <pre><code>Thread workerThread = new Thread(DoSomeHeavyLifting);\n\nstatic void DoSomeHeavyLifting(object n)\n{\n  string name = (string) n;\n\n  // Kod som ska k\u00f6ras i den separata tr\u00e5den\n}\n</code></pre>"},{"location":"annat/threading/thread/#start","title":"Start","text":"<p>Startar k\u00f6rningen av tr\u00e5den.</p> <pre><code>Thread workerThread = new Thread(DoSomeHeavyLifting);\nworkerThread.Start();\n</code></pre> <p>N\u00e4r man startar k\u00f6rningen av en metod som tar emot parametrar, s\u00e5 anges parameterv\u00e4rdet som parameter i Start-metoden.</p> <pre><code>Thread workerThread = new Thread(DoSomeHeavyLifting);\nworkerThread.Start(\"Saruman\");\n\nstatic void DoSomeHeavyLifting(object n)\n{\n  string name = (string) n;\n\n  // Kod som ska k\u00f6ras i den separata tr\u00e5den\n}\n</code></pre>"},{"location":"annat/threading/thread/#join","title":"Join","text":"<p>Pausar k\u00f6rningen av den nuvarande tr\u00e5den, tills den tr\u00e5d som \"joinas\" \u00e4r klar med sin k\u00f6rning.</p> <pre><code>Thread workerThread = new Thread(DoSomeHeavyLifting);\nworkerThread.Start();\n\n// Kod som ska k\u00f6ras samtidigt som tr\u00e5den k\u00f6rs\n\nworkerThread.Join();\n</code></pre>"},{"location":"annat/threading/thread/#name","title":"Name","text":"<p>En property som \u00e4r tr\u00e5dens namn. Anv\u00e4ndbart bl.a n\u00e4r man debuggar.</p> <pre><code>Thread workerThread = new Thread(DoSomeHeavyLifting);\n\nworkerThread.Name = \"Arbetaren\";\n</code></pre>"},{"location":"annat/threading/thread/#isalive","title":"IsAlive","text":"<p>En property som ber\u00e4ttar huruvida tr\u00e5den \u00e4r \"levande\"; allts\u00e5 huruvida den just nu utf\u00f6r sitt arbete. Tr\u00e5den b\u00f6rjar \"leva\" n\u00e4r den startas, och slutar leva n\u00e4r dess arbete \u00e4r utf\u00f6rt \u2013 allts\u00e5 n\u00e4r dess kod \u00e4r f\u00e4rdigk\u00f6rd.</p> <pre><code>Thread workerThread = new Thread(DoSomeHeavyLifting);\n\nwhile (workerThread.IsAlive)\n{\n  Console.WriteLine(\"Arbete p\u00e5g\u00e5r!\");\n  Thread.Sleep(500);\n}\n</code></pre>"},{"location":"annat/threading/thread/#isbackground","title":"IsBackground","text":"<p>En property f\u00f6r huruvida tr\u00e5den \u00e4r en bakgrunds-tr\u00e5d eller ej.</p> <p>Skillnaden mellan bakgrundstr\u00e5dar och f\u00f6rgrundstr\u00e5dar \u00e4r att om huvudprogrammet n\u00e5r sitt slut innan en f\u00f6rgrundstr\u00e5d \u00e4r klar, s\u00e5 v\u00e4ntar huvudprogrammet p\u00e5 att tr\u00e5den ska bli f\u00e4rdig innan k\u00f6rningen avslutas. Bakgrundstr\u00e5dar avslutas automatiskt n\u00e4r huvudprogrammet n\u00e5r sitt slut.</p> <p>Tr\u00e5dar \u00e4r normalt sett f\u00f6rgrundstr\u00e5dar.</p> <pre><code>Thread workerThread = new Thread(DoSomeHeavyLifting);\nworkerThread.Start();\n\nConsole.WriteLine(\"V\u00e4ntar p\u00e5 att tr\u00e5den ska bli klar...\");\n</code></pre> <pre><code>Thread workerThread = new Thread(DoSomeHeavyLifting);\nworkerThread.IsBackground = true;\nworkerThread.Start();\n\nConsole.WriteLine(\"V\u00e4ntar inte p\u00e5 att tr\u00e5den ska bli klar...\");\n</code></pre>"},{"location":"annat/threading/thread/#currentthread","title":"CurrentThread","text":"<p>En statisk property som pekar p\u00e5 den nuvarande tr\u00e5den.</p> <pre><code>Thread workerThread = new Thread(DoSomeHeavyLifting);\nworkerThread.Name = \"Arbetaren\";\n\nstatic void DoSomeHeavyLifting()\n{\n  Console.WriteLine(Thread.CurrentThread.Name); // Skriver ut \"Arbetaren\"\n  Thread.CurrentThread.IsBackground = true;\n\n  // Kod som ska k\u00f6ras i den separata tr\u00e5den\n}\n</code></pre>"},{"location":"annat/threading/thread/#sleep","title":"Sleep","text":"<p>En statisk metod som g\u00f6r att den nuvarande tr\u00e5den \"somnar\" (pausas) i s\u00e5 m\u00e5nga millisekunder som anges som parameterv\u00e4rde.</p> <pre><code>static void DoSomeHeavyLifting()\n{\n  Console.WriteLine(\"V\u00e4ntar 1 sekund innan resten av tr\u00e5dens kod k\u00f6rs\");\n  Thread.Sleep(1000);  \n\n  // Kod som ska k\u00f6ras i den separata tr\u00e5den\n}\n</code></pre>"},{"location":"annat/windows-ui/","title":"Windows UI","text":""},{"location":"annat/windows-ui/winui/","title":"WinUI*","text":"<p>(Under uppbyggnad)</p> <ul> <li>winget install Microsoft.WindowsAppRuntime.1.5</li> <li>https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/downloads</li> <li>dotnet new install VijayAnand.WinUITemplates</li> <li>dotnet new winui -n MyApp</li> <li>Select active configuration: Debug \u2192 x64</li> </ul> <pre><code>&lt;WindowsPackageType&gt;None&lt;/WindowsPackageType&gt;\n</code></pre> <ul> <li>XAML</li> </ul>"},{"location":"annat/windows-ui/wpf/","title":"WPF","text":"<p>WPF st\u00e5r f\u00f6r Windows Presentation Foundation och \u00e4r ett s\u00e4tt att skapa f\u00f6nster-appar, allts\u00e5 s\u00e5dana med vanliga Windows-knappar, textrutor och s\u00e5 vidare.</p> <p>(BILD)</p> <p>WPF-projekt anv\u00e4nder XAML f\u00f6r att beskriva gr\u00e4nssnittet och vanlig C# f\u00f6r att f\u00e5 till logiken bakom; vad som ska h\u00e4nda n\u00e4r man klickar p\u00e5 knappar etc.</p>"},{"location":"annat/windows-ui/wpf/#skapa-ett-wpf-projekt","title":"Skapa ett WPF-projekt","text":"<p>Eftersom WPF-projekt numera inte finns med i listan \u00f6ver projekt man f\u00e5r fram n\u00e4r man anv\u00e4nder \"New .NET Project\" s\u00e5 f\u00e5r man skapa projektet manuellt ist\u00e4llet:</p> <p>Skapa en ny mapp f\u00f6r projektet och \u00f6ppna den mappen i Visual Studio Code.</p> <p>G\u00e5 till terminalen och skriv:</p> <pre><code>dotnet new wpf --name ProjectName\n</code></pre> <p>Detta b\u00f6r inneb\u00e4ra att ett fungerande WPF-projekt skapas i mappen, och en SLN-fil genereras av C# Dev Kit.</p>"},{"location":"annat/windows-ui/xaml/","title":"XAML*","text":"<p>XAML \u00e4r ett spr\u00e5k som anv\u00e4nds i bl.a WPF-program f\u00f6r att beskriva det grafiska gr\u00e4nssnittet. Det liknar delvis HTML och andra XML-sl\u00e4ktingar, i det att man skapar element genom att anv\u00e4nda start- och sluttagar samt attribut som (ofta) skrivs i starttaggarna.</p> <p>Installera g\u00e4rna NoesisGUI XAML-extension i Visual Studio Code f\u00f6r extra hj\u00e4lp att skriva koden.</p>"},{"location":"annat/windows-ui/xaml/#element","title":"Element","text":"<p>Elementen \u00e4r UIts byggstenar; de \u00e4r saker som knappar och textrutor. En del av dem \u00e4r rena layoutelement, som t.ex. StackPanel som man l\u00e4gger andra element inuti. Varje element kan olika attribut. Ibland kallas elementen ocks\u00e5 kontroller. De kan skrivas med start- och sluttagg eller som sj\u00e4lvavslutande taggar.</p> <pre><code>&lt;TextBlock&gt;Kolla h\u00e4r!&lt;/TextBlock&gt;\n&lt;Button&gt;Klicka p\u00e5 mig!&lt;/Button&gt;\n</code></pre> <pre><code>&lt;TextBlock Text=\"Kolla h\u00e4r!\" /&gt;\n&lt;Button Content=\"Klicka p\u00e5 mig!\" /&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#attribut","title":"Attribut","text":"<p>Det finns m\u00e5nga olika attribut tillg\u00e4ngliga f\u00f6r olika element. De kan skrivas antingen inuti starttaggen f\u00f6r elementet eller som child-taggar.</p> <pre><code>&lt;TextBlock FontSize=\"28\" Text=\"Kolla h\u00e4r\" /&gt;\n</code></pre> <pre><code>&lt;TextBlock&gt;\n  &lt;TextBlock.FontSize&gt;28&lt;/TextBlock.FontSize&gt;\n  &lt;TextBlock.Text&gt;Kolla h\u00e4r!&lt;/TextBlock.Text&gt;\n&lt;/TextBlock&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#xname","title":"x:Name","text":"<p>Ger elementet ett unikt namn</p> <pre><code>&lt;TextBlock x:Name=\"NameText\"&gt;Hello&lt;/TextBlock&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#textcontent","title":"Text/Content","text":"<p>Get elementet ett inneh\u00e5ll, eller en text. Vissa typer av element har text, men de flesta har Content ist\u00e4llet.</p> <pre><code>&lt;TextBlock Text=\"Hello\"/&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#fontsize","title":"FontSize","text":"<p>Anger textens storlek.</p> <pre><code>&lt;TextBlock FontSize=\"56\" Text=\"Hello\"/&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#margin","title":"Margin","text":"<p>L\u00e4gger till utrymme kring elementet.</p> <pre><code>&lt;TextBlock Margin=\"10\"&gt;Hello&lt;/TextBlock&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#events","title":"Events","text":"<p>Varje element har ett antal events som kod kan reagera p\u00e5 \u2013 t.ex. att en knapp klickas p\u00e5 eller att en kryssruta kryssas i eller ur.</p> <p>Ett s\u00e4tt att g\u00f6ra detta \u00e4r genom att ange event i XAML och sedan ha en matchande metod i f\u00f6nstrets cs-fil.</p> <p>{% code title=\"MainWindow.xaml\" %} <pre><code>&lt;Button x:Name=\"mainButton\" Click=\"OnMainClick\" Margin=\"10\"&gt;What&lt;/Button&gt;\n</code></pre></p> <pre><code>private void OnMainClick(object sender, RoutedEventArgs e)\n{\n  MessageBox.Show(\"Yes\");\n}\n</code></pre> <p>Genom att analysera sender kan man f\u00e5 veta mer \u2013 om t.ex. en och samma metod anropas fr\u00e5n flera olika objekt kan det vara bra att veta vilket.</p> <pre><code>if (sender is FrameworkElement obj)\n{\n  MessageBox.Show(obj.Name);\n}\n</code></pre>"},{"location":"annat/windows-ui/xaml/#eventbindning-i-kod","title":"Eventbindning i kod","text":"<p>F\u00f6r att helt separera kod fr\u00e5n XAML kan man sk\u00f6ta bindningen i C# ist\u00e4llet. Det g\u00f6r ocks\u00e5 att man kan f\u00e5 flera olika metoder att anropas n\u00e4r en event sker.</p> <p>Man beh\u00f6ver en referens till objektet; den kan man t.ex. skaffa genom att anv\u00e4nda FindName f\u00f6r att hitta objektet man vill l\u00e4gga till en bindning till, och casta objektet till r\u00e4tt datatyp.</p> <p>Sedan utnyttjar man att alla events ligger inlagda i datatypen som delegates.</p> <pre><code>if (FindName(\"mainButton\") is Button button)\n{\n  button.Click += (object sender, RoutedEventArgs e) =&gt; {\n    MessageBox.Show(\"Yes\");\n  };\n}\n</code></pre>"},{"location":"annat/windows-ui/xaml/#findname","title":"FindName","text":"<p>En metod som letar igenom alla sub-objekt efter n\u00e5got med angivet <code>x:Name</code>. Det man f\u00e5r som resultat \u00e4r alltid bara ett generellt object, s\u00e5 resultatet beh\u00f6ver castas.</p> <pre><code>if (FindName(\"mainButton\") is Button button)\n{\n  button.Content = \"New text for button\";\n}\n</code></pre>"},{"location":"annat/windows-ui/xaml/#button","title":"&lt;Button&gt;","text":"<p>En knapp som man kan klicka p\u00e5. Har Click-event.</p> <pre><code>&lt;Button Click=\"ClickTheButton\"&gt;Click Me&lt;/Button&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#textblock","title":"&lt;TextBlock&gt;","text":"<p>Ett block som inneh\u00e5ller text.</p> <pre><code>&lt;TextBlock Text=\"Hello\" FontSize=\"56\" /&gt;\n&lt;TextBlock&gt;Goodbye&lt;/TextBlock&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#stackpanel","title":"&lt;StackPanel&gt;","text":"<p>En container-panel som anv\u00e4nds f\u00f6r att stapla andra element.  Orientation avg\u00f6r i vilken riktning; default \u00e4r Vertical (elementen staplas uppifr\u00e5n och ner).</p> <p>Man kan l\u00e4gga in vilka element som helst i en StackPanel \u2013 inklusive andra StackPanels.</p> <pre><code>&lt;StackPanel Margin=\"10\" Orientation=\"Horizontal\" Spacing=\"10\"&gt;\n\n&lt;/StackPanel&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#checkbox","title":"&lt;CheckBox&gt;","text":"<p>Kryssrutor, d\u00e4r flera kan vara ikryssade samtidigt. Har eventen Checked och Unchecked.</p> <pre><code>&lt;CheckBox&gt;Candle&lt;/CheckBox&gt;\n&lt;CheckBox&gt;Sword&lt;/CheckBox&gt;\n&lt;CheckBox&gt;Shield&lt;/CheckBox&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#radiobutton","title":"&lt;RadioButton&gt;","text":"<p>Liknande Checkbox, men bara en kan vara ifylld i taget. Bra n\u00e4r anv\u00e4ndare ska f\u00e5 v\u00e4lja mellan olika saker, och bara f\u00e5r v\u00e4lja en av dem. Har ocks\u00e5 eventen Checked och Unchecked.</p> <pre><code>&lt;RadioButton&gt;Warrior&lt;/RadioButton&gt;\n&lt;RadioButton&gt;Mage&lt;/RadioButton&gt;\n&lt;RadioButton&gt;Rogue&lt;/RadioButton&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#image","title":"&lt;Image&gt;","text":"<p>L\u00e4gger in en bild! Har attributen Source, Width och Height som kan vara anv\u00e4ndbara. Source beh\u00f6ver deklareras som en resursfil, eller p\u00e5 annat s\u00e4tt placeras i samma mapp som exe-filen n\u00e4r programmet kompilerats.</p> <pre><code>&lt;Image Width=\"200\" Height=\"200\" Source=\"cat.jpg\" /&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#listbox","title":"&lt;ListBox&gt;","text":"<p>En lista med text-items dit man kan l\u00e4gga in nya saker eller ta bort gamla. Det finns C#-metoder f\u00f6r att manipulera listans inneh\u00e5ll, och ett SelectionChanged-event som kan bindas till C#-kod. SelectionMode-attributet anv\u00e4nds f\u00f6r att g\u00f6ra det m\u00f6jligt f\u00f6r anv\u00e4ndare att markera flera saker i listan samtidigt.</p> <p>{% code title=\"MainWindow.xaml\" %} <pre><code>&lt;ListBox x:Name=\"list\" SelectionMode=\"Multiple\"&gt;\n  &lt;ListBoxItem&gt;Health Potion&lt;/ListBoxItem&gt;\n  &lt;ListBoxItem&gt;Broadsword&lt;/ListBoxItem&gt;\n  &lt;ListBoxItem&gt;Vase with flowers&lt;/ListBoxItem&gt;\n&lt;/ListBox&gt;\n</code></pre></p> <p>{% code title=\"MainWindow.xaml.cs\" %} <pre><code>if (FindName(\"list\") is ListBox listBox)\n{\n  listBox.SelectionChanged += (object sender, SelectionChangedEventArgs e) =&gt;\n  {\n    MessageBox.Show(listBox.SelectedItems.Count.ToString());\n  };\n}\n</code></pre></p>"},{"location":"annat/windows-ui/xaml/#grid","title":"&lt;Grid&gt;*","text":"<pre><code>&lt;Grid&gt;\n  &lt;Grid.RowDefinitions&gt;\n    &lt;RowDefinition/&gt;\n    &lt;RowDefinition/&gt;\n  &lt;/Grid.RowDefinitions&gt;\n  &lt;Grid.ColumnDefinitions&gt;\n    &lt;ColumnDefinition/&gt;\n    &lt;ColumnDefinition/&gt;\n  &lt;/Grid.ColumnDefinitions&gt;\n\n  &lt;TextBlock Grid.Row=\"1\" Grid.Column=\"1\"&gt;Hello&lt;/TextBlock&gt;\n&lt;/Grid&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#gridrowdefinitions","title":"&lt;Grid.Rowdefinitions&gt;","text":"<pre><code>&lt;Grid.RowDefinitions&gt;\n  &lt;RowDefinition Width=\"200\"/&gt;\n  &lt;RowDefinition Width=\"auto\"/&gt;\n  &lt;RowDefinition Width=\"*\"/&gt;\n&lt;/Grid.RowDefinitions&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#gridcolumndefinitions","title":"&lt;Grid.Columndefinitions&gt;","text":"<pre><code>&lt;Grid.ColumnDefinitions&gt;\n  &lt;ColumnDefinition Width=\"200\"/&gt;\n  &lt;ColumnDefinition Width=\"auto\"/&gt;\n  &lt;ColumnDefinition Width=\"*\"/&gt;\n&lt;/Grid.ColumnDefinitions&gt;\n</code></pre>"},{"location":"annat/windows-ui/xaml/#element-i-ett-grid","title":"Element i ett grid","text":"<p>N\u00e4r man l\u00e4gger in andra element i ett grid, s\u00e5 anger man vilken kolumn och vilken rad, allts\u00e5 vilken position, elementet ska l\u00e4ggas i genom Grid.Row och Grid.Column.</p> <pre><code>&lt;TextBlock Grid.Row=\"0\" Grid.Column=\"1\"&gt;Hello&lt;/TextBlock&gt;\n</code></pre>"},{"location":"filhantering/filer-och-mappar/","title":"Filer och mappar","text":"<p>Alla dessa kr\u00e4ver att du f\u00f6rst inkluderar System.IO i filen d\u00e4r du vill anv\u00e4nda dem.</p> <pre><code>using System.IO;\n</code></pre>"},{"location":"filhantering/filer-och-mappar/#filer","title":"Filer","text":""},{"location":"filhantering/filer-och-mappar/#filedelete","title":"File.Delete()","text":"<p>Tar bort den fil som anges som parameter.</p> <pre><code>File.Delete(@\"localfile.txt\");\n</code></pre>"},{"location":"filhantering/filer-och-mappar/#fileexists","title":"File.Exists()","text":"<p>File.Exists \u00e4r en metod som returnerar true om filen som anges som parameter existerar, false om den inte g\u00f6r det.</p> <pre><code>if (File.Exists(@\"localfile.txt\"))\n{\n  Console.WriteLine(\"The file exists!\");\n}\n</code></pre>"},{"location":"filhantering/filer-och-mappar/#mappar","title":"Mappar","text":""},{"location":"filhantering/filer-och-mappar/#directorycreatedirectory","title":"Directory.CreateDirectory()","text":"<p>Skapa en mapp.</p> <pre><code>Directory.Create(@\"Savegames\");\n</code></pre>"},{"location":"filhantering/filer-och-mappar/#directorydelete","title":"Directory.Delete()","text":"<p>Ta bort en mapp.</p> <pre><code>Directory.Delete(@\"Savegames\");\n</code></pre>"},{"location":"filhantering/filer-och-mappar/#directoryexists","title":"Directory.Exists()","text":"<p>Kolla om en mapp existerar.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>if (Directory.Exists(@\"Savegames\")\n{\n  /* Stuff */\n}\n</code></pre></p>"},{"location":"filhantering/filer-och-mappar/#directorygetfiles","title":"Directory.GetFiles()","text":"<p>H\u00e4mta en array som inneh\u00e5ller alla filer som finns i en mapp.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>foreach (string filename in Directory.GetFiles(@\"Savegames\")\n{\n  Console.WriteLine(filename);\n}\n</code></pre></p>"},{"location":"filhantering/filsoekvaegar/","title":"Fils\u00f6kv\u00e4gar","text":""},{"location":"filhantering/filsoekvaegar/#filsokvagar_1","title":"Fils\u00f6kv\u00e4gar","text":"<p>En fils\u00f6kv\u00e4g i windows kan t.ex. se ut s\u00e5 h\u00e4r:</p> <pre><code>c:\\temp\\exempel.txt\n</code></pre> <p>Det betyder:</p> <ul> <li>Filen finns p\u00e5 enhet C.</li> <li>I C finns det en mapp som heter temp.</li> <li>I mappen temp finns en fil som heter exempel.</li> <li>exempel-filens fil\u00e4ndelse \u00e4r txt.</li> </ul> <p>Med andra ord anv\u00e4nds  f\u00f6r att separera enheter, mappar och filnamn. I filnamn anv\u00e4nds punkt f\u00f6r att separera namn fr\u00e5n fil\u00e4ndelse.</p> <p>Eftersom  redan anv\u00e4nds som \"escape\"-tecken i C#, f\u00f6r att t.ex. g\u00f6ra radbrytning \\n, s\u00e5 m\u00e5ste man ange fils\u00f6kv\u00e4gar s\u00e5 h\u00e4r:</p> <pre><code>string path = @\"c:\\temp\\exempel.txt\";\n</code></pre> <p>@-tecknet g\u00f6r att \\-tecknen inte tolkas, utan tas bokstavligt.</p>"},{"location":"filhantering/filsoekvaegar/#filer-i-samma-mapp-som-programmet","title":"Filer i samma mapp som programmet","text":"<p>N\u00e4r det g\u00e4ller filer som ligger i samma mapp som programmet s\u00e5 beh\u00f6ver man inte ange mapp eller enhet.</p> <pre><code>string path = @\"localfile.txt\";\n</code></pre> <p>F\u00f6r er som l\u00e4st webbutveckling b\u00f6r detta vara bekant.</p>"},{"location":"filhantering/json-serialisering/","title":"JSON-serialisering","text":"<p>Serialisering handlar om att ta ett objekt \u2013 en instans \u2013 och g\u00f6ra om objektet till ren text som kan lagras i en fil eller till exempel skickas via internet. Se nedan f\u00f6r ett exempel p\u00e5 en klass och hur en serialiserad version av klassen skulle se ut.</p> Spaceship.csSpaceship.json <pre><code>public class Spaceship\n{\n public int Hp {get; set;} = 100;\n public int MaxHp {get; set;} = 100;\n public int Speed {get; set;} = 2;\n}\n</code></pre> <pre><code>{\n  \"Hp\": 100,\n  \"MaxHp\": 100,\n  \"Speed\": 2\n}\n</code></pre> <p>JSON \u00e4r Javascript Object Notation, s\u00e5 f\u00f6r den som \u00e4r van vid Javascript kanske det ser bekant ut.</p> <p>H\u00e4r hittar du Microsofts officiella dokumentation.</p>"},{"location":"filhantering/json-serialisering/#bibliotek-for-enkel-deserialisering","title":"Bibliotek f\u00f6r enkel deserialisering","text":"<p>L\u00e4gg till detta using-statement:</p> <pre><code>using System.Text.Json;\n</code></pre>"},{"location":"filhantering/json-serialisering/#deserialisering-av-json","title":"Deserialisering av JSON","text":""},{"location":"filhantering/json-serialisering/#forberedelser","title":"F\u00f6rberedelser","text":"<p>Utg\u00e5 fr\u00e5n den JSON-kod du ska deserialisera.</p> <pre><code>{\n  \"form_name\": \"\",\n  \"form_names\": [],\n  \"form_order\": 1,\n  \"id\": 132,\n  \"is_battle_only\": false,\n  \"is_default\": true,\n  \"is_mega\": false,\n  \"name\": \"ditto\",\n  \"names\": [],\n  \"order\": 198, \n  // (...)\n}\n</code></pre> <p>Skapa en publik klass som har publika properties som motsvarar de egenskaper du \u00e4r intresserad av.</p> Pokemon.cs <pre><code>class Pokemon\n{\n  public string name {get; set;}\n  public int id {get; set;}\n  public bool is_default {get; set;}\n}\n</code></pre>"},{"location":"filhantering/json-serialisering/#jsonserializerdeserialize","title":"JsonSerializer.Deserialize","text":"<p>Anv\u00e4nds f\u00f6r att deserialisera ett objekt fr\u00e5n en JSON-string.</p> <pre><code>Pokemon ditto = JsonSerializer.Deserialize&lt;Pokemon&gt;(jsonString);\n</code></pre>"},{"location":"filhantering/json-serialisering/#stora-och-sma-bokstaver","title":"Stora och sm\u00e5 bokst\u00e4ver","text":"<p>Properties ska d\u00f6pas med stor bokstav i C#, men i json d\u00f6ps egenskaper n\u00e4stan alltid med liten bokstav. Deserialize \u00e4r k\u00e4nsligt f\u00f6r skillnader mellan stora och sm\u00e5 bokst\u00e4ver. Det g\u00e5r att st\u00e4nga av den k\u00e4nsligheten:</p> <pre><code>var options = new JsonSerializerOptions\n{\n    PropertyNameCaseInsensitive = true\n};\n\n// Nu kan property-namnen i Pokemon.cs d\u00f6pas med stor bokstav\nPokemon ditto = JsonSerializer.Deserialize&lt;Pokemon&gt;(jsonString, options);\n</code></pre>"},{"location":"filhantering/json-serialisering/#manuell-matchning-av-properties","title":"Manuell matchning av properties","text":"<p>Med [JsonPropertyName()] kan man best\u00e4mma att en C#-klass' property ska matchas mot ett JSON-v\u00e4rde med annat namn.</p> <p>Info</p> <p>OBS: detta kr\u00e4ver att du inkluderar <code>System.Text.Json.Serialization</code>.</p> Pokemon.cs <pre><code>using System.Text.Json.Serialization;\n\nclass Pokemon\n{\n  public string Name {get; set;}\n  public int Id {get; set;}\n\n  [JsonPropertyName(\"is_default\")]\n  public bool IsDefault {get; set;}\n}\n</code></pre>"},{"location":"filhantering/json-serialisering/#deserialisering-av-objekt-i-flera-led","title":"Deserialisering av objekt i flera led","text":"<p>Ibland beskriver JSON-kod objekt som inneh\u00e5ller andra objekt.</p> <pre><code>{\n  \"name\": \"ditto\",\n  \"species\":\n  {\n    \"name\": \"ditto\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon-species/132/\"\n  }\n}\n</code></pre> <p>F\u00f6r att deserialisera dessa, skapa klasser som beskriver de inre objekten.</p> PokemonSpecies.csPokemon.cs <pre><code>class PokemonSpecies\n{\n  public string Name {get; set;}\n  public string Url {get; set;}\n}\n</code></pre> <pre><code>class Pokemon\n{\n  public string Name {get; set;}\n  public PokemonSpecies Species {get; set;}\n}\n</code></pre>"},{"location":"filhantering/json-serialisering/#deserialisering-av-listor","title":"Deserialisering av listor","text":"<p>Ibland beskriver JSON-kod listor av objekt eller v\u00e4rden. De k\u00e4nnetecknas av att ge omges av hakparenteser <code>[]</code>.</p> <pre><code>{\n  \"name\": \"ditto\",\n  \"forms\":\n  [\n    0: \"Ditto\"\n    1: \"Exempel\"\n  ]\n}\n</code></pre> <p>F\u00f6r att deserialisera dessa, skapa helt enkelt publika listor i klassen.</p> Pokemon.cs <pre><code>class Pokemon\n{\n  public string Name {get; set;}\n  public List&lt;string&gt; Forms {get; set;}\n}\n</code></pre>"},{"location":"filhantering/json-serialisering/#serialisering-till-json","title":"Serialisering till JSON","text":""},{"location":"filhantering/json-serialisering/#jsonserializerserialize","title":"JsonSerializer.Serialize","text":"<p>Anv\u00e4nds f\u00f6r att serialisera ett objekt till en JSON-string.</p> <pre><code>  Pokemon poke = new Pokemon()\n  {\n    Name = \"Ditto\",\n    Id = 132,\n    IsDefault = true,\n    Species = new PokemonSpecies() {\n      Name = \"ditto\",\n      Url = \"https://pokeapi.co/api/v2/pokemon-species/132/\"\n    }\n  };\n\n  string json = JsonSerializer.Serialize&lt;Pokemon&gt;(poke);\n</code></pre> <p>Denna string kan sedan lagras i en textfil eller t.ex. skickas som svar p\u00e5 ett REST-anrop.</p> <p>Info</p> <p>OBS: Det finns inget s\u00e4tt att automatiskt f\u00f6rvandla namnen p\u00e5 properties till snake_case, vilket ju ofta anv\u00e4nds i JSON. Vill du serialisera med snake_case s\u00e5 f\u00e5r du med andra ord anv\u00e4nda JsonPropertyName-attributet.</p>"},{"location":"filhantering/json-serialisering/#anvandbara-serializationoptions","title":"Anv\u00e4ndbara SerializationOptions","text":"<pre><code>JsonSerializerOptions options = new JsonSerializerOptions() {\n  // serialiserar properties med camelCase\n  PropertyNamingPolicy = JsonNamingPolicy.CamelCase,\n\n  // G\u00f6r JSON-koden snygg och l\u00e4sbar\n  WriteIndented = true \n};\n\nstring json = JsonSerializer.Serialize&lt;Pokemon&gt;(poke, options);\n</code></pre>"},{"location":"filhantering/json-serialisering/#anvandbara-attribut","title":"Anv\u00e4ndbara attribut","text":""},{"location":"filhantering/json-serialisering/#jsonignore","title":"[JsonIgnore]","text":"<p>Anv\u00e4nds f\u00f6r att se till s\u00e5 att en variabel eller property p\u00e5 C#-sidan inte serialiseras till JSON.</p> C# <pre><code>public class Pokemon\n{\n  public string Name {get; set;}\n  public bool IsDefault {get; set;}\n\n  [JsonIgnore]\n  public int CurrentHp {get; set;}\n}\n</code></pre>"},{"location":"filhantering/laesa-och-skriva/","title":"L\u00e4sa och skriva","text":""},{"location":"filhantering/laesa-och-skriva/#att-lasa-data-fran-en-fil","title":"Att l\u00e4sa data fr\u00e5n en fil","text":"<p>B\u00f6rja med att l\u00e4gga till System.IO h\u00f6gst upp bland de bibliotek som inkluderas.</p> <pre><code>using System.IO;\n</code></pre>"},{"location":"filhantering/laesa-och-skriva/#readalltext","title":"ReadAllText()","text":"<p>L\u00e4ser in all information fr\u00e5n angiven fil till en string</p> <pre><code>string contents = File.ReadAllText(@\"localfile.txt\");\n</code></pre> <p>Exempelkoden l\u00e4ser in all data fr\u00e5n filen localfile.txt och lagrar datan i string-variabeln contents.</p>"},{"location":"filhantering/laesa-och-skriva/#readalllines","title":"ReadAllLines()","text":"<p>L\u00e4ser in all information fr\u00e5n angiven fil till en string-array \u2014 en rad fr\u00e5n filen per position i arrayen.</p> <pre><code>string[] contents = File.ReadAllLines(@\"localfile.txt\");\n</code></pre> <p>Exempelkoden l\u00e4ser in all data fr\u00e5n filen localfile.txt och lagrar datan i string-array-variabeln contents.</p> <p>Om localfile.txt t.ex. inneh\u00e5ller:</p> <p>{% code title=\"localfile.txt\" %} <pre><code>Banana\nApple\nMonkey\n</code></pre></p> <p>s\u00e5 kommer contents-arrayen att ha tre strings i sig: Banana, Apple och Monkey.</p>"},{"location":"filhantering/laesa-och-skriva/#att-skriva-data-till-en-fil","title":"Att skriva data till en fil","text":"<p>B\u00f6rja med att l\u00e4gga till System.IO h\u00f6gst upp bland de bibliotek som inkluderas.</p> <pre><code>using System.IO;\n</code></pre>"},{"location":"filhantering/laesa-och-skriva/#writealltext","title":"WriteAllText()","text":"<p>Skriver en string till en textfil.</p> <pre><code>File.WriteAllText(@\"localfile.txt\", \"Banana\");\n</code></pre> <p>Exempelkoden skriver texten \"Banana\" till textfilen localtext.txt.</p>"},{"location":"filhantering/laesa-och-skriva/#writealllines","title":"WriteAllLines()","text":"<p>Skriver en string-array till en textfil - med en av arrayens strings per rad.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string[] contents = {\"Apple\", \"Banana\", \"Monkey\"};\n\nFile.WriteAllLines(@\"localfile.txt\", contents);\n</code></pre></p> <p>Exempelkoden skriver inneh\u00e5llet fr\u00e5n string-arrayen contents till filen localfile.txt. Resultatet blir att localfile.txt inneh\u00e5ller f\u00f6ljande:</p> <p>{% code title=\"localfile.txt\" %} <pre><code>Apple\nBanana\nMonkey\n</code></pre></p>"},{"location":"filhantering/open-close-using/","title":"Open, close, using","text":""},{"location":"filhantering/open-close-using/#fileopen","title":"File.Open()","text":"<p>Anv\u00e4nds f\u00f6r att skapa en koppling till en fil .</p> <pre><code>FileStream file = File.Open(@\"test.txt\", FileMode.OpenOrCreate); \n</code></pre> <p>Variabeln file blir ett \"FileStream\"-objekt, som man kan anv\u00e4nda f\u00f6r att skriva till eller l\u00e4sa fr\u00e5n filen, i det h\u00e4r fallet test.txt.</p> <p>FileModes:</p> <ul> <li>FileMode.Open \u2013 \u00f6ppna en fil som garanterat finns. Kasta felmeddelande FileNotFoundException om den inte finns.</li> <li>FileMode.OpenOrCreate \u2013 \u00f6ppna en fil; skapa den om den inte finns.</li> </ul>"},{"location":"filhantering/open-close-using/#close","title":"Close()","text":"<p>Anv\u00e4nds f\u00f6r att \"st\u00e4nga\" en koppling till en fil och informera operativsystemet om att den nu kan \u00f6ppnas och anv\u00e4ndas av andra program igen.</p> <pre><code>file.Close();\n</code></pre> <p>Det \u00e4r en mycket bra id\u00e9 att alltid komma ih\u00e5g att st\u00e4nga sina filer n\u00e4r man \u00e4r klar med dem.</p>"},{"location":"filhantering/open-close-using/#using","title":"Using()","text":"<p>Using g\u00f6r att man slipper anv\u00e4nda Close() \u2013 n\u00e4r kodblocket \u00e4r slut s\u00e5 st\u00e4ngs filen automatiskt.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>using (FileStream file = File.Open(@\"test.txt\", FileMode.OpenOrCreate))\n{\n  /* G\u00f6r saker */\n}\n</code></pre></p>"},{"location":"filhantering/resursfiler/","title":"Resursfiler","text":"<p>Ofta jobbar vi med filer som ska finnas i samma mapp som v\u00e5rt program, eller i en fils\u00f6kv\u00e4g relativt programmet. Till exempel:</p> <ul> <li>Json-filer som ska sparas till eller l\u00e4sas in</li> <li>Bildfiler som Raylib ska l\u00e4sa in och rita till sk\u00e4rmen</li> <li>Textfiler som inneh\u00e5ller spelets ber\u00e4ttelse</li> </ul> <p>Dessa letar programmet alltid efter i den nuvarande mappen (current folder). Vad som r\u00e4knas som current folder varierar.</p> <ul> <li>Anv\u00e4nder man en utf\u00f6rlig launch.json (via t.ex. Generate assets\u2026) s\u00e5 \u00e4r current folder mappen csproj-filen ligger i.</li> <li>Anv\u00e4nder man den ganska tomma default-launch-json-filen som C# Dev Kit numera skapar, s\u00e5 \u00e4r current folder mappen som den kompilerade exe/dll-filen ligger i.</li> </ul>"},{"location":"filhantering/resursfiler/#losning-1-kopiera-filerna-automatiskt-till-malmappen","title":"L\u00f6sning 1: Kopiera filerna automatiskt till m\u00e5lmappen","text":"<p>Det h\u00e4r \u00e4r det rekommenderade s\u00e4ttet att l\u00f6sa problemet p\u00e5.</p> <p>\u00d6ppna projektets csproj-fil. Den b\u00f6r se ut ungef\u00e4r s\u00e5h\u00e4r:</p> <pre><code>&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n\n  &lt;PropertyGroup&gt;\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n    &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt;\n    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\n    &lt;!-- &lt;Nullable&gt;enable&lt;/Nullable&gt; --&gt;\n  &lt;/PropertyGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"Raylib-cs\" Version=\"4.5.0.4\" /&gt;\n  &lt;/ItemGroup&gt;\n&lt;/Project&gt;\n</code></pre> <p>L\u00e4gg till en ny ItemGroup, till exempel direkt under den PropertyGroup som redan finns. I den nya ItemGroup:en l\u00e4gger du in nya Content-element f\u00f6r de filer du vill ha med. </p> <pre><code>  &lt;ItemGroup&gt;\n    &lt;Content Include=\"character.png\" CopyToOutputDirectory=\"Always\"/&gt;\n    &lt;Content Include=\"tree.png\" CopyToOutputDirectory=\"Always\"/&gt;\n  &lt;/ItemGroup&gt;\n</code></pre>"},{"location":"filhantering/resursfiler/#manga-filer-av-samma-typ","title":"M\u00e5nga filer av samma typ","text":"<p>F\u00f6r att kopiera alla filer av en viss typ kan du anv\u00e4nda *-tecken.</p> <pre><code>  &lt;ItemGroup&gt;\n    &lt;Content Include=\"*.png\" CopyToOutputDirectory=\"Always\"/&gt;\n  &lt;/ItemGroup&gt;\n</code></pre>"},{"location":"filhantering/resursfiler/#en-hel-mapp","title":"En hel mapp","text":"<p>Skapa en mapp d\u00e4r du l\u00e4gger alla bilder, textfiler och annat du vill ha med. D\u00f6p den till t.ex. Assets.</p> <p>G\u00f6r s\u00e5 att mappen, inklusive alla undermappar och filer, kopieras:</p> <pre><code>  &lt;ItemGroup&gt;\n    &lt;Content Include=\"Assets\\**\\*.*\" CopyToOutputDirectory=\"Always\"/&gt;\n  &lt;/ItemGroup&gt;\n</code></pre>"},{"location":"filhantering/resursfiler/#losning-2-generate-assets","title":"L\u00f6sning 2: Generate assets","text":"<ul> <li>L\u00e4gg bilder etc direkt i samma mapp som csproj-filen.</li> <li>Anv\u00e4nd F1 \u2192 .NET: Generate Assets for Build and Debug f\u00f6r att generera en launch.json.</li> </ul>"},{"location":"filhantering/resursfiler/#losning-3-lagg-filerna-manuellt-till-malmappen","title":"L\u00f6sning 3: L\u00e4gg filerna manuellt till m\u00e5lmappen","text":"<ul> <li>L\u00e4gg alla n\u00f6dv\u00e4ndiga filer direkt till mappen d\u00e4r exe/dll:en ligger. K\u00f6r du dotnet 7 blir det i bin\\Debug\\net7.0.</li> <li>Kom ih\u00e5g att inte ta bort mappen utan att vara s\u00e4ker p\u00e5 att du har kopior av filerna!</li> <li>Kom ih\u00e5g att kopiera in samma filer i din exe-fils mapp n\u00e4r du kompilerar f\u00f6r publicering!</li> </ul>"},{"location":"filhantering/xml-serialisering/","title":"XML-serialisering","text":"<p>Serialisering handlar om att ta ett objekt \u2013 en instans \u2013 och g\u00f6ra om objektet till text som kan lagras i en fil eller till exempel skickas via internet. Se nedan f\u00f6r ett exempel p\u00e5 en klass och hur en serialiserad version av klassen skulle se ut.</p> Spaceship.csSpaceship.xml <pre><code>public class Spaceship\n{\n public int hp = 100;\n public int maxHp = 100;\n public int speed = 2;\n}\n</code></pre> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Spaceship xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n           xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n &lt;hp&gt;100&lt;/hp&gt;\n &lt;maxHp&gt;100&lt;/maxHp&gt;\n &lt;speed&gt;2&lt;/speed&gt;\n&lt;/Spaceship&gt;\n</code></pre>"},{"location":"filhantering/xml-serialisering/#forberedelser","title":"F\u00f6rberedelser","text":"<p>Klassen vars instanser ska kunna serialiseras m\u00e5ste vara public.</p> <pre><code>public class Spaceship\n{\n  // L\u00e4gg som vanligt in variabler, properties, metoder etc h\u00e4r\n}\n</code></pre> <p>Det \u00e4r ocks\u00e5 enbart publika variabler samt properties med publika getters och setters som serialiseras.</p> <p>F\u00f6r att kunna serialisera till XML beh\u00f6vs f\u00f6ljande bibliotek:</p> <pre><code>using System.IO;\nusing System.Xml;\nusing System.Xml.Serialization;\n</code></pre>"},{"location":"filhantering/xml-serialisering/#xmlserializer","title":"XmlSerializer","text":"<p>F\u00f6r att kunna serialisera instanser till XML beh\u00f6vs en XML-serialiserare, specialbyggd f\u00f6r att serialisera instanser av just den klassen.</p> <pre><code>XmlSerializer shipSerializer = new XmlSerializer(typeof(Spaceship));\n</code></pre> <p>Tyv\u00e4rr \u00e4r XmlSerializern inte skriven som en generisk klass, s\u00e5 ist\u00e4llet m\u00e5ste man anv\u00e4nda typeof f\u00f6r att meddela vilken klass det \u00e4r serialiseraren ska specialisera sig p\u00e5.</p>"},{"location":"filhantering/xml-serialisering/#serialize","title":"Serialize","text":"<p>N\u00e4r vi har en serialiserare s\u00e5 kan vi anv\u00e4nda den f\u00f6r att serialisera en instans av en klass.</p> <pre><code>Spaceship myShip = new Spaceship();\n\nFileStream file = File.Open(@\"ship.xml\", FileMode.OpenOrCreate);\n\nshipSerializer.Serialize(file, myShip);\n\nfile.Close();\n</code></pre> <p>Resultatet av denna kod blir att XML-koden l\u00e4ngre upp p\u00e5 den h\u00e4r sidan sparas ner i ship.xml.</p> <p>Samma kod kan skrivas s\u00e5 h\u00e4r:</p> <pre><code>Spaceship myShip = new Spaceship();\n\nusing (FileStream file = File.Open(@\"ship.xml\", FileMode.OpenOrCreate))\n{\n  shipSerializer.Serialize(file, myShip);\n}\n</code></pre>"},{"location":"filhantering/xml-serialisering/#deserialize","title":"Deserialize","text":"<p>N\u00e4r det finns serialiserad data i en XML-fil s\u00e5 kan man ocks\u00e5 anv\u00e4nda serialiseraren f\u00f6r att deserialisera datan, dvs skapa en ny instans av klassen och fylla den med datan fr\u00e5n XML-filen.</p> <pre><code>Spaceship myShip;\n\nusing (FileStream file = File.Open(@\"ship.xml\", FileMode.OpenOrCreate))\n{\n  myShip = (Spaceship) shipSerializer.Deserialize(file);\n}\n</code></pre> <p>Eftersom serializern inte \u00e4r skriven som en generisk klass s\u00e5 m\u00e5ste vi aktivt casta det Deserialize returnerar till den klass vi vill att det ska vara (och vet att det borde vara), i det h\u00e4r fallet Spaceship.</p>"},{"location":"filhantering/xml-serialisering/#xml-serialisering-av-samlingar-arrayer-listor","title":"XML-serialisering av samlingar (arrayer, listor)","text":"<p>Det g\u00e5r utm\u00e4rkt att serialisera \u00e4ven listor.</p> <pre><code>List&lt;Spaceship&gt; fleet = new List&lt;Spaceship&gt;();\n\nfleet.Add(new Spaceship());\nfleet.Add(new Spaceship());\nfleet.Add(new Spaceship());\n\nXmlSerializer fleetSerializer = new XmlSerializer(typeof(List&lt;Spaceship&gt;));\n\nFileStream file = File.Open(@\"fleet.xml\", FileMode.OpenOrCreate);\n\nshipSerializer.Serialize(file, fleet);\n\nfile.Close();\n</code></pre> <p>Precis som med andra variabler och properties s\u00e5 kommer publika samlingar av instanser som lagrats i en instans ocks\u00e5 serialiseras.</p> Fleet.csFleet.xml <pre><code>public class Fleet\n{\n  public List&lt;Spaceship&gt; ships = new List&lt;Spaceship&gt;();\n}\n</code></pre> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Fleet xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n &lt;ships&gt;\n   &lt;Spaceship&gt;\n     &lt;hp&gt;100&lt;/hp&gt;\n     &lt;maxHp&gt;100&lt;/maxHp&gt;\n     &lt;speed&gt;2&lt;/speed&gt;\n   &lt;/Spaceship&gt;\n   &lt;Spaceship&gt;\n     &lt;hp&gt;100&lt;/hp&gt;\n     &lt;maxHp&gt;100&lt;/maxHp&gt;\n     &lt;speed&gt;2&lt;/speed&gt;\n   &lt;/Spaceship&gt;\n &lt;/ships&gt;\n&lt;/Fleet&gt;\n</code></pre>"},{"location":"filhantering/filformat/","title":"Filformat","text":""},{"location":"filhantering/filformat/json/","title":"JSON","text":"<p>JSON \u00e4r Javascript Object Notation, s\u00e5 f\u00f6r den som \u00e4r van vid Javascript kanske det ser bekant ut.</p>"},{"location":"filhantering/filformat/json/#datatyper","title":"Datatyper","text":"<p>Det finns fem datatyper i JSON:</p> <ul> <li>string \u2013 \"test\"</li> <li>number \u2013 42</li> <li>bool \u2013 true</li> <li>array \u2013 []</li> <li>object \u2013 {}</li> </ul>"},{"location":"filhantering/filformat/json/#objekt-och-egenskaper","title":"Objekt och egenskaper","text":"<p>Objekt kan inneh\u00e5lla egenskaper. Varje egenskap har ett namn och ett v\u00e4rde. V\u00e4rdet \u00e4r en av de fem datatyperna. Egenskapsnamnen \u00e4r strings. Man separerar egenskaperna fr\u00e5n varandra med kommatecken, och separerar egenskapsnamn fr\u00e5n egenskapsv\u00e4rde med kolon.</p> <pre><code>{\n  \"name\": \"Albert\",\n  \"age\": 3000\n}\n</code></pre> <p>En egenskap kan ha ett objekt som v\u00e4rde:</p> <pre><code>{\n  \"name\": \"Albert\",\n  \"age\": 3000,\n  \"weapon\": {\n    \"name\": \"Sword\",\n    \"damage\": 300\n  }\n}\n</code></pre>"},{"location":"filhantering/filformat/json/#arrayer","title":"Arrayer","text":"<p>En array kan inneh\u00e5lla flera v\u00e4rden. V\u00e4rdena \u00e4r oftast av samma datatyp, men m\u00e5ste inte vara det.</p> <pre><code>[\"Sword\", \"Shield\", \"Socks\"]\n</code></pre> <pre><code>[66, 32, \"black hole\", true]\n</code></pre> <p>I Javascript kommer man sedan \u00e5t varje position i arrayen genom att h\u00e4nvisa till dess position, som anges som ett heltal. Den f\u00f6rsta saken i listan f\u00e5r nummer 0.</p> <p>Skillnaden mellan en array och ett objekt \u00e4r med andra ord att arrayer \u00e4r indexerade med heltal \u2013 s\u00e5 varje sak i listan identifieras med ett nummer \u2013 medan objects \u00e4r indexerade med strings.</p>"},{"location":"filhantering/filformat/json/#nastling","title":"N\u00e4stling","text":"<p>I JSON \u00e4r det vanligt att l\u00e4gga objekt i andra objekt, och objekt i listor, och listor i objekt.</p> <p>Exempel p\u00e5 objekt i en array:</p> <pre><code>[\n  {\n    \"name\": \"Axe\",\n    \"damage\": 20\n  },\n  {\n    \"name\": \"Bazooka\",\n    \"damage\": 9001\n  }\n]\n</code></pre>"},{"location":"filhantering/serialisering/","title":"Serialisering [\u2026]","text":"<p>JSON-serialisering | XML-serialisering</p> <p>Serialisering handlar om att ta ett objekt \u2013 en instans \u2013 och g\u00f6ra om objektet till ren text (s.k. \"plain text\") som kan lagras i en fil eller till exempel skickas via internet.</p> <p>F\u00f6r att den rena texten sen ska kunna avl\u00e4sas (deserialiseras) tillbaka till ett objekt i andra \u00e4nden s\u00e5 beh\u00f6ver man vara \u00f6verens om ett format. JSON \u00e4r idag ett av de absolut vanligaste, och XML \u00e4r ocks\u00e5 f\u00f6rekommande.</p> <p>Se nedan f\u00f6r ett exempel p\u00e5 en klass och hur en instans av klassen skulle se ut om man serialiserade den till JSON respektive XML.</p> Spaceship.csSpaceship.jsonSpaceship.xml <pre><code>public class Spaceship\n{\n public int Hp {get; set;} = 100;\n public int MaxHp {get; set;} = 100;\n public int Speed {get; set;} = 2;\n}\n</code></pre> <pre><code>{\n  \"Hp\": 100,\n  \"MaxHp\": 100,\n  \"Speed\": 2\n}\n</code></pre> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Spaceship xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n           xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n &lt;hp&gt;100&lt;/hp&gt;\n &lt;maxHp&gt;100&lt;/maxHp&gt;\n &lt;speed&gt;2&lt;/speed&gt;\n&lt;/Spaceship&gt;\n</code></pre>"},{"location":"filhantering/serialisering/json-serialisering/","title":"JSON-serialisering","text":"<p>JSON \u00e4r Javascript Object Notation, s\u00e5 f\u00f6r den som \u00e4r van vid Javascript kanske det ser bekant ut.</p> <p>H\u00e4r hittar du Microsofts officiella dokumentation.</p>"},{"location":"filhantering/serialisering/json-serialisering/#bibliotek","title":"Bibliotek","text":"<p>L\u00e4gg till detta using-statement:</p> <pre><code>using System.Text.Json;\n</code></pre>"},{"location":"filhantering/serialisering/json-serialisering/#klassdesign","title":"Klassdesign","text":"<p>Klassen vars instanser ska kunna serialiseras/deserialiseras m\u00e5ste vara public.</p> <p>{% code title=\"Pokemon.cs\" lineNumbers=\"true\" %} <pre><code>public class Pokemon\n{\n  public string name {get; set;}\n  public int id {get; set;}\n  public bool is_default {get; set;}\n}\n</code></pre></p> <p>Vad som inkluderas i serialiseringen \u00e4r:</p> <ul> <li>Publika properties med publika get och set</li> <li>Variabler och properties som det st\u00e5r [JsonInclude] framf\u00f6r</li> </ul> <p>Om du ska deserialisera JSON-kod som du f\u00e5r fr\u00e5n n\u00e5got annat st\u00e4lle och inte designat sj\u00e4lv, s\u00e5 beh\u00f6ver du vara noga med att matcha namnet p\u00e5 dina publika variabler/properties mot JSON-kodens. Serialiseringsprocessen \u00e4r normalt k\u00e4nslig vad g\u00e4ller stora och sm\u00e5 bokst\u00e4ver, men du kan \u00e4ndra p\u00e5 detta (rekommenderas!).</p> Pokemon.csDitto.json <pre><code>public class Pokemon\n{\n  public string name {get; set;}\n  public int id {get; set;}\n  public bool is_default {get; set;}\n}\n</code></pre> <pre><code>{\n  \"form_name\": \"\",\n  \"form_names\": [],\n  \"form_order\": 1,\n  \"id\": 132,\n  \"is_battle_only\": false,\n  \"is_default\": true,\n  \"is_mega\": false,\n  \"name\": \"ditto\",\n  \"names\": [],\n  \"order\": 198, \n  // (...)\n}\n</code></pre>"},{"location":"filhantering/serialisering/json-serialisering/#jsonserializerserialize","title":"JsonSerializer.Serialize&lt;&gt;()","text":"<p>Anv\u00e4nds f\u00f6r att serialisera ett objekt till en JSON-string.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Pokemon poke = new Pokemon()\n{\n  Name = \"Ditto\",\n  Id = 132,\n  IsDefault = true,\n  Species = new PokemonSpecies() {\n    Name = \"ditto\",\n    Url = \"https://pokeapi.co/api/v2/pokemon-species/132/\"\n  }\n};\n\nstring json = JsonSerializer.Serialize&lt;Pokemon&gt;(poke);\n</code></pre></p> <p>Denna string kan sedan lagras i en textfil eller t.ex. skickas som svar p\u00e5 ett REST-anrop.</p>"},{"location":"filhantering/serialisering/json-serialisering/#jsonserializeroptions","title":"JsonSerializerOptions","text":"<p>Genom att skicka in ett JsonSerializerOptions-objekt kan man ge mer detaljerade instruktioner till serializern.</p> <pre><code>JsonSerializerOptions options = new ()\n{\n  // Ger snygg, indenterad JSON-kod\n  WriteIndented = true,\n  // Omvandlar alla property-namn till snake_case\n  PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower // d\u00f6per om properties\n};\n\nstring json = JsonSerializer.Serialize&lt;Pokemon&gt;(poke, options);\n</code></pre> <p>I JSON anv\u00e4nds oftast snake_case, medan C# ju anv\u00e4nder camelCase eller PascalCase.</p> <p>Warning</p> <p>OBS: SnakeCaseLower introducerades i dotnet 8!</p>"},{"location":"filhantering/serialisering/json-serialisering/#jsonserializerdeserialize","title":"JsonSerializer.Deserialize&lt;&gt;()","text":"<p>Anv\u00e4nds f\u00f6r att deserialisera ett objekt fr\u00e5n en JSON-string.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// jsonString inneh\u00e5ller json-data. Den kan t.ex. l\u00e4sas in fr\u00e5n en json-fil\n// eller h\u00e4mtas fr\u00e5n en REST-server.\nPokemon ditto = JsonSerializer.Deserialize&lt;Pokemon&gt;(jsonString);\n</code></pre></p>"},{"location":"filhantering/serialisering/json-serialisering/#attribut","title":"Attribut","text":"<p>Mer om attribut h\u00e4r.</p> <p>Warning</p> <p>OBS: dessa kr\u00e4ver att du inkluderar <code>System.Text.Json.Serialization</code>.</p>"},{"location":"filhantering/serialisering/json-serialisering/#jsoninclude","title":"[JsonInclude]","text":"<p>Anv\u00e4nds f\u00f6r att inkludera en variabel eller property i Json-serialiseringen</p> <pre><code>using System.Text.Json.Serialization;\n\npublic class Pokemon\n{\n  [JsonInclude]\n  public string Name;\n\n  [JsonInclude]\n  public bool IsDefault;\n}\n</code></pre>"},{"location":"filhantering/serialisering/json-serialisering/#jsonignore","title":"[JsonIgnore]","text":"<p>Anv\u00e4nds f\u00f6r att se till s\u00e5 att en variabel eller property p\u00e5 C#-sidan inte serialiseras till JSON.</p> <p>{% code title=\"Pokemon.cs\" lineNumbers=\"true\" %} <pre><code>using System.Text.Json.Serialization;\n\npublic class Pokemon\n{\n  public string Name {get; set;}\n  public bool IsDefault {get; set;}\n\n  [JsonIgnore]\n  public int CurrentHp {get; set;}\n}\n</code></pre></p>"},{"location":"filhantering/serialisering/json-serialisering/#jsonpropertyname","title":"[JsonPropertyName()]","text":"<p>Med attributet <code>[JsonPropertyName()]</code> kan man best\u00e4mma att en C#-klass' property ska matchas mot ett JSON-v\u00e4rde med annat namn.</p> <p>{% code title=\"Pokemon.cs\" lineNumbers=\"true\" %} <pre><code>using System.Text.Json.Serialization;\n\nclass Pokemon\n{\n  public string Name {get; set;}\n  public int Id {get; set;}\n\n  [JsonPropertyName(\"is_default\")]\n  public bool IsDefault {get; set;}\n}\n</code></pre></p>"},{"location":"filhantering/serialisering/json-serialisering/#deserialisering-av-listor","title":"Deserialisering av listor","text":"<p>Ibland beskriver JSON-kod listor av objekt eller v\u00e4rden. De k\u00e4nnetecknas av att ge omges av hakparenteser <code>[]</code>.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>{\n  \"name\": \"ditto\",\n  \"forms\":\n  [\n    \"Ditto\",\n    \"Exempel\"\n  ]\n}\n</code></pre></p> <p>F\u00f6r att deserialisera dessa, skapa helt enkelt publika listor i klassen.</p> <p>{% code title=\"Pokemon.cs\" lineNumbers=\"true\" %} <pre><code>class Pokemon\n{\n  [JsonPropertyName(\"name\")]\n  public string Name {get; set;}\n\n  [JsonPropertyName(\"forms\")]\n  public List&lt;string&gt; Forms {get; set;}\n}\n</code></pre></p>"},{"location":"filhantering/serialisering/json-serialisering/#deserialisering-av-objekt-i-flera-led","title":"Deserialisering av objekt i flera led","text":"<p>Ibland beskriver JSON-kod objekt som inneh\u00e5ller andra objekt.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>{\n  \"name\": \"ditto\",\n  \"species\":\n  {\n    \"name\": \"ditto\",\n    \"url\": \"https://pokeapi.co/api/v2/pokemon-species/132/\"\n  }\n}\n</code></pre></p> <p>F\u00f6r att deserialisera dessa, skapa klasser som beskriver de inre objekten.</p> <p>{% code title=\"PokemonSpecies.cs\" lineNumbers=\"true\" %} <pre><code>class PokemonSpecies\n{\n  [JsonPropertyName(\"name\")]\n  public string Name {get; set;}\n\n  [JsonPropertyName(\"url\")]\n  public string Url {get; set;}\n}\n</code></pre></p> <p>{% code title=\"Pokemon.cs\" lineNumbers=\"true\" %} <pre><code>class Pokemon\n{\n  [JsonPropertyName(\"name\")]\n  public string Name {get; set;}\n\n  [JsonPropertyName(\"species\")]\n  public PokemonSpecies Species {get; set;}\n}\n</code></pre></p>"},{"location":"filhantering/serialisering/xml-serialisering/","title":"XML-serialisering","text":""},{"location":"filhantering/serialisering/xml-serialisering/#bibliotek","title":"Bibliotek","text":"<p>L\u00e4gg till dessa using-statements:</p> <p>{% code lineNumbers=\"true\" %} <pre><code>using System.Xml.Serialization;\nusing System.IO;\n</code></pre></p>"},{"location":"filhantering/serialisering/xml-serialisering/#klassdesign","title":"Klassdesign","text":"<p>Klassen vars instanser ska kunna serialiseras m\u00e5ste vara public.</p> <p>{% code title=\"Spaceship.cs\" lineNumbers=\"true\" %} <pre><code>public class Spaceship\n{\n  // L\u00e4gg som vanligt in variabler, properties, metoder etc h\u00e4r\n}\n</code></pre></p> <p>Det \u00e4r ocks\u00e5 enbart publika variabler samt properties med publika getters och setters som serialiseras.</p> <p>Om du ska deserialisera XML-kod som du f\u00e5r fr\u00e5n n\u00e5got annat st\u00e4lle och inte designat sj\u00e4lv, s\u00e5 beh\u00f6ver du vara noga med att matcha namnet p\u00e5 dina publika variabler/properties mot XML-filens. Serialiseringsprocessen \u00e4r dock inte k\u00e4nslig vad g\u00e4ller stora och sm\u00e5 bokst\u00e4ver.</p> Spaceship.csSpaceship.xml <p>{% code lineNumbers=\"true\" %} <pre><code>public class Spaceship\n{\n public int Hp {get; set;} = 100;\n public int MaxHp {get; set;} = 100;\n public int Speed {get; set;} = 2;\n}\n</code></pre></p> <p>{% code lineNumbers=\"true\" %} <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Spaceship xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n           xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n &lt;hp&gt;100&lt;/hp&gt;\n &lt;maxHp&gt;100&lt;/maxHp&gt;\n &lt;speed&gt;2&lt;/speed&gt;\n&lt;/Spaceship&gt;\n</code></pre></p>"},{"location":"filhantering/serialisering/xml-serialisering/#xmlserializer","title":"XmlSerializer","text":"<p>F\u00f6r att kunna serialisera instanser till XML beh\u00f6vs en XML-serialiserare, specialbyggd f\u00f6r att serialisera instanser av just den klassen.</p> <pre><code>XmlSerializer shipSerializer = new XmlSerializer(typeof(Spaceship));\n</code></pre> <p>Tyv\u00e4rr \u00e4r XmlSerializern inte skriven som en generisk klass, s\u00e5 ist\u00e4llet m\u00e5ste man anv\u00e4nda typeof f\u00f6r att meddela vilken klass det \u00e4r serialiseraren ska specialisera sig p\u00e5.</p>"},{"location":"filhantering/serialisering/xml-serialisering/#serialize","title":"Serialize()","text":"<p>N\u00e4r vi har en serialiserare s\u00e5 kan vi anv\u00e4nda den f\u00f6r att serialisera en instans av en klass.</p> <p>Beroende p\u00e5 om man vill ha ut XML-koden till en string eller till en fil beh\u00f6vs en StringWriter eller en FileStream.</p> StringWriterFileStream <p>{% code lineNumbers=\"true\" %} <pre><code>Spaceship myShip = new Spaceship();\n\nStringWriter textWriter = new StringWriter();\n\nshipSerializer.Serialize(textWriter, myShip);\n\ntextWriter.Close();\n</code></pre></p> <p>{% code lineNumbers=\"true\" %} <pre><code>Spaceship myShip = new Spaceship();\n\nFileStream file = File.Open(@\"ship.xml\", FileMode.OpenOrCreate);\n\nshipSerializer.Serialize(file, myShip);\n\nfile.Close();\n</code></pre></p> <p>Resultatet av denna kod blir att XML-koden l\u00e4ngre upp p\u00e5 den h\u00e4r sidan sparas ner i ship.xml.</p> <p>Samma kod kan skrivas s\u00e5 h\u00e4r, med hj\u00e4lp av ett using-statement:</p> StringWriterFileStream <p>{% code lineNumbers=\"true\" %} <pre><code>Spaceship myShip = new Spaceship();\n\nusing (StringWriter textWriter = new StringWriter())\n{\n  shipSerializer.Serialize(textWriter, myShip);\n}\n</code></pre></p> <p>{% code lineNumbers=\"true\" %} <pre><code>Spaceship myShip = new Spaceship();\n\nusing (FileStream file = File.Open(@\"ship.xml\", FileMode.OpenOrCreate))\n{\n  shipSerializer.Serialize(file, myShip);\n}\n</code></pre></p>"},{"location":"filhantering/serialisering/xml-serialisering/#deserialize","title":"Deserialize()","text":"<p>Serialiseraren kan ocks\u00e5 anv\u00e4ndas f\u00f6r att omvandla XML-text till en instans av klassen.</p> <p>Beroende p\u00e5 om XML-koden finns i en string eller till en fil beh\u00f6vs en StringReader eller en FileStream.</p> StringReaderFileStream <p>{% code lineNumbers=\"true\" %} <pre><code>Spaceship myShip; // Variabeln resultatet lagras i\n\n// xmlText \u00e4r en variabel som inneh\u00e5ller XML-data\nStringReader textReader = new StringReader(xmlText);\n\nmyShip = (Spaceship) shipSerializer.Deserialize(textReader);\n\ntextReader.Close();\n</code></pre></p> <p>{% code lineNumbers=\"true\" %} <pre><code>Spaceship myShip; // Variabeln resultatet lagras i\n\n// ship.xml \u00e4r en fil som inneh\u00e5ller XML-data\nFileStream file = File.Open(@\"ship.xml\", FileMode.OpenOrCreate);\n\nmyShip = (Spaceship) shipSerializer.Deserialize(textReader);\n\nfile.Close();\n</code></pre></p> <p>Eftersom serializern inte \u00e4r skriven som en generisk klass s\u00e5 m\u00e5ste vi aktivt casta det Deserialize returnerar till den klass vi vill att det ska vara (och vet att det borde vara), i det h\u00e4r fallet Spaceship.</p> <p>Samma kod kan skrivas s\u00e5 h\u00e4r, med hj\u00e4lp av ett using-statement:</p> StringReaderFileStream <p>{% code lineNumbers=\"true\" %} <pre><code>Spaceship myShip;\n\nusing (StringReader textReader = new StringReader(xmlText))\n{\n  myShip = (Spaceship) shipSerializer.Deserialize(textReader);\n}\n</code></pre></p> <p>{% code lineNumbers=\"true\" %} <pre><code>Spaceship myShip;\n\nusing (FileStream file = File.Open(@\"ship.xml\", FileMode.OpenOrCreate))\n{\n  myShip = (Spaceship) shipSerializer.Deserialize(textReader);\n}\n</code></pre></p>"},{"location":"filhantering/serialisering/xml-serialisering/#xml-serialisering-av-samlingar-arrayer-listor","title":"XML-serialisering av samlingar (arrayer, listor)","text":"<p>Det g\u00e5r utm\u00e4rkt att serialisera \u00e4ven listor.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>List&lt;Spaceship&gt; fleet = new List&lt;Spaceship&gt;();\n\nfleet.Add(new Spaceship());\nfleet.Add(new Spaceship());\nfleet.Add(new Spaceship());\n\nXmlSerializer fleetSerializer = new XmlSerializer(typeof(List&lt;Spaceship&gt;));\n\nusing (FileStream file = File.Open(@\"fleet.xml\", FileMode.OpenOrCreate))\n{\n  shipSerializer.Serialize(file, fleet);\n}\n</code></pre></p> <p>Precis som med andra variabler och properties s\u00e5 kommer publika samlingar av instanser som lagrats i en instans ocks\u00e5 serialiseras.</p> Fleet.csFleet.xml <p>{% code lineNumbers=\"true\" %} <pre><code>public class Fleet\n{\n  public List&lt;Spaceship&gt; ships = new List&lt;Spaceship&gt;();\n}\n</code></pre></p> <p>{% code lineNumbers=\"true\" %} <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Fleet xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n &lt;ships&gt;\n   &lt;Spaceship&gt;\n     &lt;hp&gt;100&lt;/hp&gt;\n     &lt;maxHp&gt;100&lt;/maxHp&gt;\n     &lt;speed&gt;2&lt;/speed&gt;\n   &lt;/Spaceship&gt;\n   &lt;Spaceship&gt;\n     &lt;hp&gt;100&lt;/hp&gt;\n     &lt;maxHp&gt;100&lt;/maxHp&gt;\n     &lt;speed&gt;2&lt;/speed&gt;\n   &lt;/Spaceship&gt;\n &lt;/ships&gt;\n&lt;/Fleet&gt;\n</code></pre></p>"},{"location":"grundlaeggande/anvaenda-bibliotek-using/","title":"Anv\u00e4nda bibliotek (using)","text":"<p>C# har ett antal inbyggda kodbibliotek. Man kan l\u00e4gga till ytterligare bibliotek i ett specifikt projekt genom NuGet-paket.</p>"},{"location":"grundlaeggande/anvaenda-bibliotek-using/#using","title":"Using","text":"<p>Skrivs h\u00f6gst upp i en cs-fil f\u00f6r att deklarera att inneh\u00e5llet i ett visst bibliotek ska anv\u00e4ndas.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>using System;\nusing System.Net;\nusing System.Collections.Generic;\nusing System.Text.Json;\n</code></pre></p> <p>Man kan alltid anv\u00e4nda sig av bibliotekens inneh\u00e5ll utan att skriva using, men d\u00e5 m\u00e5ste man skriva hela bibliotekets namn varje g\u00e5ng.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Utan \"using System\":\nSystem.Console.WriteLine(\"Hello\");\n\n// Med \"using System\":\nConsole.WriteLine(\"Hello\");\n\n// Utan \"using System.Collections.Generic\":\nSystem.Collections.Generic.List&lt;string&gt; list = new System.Collections.Generic.List&lt;string&gt;();\n\n// Med \"using System.Collections.Generic\":\nList&lt;string&gt; list = new List&lt;string&gt;();\n</code></pre></p>"},{"location":"grundlaeggande/anvaenda-bibliotek-using/#global-using-net-6","title":"Global using (.NET 6)","text":"<p>I .NET 6 introduceras globala using-statements. De m\u00e5ste skrivas ovanf\u00f6r alla vanliga using-statements.</p> <pre><code>global using System.IO;\n</code></pre> <p>De g\u00f6r att man bara beh\u00f6ver skriva varje using-statement en g\u00e5ng per projekt. L\u00e4mpligtvis samlar man dem d\u00e5 i samma fil.</p>"},{"location":"grundlaeggande/anvaenda-bibliotek-using/#implicit-using-net-6","title":"Implicit using (.NET 6)","text":"<p>I .NET 6 ing\u00e5r som standard vissa globala using-statements utan att man beh\u00f6ver skriva dem. I konsollprogram ing\u00e5r:</p> <p>{% code lineNumbers=\"true\" %} <pre><code>using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\n</code></pre></p>"},{"location":"grundlaeggande/anvaenda-bibliotek-using/#nuget-gallery","title":"NuGet Gallery","text":"<p>NuGet Gallery \u00e4r ett Visual Studio Code-till\u00e4gg som g\u00f6r att man kan s\u00f6ka efter och l\u00e4gga till nya bibliotek till sitt projekt. De \u00e4r packeterade som NuGet-paket, och Gallery hj\u00e4lper till att hitta, laddaner och installera dem.</p> <p>Man kommer \u00e5t till\u00e4gget genom att trycka F1 och s\u00f6ka efter det.</p> <p></p> <p>D\u00e4refter s\u00f6ker man efter det bibliotek man vill ha, till exempel Raylib eller Restsharp. Man markerar biblioteket man vill ha, sedan kan man trycka p\u00e5 \"Install\"-l\u00e4nken som st\u00e5r bredvid ens projekts csproj-fil i h\u00f6gerspalten.</p> <p></p>"},{"location":"grundlaeggande/anvaenda-bibliotek-using/#nuget-via-terminalen","title":"NuGet via terminalen","text":"<p>Om man k\u00e4nner till NuGet-paketets namn s\u00e5 kan man anv\u00e4nda terminalkommandon ist\u00e4llet. Man placerar sig d\u00e5 f\u00f6rst i mappen d\u00e4r projektets csproj-fil ligger och sedan skriver man till exempel:</p> <pre><code>dotnet add package Raylib-cs\n</code></pre> <p>D\u00e5 kommer dotnet att uppt\u00e4cka csproj-filen, l\u00e4gga in en referens till biblioteket i den, och sedan se till att NuGet-paketet laddas ner och packas upp.</p>"},{"location":"grundlaeggande/begrepp/","title":"Begrepp","text":""},{"location":"grundlaeggande/begrepp/#grundlaggande","title":"Grundl\u00e4ggande","text":""},{"location":"grundlaeggande/begrepp/#datatyp","title":"Datatyp","text":"<p>En sorts information, till exempel heltal, decimaltal, text, datum, vektor.</p>"},{"location":"grundlaeggande/begrepp/#variabel","title":"Variabel","text":"<p>En \"beh\u00e5llare\" som kan tilldelas ett inneh\u00e5ll i form av ett v\u00e4rde. Variabler har alltid en datatyp.</p>"},{"location":"grundlaeggande/begrepp/#sekvens","title":"Sekvens","text":"<p>Kod som k\u00f6rs uppifr\u00e5n och ner.</p>"},{"location":"grundlaeggande/begrepp/#selektion","title":"Selektion","text":"<p>En del av koden d\u00e4r k\u00f6rningen kan \"hoppa ner\" beroende p\u00e5 n\u00e5got villkor, t.ex. genom en if-sats.</p>"},{"location":"grundlaeggande/begrepp/#iteration","title":"Iteration","text":"<p>En del av koden d\u00e4r k\u00f6rningen kan \"hoppa upp\" beroende p\u00e5 n\u00e5got villkor, t.ex. genom en while-loop</p>"},{"location":"grundlaeggande/begrepp/#kodblock","title":"Kodblock","text":"<p>Ett stycke kod som avgr\u00e4nsas fr\u00e5n resten av programmet genom en { innan blocket och en } efter blocket.</p>"},{"location":"grundlaeggande/begrepp/#metod","title":"Metod","text":"<p>Ett namngivet kodblock, lite som ett separat program som kan k\u00f6ras av andra delar av koden.</p>"},{"location":"grundlaeggande/begrepp/#returnering","title":"Returnering","text":"<p>Att f\u00f6ra ut data ur en metod s\u00e5 att datan kan anv\u00e4ndas i koden som anropade metoden.</p>"},{"location":"grundlaeggande/begrepp/#parameter","title":"Parameter","text":"<p>Variabel-liknande, anv\u00e4nds f\u00f6r att f\u00f6ra in data i metoder. </p>"},{"location":"grundlaeggande/begrepp/#array","title":"Array","text":"<p>En datatyp som inneh\u00e5ller flera av n\u00e5got, t.ex. flera tal, eller flera texter.</p>"},{"location":"grundlaeggande/begrepp/#scope","title":"Scope","text":"<p>Det sammanhang som en variabel eller en metod existerar inom; generellt existerar de bara inom det kodblock d\u00e4r de skapats.</p>"},{"location":"grundlaeggande/begrepp/#objektorientering","title":"Objektorientering","text":""},{"location":"grundlaeggande/begrepp/#klass","title":"Klass","text":"<p>En ritning f\u00f6r hur en kategori av objekt ska se ut \u2013 vilka variabler och metoder de ska inneh\u00e5lla. Exempel: Fiender ska ha hp och kunna f\u00f6rflytta sig.</p>"},{"location":"grundlaeggande/begrepp/#instans","title":"Instans","text":"<p>Ett objekt som skapats baserat p\u00e5 en klass. Exempel: en specifik fiende p\u00e5 sk\u00e4rmen.</p>"},{"location":"grundlaeggande/begrepp/#arv","title":"Arv","text":"<p>Att man kan l\u00e5ta klasser bygga p\u00e5 varandra. Exempel: en Goomba \u00e4r en sorts Enemy. Goomba-klassen f\u00e5r alla variabler och metoder som Enemy-klassen har.</p>"},{"location":"grundlaeggande/begrepp/#basklass","title":"Basklass","text":"<p>En klass som en eller flera andra klasser \u00e4rver fr\u00e5n.</p>"},{"location":"grundlaeggande/begrepp/#subklass-child-class","title":"Subklass / child class","text":"<p>En klass som \u00e4rver fr\u00e5n en annan klass.</p>"},{"location":"grundlaeggande/begrepp/#konstruktor","title":"Konstruktor","text":"<p>En metod som automatiskt anropas n\u00e4r det skapas en instans av klassen konstruktorn tillh\u00f6r.</p>"},{"location":"grundlaeggande/begrepp/#inkapsling","title":"Inkapsling","text":"<p>Att man \"kapslar in\" variabler som ing\u00e5r i en klass, s\u00e5 att de inte kan \u00e4ndras utifr\u00e5n direkt \u2013 t.ex. att man har en hp-variabel som bara kan \u00e4ndras genom att man anropas klassens Hurt-metod och bara kan l\u00e4sas av genom att anropa en GetHP-metod. Detta g\u00f6r att den som designar klassen kan f\u00f6rhindra att variabeln ges felaktiga v\u00e4rden.</p>"},{"location":"grundlaeggande/begrepp/#polymorfism","title":"Polymorfism","text":"<p>N\u00e4rhelst en instans av en basklass ska lagras, t.ex. i en variabel, s\u00e5 kan man ist\u00e4llet ange en instans av en subklass till den basklassen. Exempel: en variabel som har datatypen Enemy kan anv\u00e4ndas f\u00f6r att lagra instanser av Enemy eller av Goomba, om Goomba \u00e4r en subklass till Enemy.</p>"},{"location":"grundlaeggande/begrepp/#filhantering","title":"Filhantering","text":""},{"location":"grundlaeggande/begrepp/#fil","title":"Fil","text":"<p>En avgr\u00e4nsad bit information p\u00e5 h\u00e5rddisken som f\u00e5tt ett namn och som ligger i en mapp.</p> <p>Filnamnet slutar n\u00e4stan alltid med en punkt och sedan n\u00e5gra tecken till, detta \u00e4r \"fil\u00e4ndelsen\" som Windows och andra operativsystem anv\u00e4nder f\u00f6r att best\u00e4mma vilket program som ska \u00f6ppnas n\u00e4r man dubbelklickar p\u00e5 den.</p>"},{"location":"grundlaeggande/begrepp/#mapp","title":"Mapp","text":"<p>En \"beh\u00e5llare\" i ett filsystem som kan inneh\u00e5lla filer eller andra mappar.</p>"},{"location":"grundlaeggande/begrepp/#serialisering","title":"Serialisering","text":"<p>Att omvandla ett objekt \u2013 ofta en instans av en klass \u2013 eller flera till ett strukturerat textformat, t.ex. XML eller JSON.</p>"},{"location":"grundlaeggande/begrepp/#deserialisering","title":"Deserialisering","text":"<p>Att omvandla strukturerad text (t.ex. XML eller JSON) som beskriver ett eller flera objekt till en instans av en klass.</p>"},{"location":"grundlaeggande/begrepp/#natverk","title":"N\u00e4tverk","text":""},{"location":"grundlaeggande/begrepp/#klient","title":"Klient","text":"<p>Ett program som kontaktar en server f\u00f6r att f\u00e5 tillg\u00e5ng till n\u00e5gon form av tj\u00e4nst eller information. Anv\u00e4nds ibland ocks\u00e5 om datorer som har s\u00e5dana program installerade.</p> <p>Exempel: Chrome.</p>"},{"location":"grundlaeggande/begrepp/#server","title":"Server","text":"<p>Ett program som tillhandah\u00e5ller n\u00e5gon form av tj\u00e4nst \u00e5t klienter. Anv\u00e4nds ibland ocks\u00e5 om datorer som har s\u00e5dana program installerade och som mest finns till f\u00f6r att just tillhandah\u00e5lla tj\u00e4nster (och inte t.ex. spelas p\u00e5).</p> <p>Exempel: Apache web server</p>"},{"location":"grundlaeggande/begrepp/#ip-adress","title":"IP-adress","text":"<p>Address som identifierar en dator p\u00e5 ett n\u00e4tverk. \u00c4nnu \u00e4r IPv4 vanligast; exempel p\u00e5 IP-adress enligt IPv4 \u00e4r 192.168.0.1. Fyra siffror 0\u2013255 med punkter mellan. IPv6 har st\u00f6rre tal och skriv som fyra grupper av hexadecimala tal t.ex. 2001:db8::8a2e:370:7334.</p> <p>Vi anv\u00e4nder IP-adresser f\u00f6r att best\u00e4mma vilken dator vi ska f\u00f6rs\u00f6ka koppla upp oss mot.</p>"},{"location":"grundlaeggande/begrepp/#api","title":"API","text":"<p>Application Programming Interface. Hur program pratar med varandra. Man kan t.ex. s\u00e4ga att PokeApi har ett RESTful API som l\u00e5ter anv\u00e4ndare h\u00e4mta information om Pokemons</p>"},{"location":"grundlaeggande/begrepp/#rest","title":"REST","text":"<p>REpresentational State Transfer. Beskriver en standard f\u00f6r kommunikation mellan en klient och en server; i v\u00e5rt fall f\u00f6r att beskriva hur man utf\u00f6r CRUD-operationer p\u00e5 en server med hj\u00e4lp av HTTP-standarden. Ett API som f\u00f6ljer REST-standarden kallas f\u00f6r ett RESTful API.</p>"},{"location":"grundlaeggande/begrepp/#crud","title":"CRUD","text":"<p>Create, Read, Update och Delete. De fyra saker man vanligtvis beh\u00f6ver kunna g\u00f6ra med inneh\u00e5llet i en databas eller annan lagring.</p>"},{"location":"grundlaeggande/boolska-satser/","title":"Boolska satser","text":"<p>En boolsk sats \u00e4r en formel som resulterar i antingen ett sant eller ett falskt v\u00e4rde \u2013 ett bool-v\u00e4rde.</p> <pre><code>int i = Random.Shared.Next(10);\n\n// Den boolska satsen blir true om i \u00e4r h\u00f6gre \u00e4n 2 och samtidigt l\u00e4gre \u00e4n 8.\n// Resultatet av den boolska satsen sparas i result\nbool result = i &gt; 2 &amp;&amp; i &lt; 8;\n</code></pre> <p>Man kan inkludera allt m\u00f6jligt \u2013 j\u00e4mf\u00f6relser med boolska och logiska operatorer, bool-variabler, metoder som returnerar boolska v\u00e4rden.</p> <pre><code>bool jumpThisFrame = IsGrounded() &amp;&amp; hasReleasedJumpButton &amp;&amp; jumpCharge &gt; 0;\n</code></pre> <p>Boolska satser anv\u00e4nds ofta i if-satser, while-loopar och liknande f\u00f6r att g\u00f6ra flera j\u00e4mf\u00f6relser samtidigt.</p> <pre><code>int r = Random.Shared.Next(10);\n\nwhile (r &lt; 2 || r &gt; 8)\n{\n  Console.WriteLine($\"Sorry, fick en {r} s\u00e5 jag \u00e4r fast i loopen en stund till\");\n}\n</code></pre> <p>Det \u00e4r en teknik som ofta anv\u00e4nds som del av n\u00e4r man vill begr\u00e4nsa input f\u00f6r anv\u00e4ndaren</p>"},{"location":"grundlaeggande/datum-och-tid/","title":"Datum och tid","text":""},{"location":"grundlaeggande/datum-och-tid/#datetime","title":"DateTime","text":"<p>Datatyp \u2013 mer exakt en klass \u2013 som lagrar tidpunkter.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Datumet 10:e december 1815\nDateTime lovelaceBirthday = new DateTime(1815, 12, 10);\n\n// Tidpunkten 14:32:00 p\u00e5 datumet 1969-07-16\nDateTime apolloEleven = new DateTime(1969, 8, 16, 14, 32, 0);\n</code></pre></p>"},{"location":"grundlaeggande/datum-och-tid/#egenskaper","title":"Egenskaper","text":"<p>Man kan f\u00e5 ut information ur DateTime-objekt genom att l\u00e4sa av dess egenskaper. (Alla dessa \u00e4r i sj\u00e4lva verket properties.)</p> <p>{% code lineNumbers=\"true\" %} <pre><code>lovelaceBirthday.DayOfWeek; // vilken dag i veckan det \u00e4r\nlovelaceBirthday.Year;\nlovelaceBirthday.Month;\nlovelaceBirthday.Day; // Dag i m\u00e5naden\napolloEleven.Hour; // 14\napolloEleven.Minute; // 32\napolloEleven.Second; // 0\napolloEleven.Millisecond; // 0\n</code></pre></p>"},{"location":"grundlaeggande/datum-och-tid/#metoder","title":"Metoder","text":"<p>Man kan justera ett DateTime-objekts inneh\u00e5ll genom att anropa dess metoder.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Flytta fram klockan\napolloEleven.AddYears(1);\napolloEleven.AddMonths(2);\napolloEleven.AddDays(14);\napolloEleven.AddHours(2);\napolloEleven.AddMinutes(30);\napolloEleven.AddSeconds(10);\napolloEleven.AddMilliseconds(300);\n</code></pre></p> <p>Alla dessa kan ocks\u00e5 anv\u00e4ndas f\u00f6r att flytta klockan bak\u00e5t \u2013 d\u00e5 stoppar man helt enkelt in negativa tal.</p>"},{"location":"grundlaeggande/datum-och-tid/#datetimenow","title":"DateTime.Now","text":"<p>Tidpunkten just nu. (\u00c4r egentligen en static property)</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Spara en kopia av tidpunkten \"just nu\" i variabeln startTime\nDateTime startTime = DateTime.Now;\n</code></pre></p>"},{"location":"grundlaeggande/datum-och-tid/#timespan","title":"TimeSpan","text":"<p>Datatyp som beskriver ett tidsspann, till exempel \"tiden mellan 26:e mars 1926 och 27:e februari 2015\".</p> <p>Om man subtraherar en DateTime fr\u00e5n en annan DateTime s\u00e5 blir resultatet en TimeSpan.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>DateTime leonardBirth = new DateTime(1926, 3, 26);\nDateTime leonardDeath = new DateTime(2015, 2, 27);\n\nTimeSpan life = leonardDeath - leonardBirth;\n</code></pre></p>"},{"location":"grundlaeggande/datum-och-tid/#tidsenheter-i-en-timespan","title":"Tidsenheter i en TimeSpan","text":"<p>{% code lineNumbers=\"true\" %} <pre><code>// Dagar\nConsole.WriteLine(life.Days); // en int: 32480 hela dagar i spannet\nConsole.WriteLine(life.TotalDays); // en double, som inkluderar delar av dagar\n\n// Timmar\nConsole.WriteLine(life.Hours); // Timme-komponenten f\u00f6r spannet. G\u00e5r mellan -23 och 23.\nConsole.WriteLine(life.TotalHours); // En double: 779520 hela timmar i spannet\n\n// Minuter\nConsole.WriteLine(life.Minutes); // Minut-komponenten f\u00f6r spannet. G\u00e5r mellan -59 och 59.\nConsole.WriteLine(life.TotalMinutes); // En double: 46771200 minuter i spannet\n\n// Sekunder\nConsole.WriteLine(life.Seconds); // Timme-komponenten f\u00f6r spannet. G\u00e5r mellan -59 och 59.\nConsole.WriteLine(life.TotalSeconds); // En double: 2806272000 sekunder i spannet\n\n// Millisekunder\nConsole.WriteLine(life.Milliseconds); // Timme-komponenten f\u00f6r spannet. G\u00e5r mellan -59 och 59.\nConsole.WriteLine(life.TotalMilliseconds); // En double: 2806272000000 millisekunder i spannet\n</code></pre></p>"},{"location":"grundlaeggande/datum-och-tid/#att-mata-tid","title":"Att m\u00e4ta tid","text":"<p>Ett vanligt anv\u00e4ndningsomr\u00e5de f\u00f6r DateTime och TimeSpan \u00e4r att m\u00e4ta hur l\u00e5ng tid n\u00e5got tar.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>DateTime start = DateTime.Now\n\n// N\u00e5gon tung och jobbig kod k\u00f6rs h\u00e4r\n\nDateTime end = DateTime.Now\n\nTimeSpan span = end - start;\n\nConsole.WriteLine(\"Det tog:\");\nConsole.WriteLine($\"{span.Hours} timmar\");\nConsole.WriteLine($\"{span.Minutes} minuter\");\nConsole.WriteLine($\"{span.Seconds} sekunder\");\nConsole.WriteLine($\"{span.Milliseconds} millisekunder\");\n</code></pre></p>"},{"location":"grundlaeggande/delegates/","title":"Delegates, events och lambdas","text":"<p>Info</p> <p>OBS: Lite \u00f6verkurs =)</p> <p>Delegates \u00e4r ett s\u00e4tt att kunna g\u00f6ra s\u00e5 att variabler pekar mot metoder ist\u00e4llet f\u00f6r mot v\u00e4rden eller objekt i minnet. De \u00e4r lite \u00f6verkurs, men ganska anv\u00e4ndbara.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Skapar en delegate som passar in p\u00e5 metoder som \n// inte tar emot n\u00e5gra parametrar eller returnerar n\u00e5got.\ndelegate void Task(); \n\n// En metod som passar in p\u00e5 delegaten\nstatic void SayHello() {\n  System.WriteLine(\"Hello!\");\n}\n\nstatic void Main(string[] args)\n{\n  Task t = SayHello; // Lagra en referens till SayHello-metoden i \"t\"\n  t(); // Att k\u00f6ra t som en metod \u00e4r nu samma sak som att k\u00f6ra SayHello.\n}\n</code></pre></p> <p>N\u00e4r man skapar en delegat s\u00e5 beskriver den en metodprofil. Man kan s\u00e4ga att varje delegat beskriver en kategori av metoder.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// St\u00e4mmer in p\u00e5 metoder som tar emot en int-parameter och inte returnerar n\u00e5got.\ndelegate void DelegateOne(int y);\n\n// St\u00e4mmer in p\u00e5 metoder som returnerar en int utan att ta emot n\u00e5gra parametrar.\ndelegate int DelegateTwo();\n\n// St\u00e4mmer in p\u00e5 metoder som returnerar en float efter att ha tagit emot\n// en string och en int.\ndelegate float DelegateThree(string x, int y);\n</code></pre></p> <p>N\u00e4r man skapat sin delegat anv\u00e4nds den allts\u00e5 som om den vore en datatyp. N\u00e4r man lagrar metoderna i den s\u00e5 ser man till att inte anv\u00e4nda () efter metodnamnet, f\u00f6r d\u00e5 k\u00f6rs ju metoden ist\u00e4llet, innan tilldelningen.</p> <pre><code>DelegateOne test = MethodOne;\n</code></pre>"},{"location":"grundlaeggande/delegates/#action","title":"Action","text":"<p>En Action \u00e4r en generisk delegat som passar in p\u00e5 metoder som inte returnerar ett v\u00e4rde. Om man vill matcha metoder som tar emot parametrar kan dessa anges mellan &lt;&gt;.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>static void Hello()\n{\n  Console.WriteLine(\"Hello\");\n}\n\nstatic void HelloTo(string target)\n{\n  Console.WriteLine($\"Hello {target}\");\n}\n\nAction example1 = Hello;\nAction&lt;string&gt; example2 = HelloTo\n\nexample1();\nexample2(\"Micke\");\n</code></pre></p>"},{"location":"grundlaeggande/delegates/#dictionary-med-actions","title":"Dictionary med Actions","text":"<p>Ett exempel p\u00e5 hur man kan anv\u00e4nda delegater.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Dictionary&lt;string, Action&gt; actions = new Dictionary&lt;string, Action&gt;();\n\nactions.Add(\"first\", DoFirst);\nactions.Add(\"second\", DoSecond);\n\nactions[\"first\"](); // K\u00f6r DoFirst-metoden\n\n\nstatic void DoFirst()\n{\n  /* .. */\n}\n\nstatic void DoSecond()\n{\n  /* .. */\n}\n</code></pre></p>"},{"location":"grundlaeggande/delegates/#func","title":"Func","text":"<p>Func \u00e4r en generisk delegat som matchar metoder som returnerar n\u00e5got. En eller flera datatyper anges inom &lt;&gt;. Anges flera s\u00e5 \u00e4r den sista alltid returtypen, resten \u00e4r parametrar.</p> <pre><code>static int Addition(int a, int b)\n{\n  return a + b;\n}\n\nstatic string MakeStrengthString(int str)\n{\n  return $\"Strength: {str}\";\n}\n\nFunc&lt;int, int, int&gt; math = Addition;\n\nFunc&lt;int, string&gt; statDisplay = MakeStrengthString;\n\nint y = math(3,4);\n\nstring strength = statDisplay(14);\n</code></pre>"},{"location":"grundlaeggande/delegates/#anonyma-metoder-i-delegatvariabler","title":"Anonyma metoder i delegatvariabler","text":"<p>Anonyma metoder saknar eget namn.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>static void Main(string[] args)\n{\n  Action t = delegate()\n    {\n      System.WriteLine(\"Hello!\");\n    }\n\n  t();\n}\n</code></pre></p> <p>De \u00e4r praktiska n\u00e4r man aldrig faktiskt kommer att anropa metoden med dess eget namn, utan bara vill kunna l\u00e4gga in den i en variabel eller en lista.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Dictionary&lt;string, Action&gt; actions = new Dictionary&lt;string, Action&gt;();\n\nactions.Add(\"greet\", \n  delegate ()\n  {\n    Console.WriteLine(\"Hello\");\n  }\n);\n\nactions[\"greet\"]();\n</code></pre></p>"},{"location":"grundlaeggande/delegates/#multicasting-delegat-variabler-med-flera-metoder","title":"Multicasting: delegat-variabler med flera metoder","text":"<p>Om man vill att flera metoder ska k\u00f6ras n\u00e4r en delegat-variabel anropas s\u00e5 kan man kombinera delegater f\u00f6r att skapa s.k. multicast-delegater.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Action multiCaster = delegate() { Console.WriteLine(\"Hello\"); };\n\nmultiCaster += delegate() { Console.WriteLine(\"World\"); };\n\nmultiCaster(); // Skriver f\u00f6rst ut Hello, sedan World\n</code></pre></p> <p>{% code lineNumbers=\"true\" %} <pre><code>Action good = delegate() { Console.WriteLine(\"Good\"); };\n\nAction bye = delegate() { Console.WriteLine(\"Bye\"); };\n\nAction morning = delegate() { Console.WriteLine(\"Morning\"); };\n\nAction goodMorning = good + morning;\nAction goodBye = good + bye;\n\ngoodMorning(); // Skriver ut \"Good\" och \"Morning\"\ngoodBye(); // Skriver ut \"Good\" och \"Bye\"\n</code></pre></p> <p>Att l\u00e4gga till en metod till en multicast-delegat kallas subscribing, och att ta bort en metod fr\u00e5n en multicast-delegat kallas unsubscribing.</p>"},{"location":"grundlaeggande/delegates/#events","title":"Events","text":"<p>Nackdelen med multicast-delegater \u00e4r att den som har tillg\u00e5ng till dem inte bara kan l\u00e4gga till nya metoder i dem, utan ocks\u00e5 aktivera dem och g\u00f6ra st\u00f6rre \u00e4ndringar \u2013 som att till exempel \u00e4ndra dem till null.</p> <p>Med en event kan den som har tillg\u00e5ng utifr\u00e5n bara l\u00e4gga till och ta bort metoder (subscribe/unsubscribe)</p> <p>Info</p> <p>Events kan bara existera i klasser, och de kan bara anropas (invoke) inifr\u00e5n den klassen</p> <p>{% code title=\"Avatar.cs\" lineNumbers=\"true\" %} <pre><code>public class Avatar\n{\n  public event Action OnDeath; // OBS: nyckelordet \"event\"\n\n  public Avatar()\n  {\n    OnDeath += DeathMessage; // Subscribe:a klassmetoden DeathMessage\n  }\n\n  public void Update()\n  {\n    OnDeath.Invoke(); // Aktivera (invoke) eventet\n  }\n\n  public void DeathMessage() { Console.WriteLine(\"YOU DIED\"); }\n}\n</code></pre></p> <p>{% code title=\"Program.cs\" lineNumbers=\"true\" %} <pre><code>Avatar p = new Avatar();\n\nAction PauseGame = delegate() { Console.WriteLine(\"Game is paused\"); };\n\n// Subscribe:a den lokala metoden PauseGame till eventet OnDeath\np.OnDeath += PauseGame;\n\np.Update(); // K\u00f6r Update-metoden, som i sin tur invoke:ar eventet\n</code></pre></p>"},{"location":"grundlaeggande/delegates/#lambdas","title":"Lambdas","text":"<p>Lambda-uttryck \u00e4r, enkelt uttryckt, ett s\u00e4tt att skriva v\u00e4ldigt enkla anonyma metoder (anonyma delegater) vars returv\u00e4rden \u00e4r direkta resultat av deras parametrar. Ett lambda-uttryck best\u00e5r av en parentes d\u00e4r den anonyma metodens parameterv\u00e4rden anges, en =&gt; och slutligen en enkel utr\u00e4kning som motsvarar det som ska returneras fr\u00e5n metoden.</p> <p>Utr\u00e4kningen kan bytas ut mot ett kodblock som returnerar ett v\u00e4rde, om mer omfattande </p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Delegat som passar alla metoder som tar emot tv\u00e5 int-parametrar och\n// som returnerar en int som resultat\ndelegate int Calculation(int x, int y);\n\nstatic void Main(string[] args)\n{\n  // Lambda-uttrycket =&gt; har tv\u00e5 inputs p\u00e5 v\u00e4nster sida, \n  // och utr\u00e4kningen p\u00e5 h\u00f6ger sida resulterar i en int.\n  // D\u00e4rf\u00f6r passar lambda-uttrycket in p\u00e5 delegaten Calculation.\n  Calculation c = (xInput, xOutput) =&gt; xInput * xOutput;\n\n  int result = c(10, 5);\n\n  // Detta g\u00f6r samma sak som ovan, men med ett kodblock ist\u00e4llet \n  // f\u00f6r en ren ber\u00e4kning\n  Calculation c2 = (xInput, xOutput) =&gt; {return xInput * xOutput};\n}\n</code></pre></p> <p>Lambdas anv\u00e4nds v\u00e4ldigt ofta n\u00e4r man till exempel vill filtrera en lista p\u00e5 n\u00e5got s\u00e4tt.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>List&lt;int&gt; numbers = new List&lt;int&gt;() {2,3,4,5,6};\n\n// FindAll returnerar en lista med alla f\u00f6rem\u00e5l i listan som matchar ett visst\n// kriterium. Kriteriet ska vara utformat som en metod, som tar emot ett\n// f\u00f6rem\u00e5l av r\u00e4tt datatyp som parameter och returnerar en bool.\n// lambda-uttrycket nedan tar emot en input p\u00e5 v\u00e4nster sida (n) och uttrycket\n// p\u00e5 h\u00f6ger sida \u00e4r en boolsk j\u00e4mf\u00f6relse.\n// D\u00e4rf\u00f6r kommer lowNumbers att inneh\u00e5lla en lista med alla integers fr\u00e5n\n// numbers, som \u00e4r &lt; 4.\nList&lt;int&gt; lowNumbers = numbers.FindAll(n =&gt; n &lt; 4);\n</code></pre></p> <p>De kan ocks\u00e5 anv\u00e4ndas till events och till multicast-delegates. Ofta anv\u00e4nds detta n\u00e4r det bara \u00e4r ganska lite kod som ska k\u00f6ras.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Avatar p = new Avatar();\n\np.OnDeath += () =&gt; Console.WriteLine(\"Game is paused\");\n</code></pre></p>"},{"location":"grundlaeggande/dotnet-i-terminalen/","title":"Dotnet i terminalen","text":"<p>Visual Studio Code \u00e4r i grunden bara ett program f\u00f6r att redigera text \u2013 allt annat sk\u00f6ts egentligen av andra, separata program. N\u00e4r man programmerar i C# s\u00e5 \u00e4r ett av de programmen dotnet.</p> <ul> <li>Varje g\u00e5ng ett program till exempel k\u00f6rs s\u00e5 anropar Code f\u00f6rst dotnet f\u00f6r att omvandla k\u00e4llkoden till k\u00f6rbara filer.</li> <li>Varje g\u00e5ng C# Dev Kit anv\u00e4nds f\u00f6r att skapa ett nytt projekt anropas dotnet med olika tillval f\u00f6r att skapa en solution och ett nytt tomt C#-projekt.</li> </ul> <p>Man kan ocks\u00e5 k\u00f6ra dotnet sj\u00e4lv, manuellt i terminalen / kommandotolken. Egentligen beh\u00f6vs inte Visual Studio Code \u2013 man kan skriva sin kod i Anteckningar eller n\u00e4stan vilket textredigeringsprogram som helst.</p>"},{"location":"grundlaeggande/dotnet-i-terminalen/#dotnet-list-sdks","title":"Dotnet --list-sdks","text":"<p>Skriver ut en lista p\u00e5 vilka dotnet-versioner som \u00e4r installerade p\u00e5 datorn.</p> <pre><code>PS C:\\Users\\krank&gt; dotnet --list-sdks\n5.0.408 [C:\\Program Files\\dotnet\\sdk]\n6.0.302 [C:\\Program Files\\dotnet\\sdk]\nPS C:\\Users\\krank&gt;\n</code></pre>"},{"location":"grundlaeggande/dotnet-i-terminalen/#dotnet-new","title":"Dotnet new","text":"<p>Skapa ett konsollprojekt (ProjectName.csproj) och tillh\u00f6rande filer i nuvarande mapp:</p> <pre><code>dotnet new console --name ProjectName\n</code></pre> <p>\"Console\" anger vilken av dotnets inbyggda C#-projektmallar som anv\u00e4nds.</p> <p>Skapa en solution (MySolution.sln) i nuvarande mapp:</p> <pre><code>dotnet new sln --name MySolution\n</code></pre>"},{"location":"grundlaeggande/dotnet-i-terminalen/#dotnet-run","title":"Dotnet run","text":"<p>Kompilerar och k\u00f6r projektet i den nuvarande mappen (eller solutionens prim\u00e4ra projekt):</p> <pre><code>dotnet run\n</code></pre>"},{"location":"grundlaeggande/dotnet-i-terminalen/#dotnet-add-package","title":"Dotnet add package","text":"<p>L\u00e4gger till ett nuget-paket till projektet.</p> <pre><code>dotnet add package Raylib-cs\n</code></pre>"},{"location":"grundlaeggande/dotnet-i-terminalen/#dotnet-restore","title":"Dotnet restore","text":"<p>Laddar ner saknade nuget-bibliotek (t.ex. Raylib) som projektet anv\u00e4nder. V\u00e4ldigt anv\u00e4ndbart eftersom det betyder att de biblioteken inte m\u00e5ste skickas med till andra som ska jobba med projektet.</p> <pre><code>dotnet restore\n</code></pre>"},{"location":"grundlaeggande/dotnet-i-terminalen/#dotnet-sln-add","title":"Dotnet sln add","text":"<p>L\u00e4gg till ett projekt (ProjectName.csproj) i den solution som finns i den nuvarande mappen:</p> <pre><code>dotnet sln add .\\ProjectName\\ProjectName.csproj\n</code></pre>"},{"location":"grundlaeggande/egna-metoder/","title":"Metoder","text":""},{"location":"grundlaeggande/egna-metoder/#enkel-metod","title":"Enkel metod","text":"<p>En metod \u00e4r ett namngivet kodblock, som kan anropas fr\u00e5n andra delar av koden genom att man skriver dess namn. Det g\u00f6r att koden kan \u00e5teranv\u00e4ndas och man slipper skriva samma kod flera g\u00e5nger.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>static void MetodensNamn()\n{\n  Console.WriteLine(\"Hej!\");\n}\n</code></pre></p> <p>F\u00f6r att anropa metoden skriver man sedan:</p> <pre><code>MetodensNamn();\n</code></pre> <p>\"static\"-delen beh\u00f6vs enbart om metoden ska kunna anropas fr\u00e5n en annan metod som ocks\u00e5 \u00e4r static, till exempel Main.</p> <p>F\u00f6r mer information om vad \"static\" egentligen betyder \u2013 l\u00e4s h\u00e4r.</p>"},{"location":"grundlaeggande/egna-metoder/#parametrar","title":"Parametrar","text":"<p>Genom parametrar kan man f\u00f6ra in information i metoden n\u00e4r den anropas.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>static void PrettyPrint(string text)\n{\n  Console.WriteLine($\"--~~== {text} ==~~--\");\n}\n</code></pre></p> <p>F\u00f6r att deklarera v\u00e4rdet av parametern vars namn \u00e4r text anropas metoden ovan s\u00e5h\u00e4r:</p> <pre><code>PrettyPrint(\"Horsies!\");\n</code></pre> <p>Resultatet blir att f\u00f6ljande skrivs ut till konsolen:</p> <pre><code>--~~== Horsies! ==~~--\n</code></pre>"},{"location":"grundlaeggande/egna-metoder/#returnering","title":"Returnering","text":"<p>F\u00f6r att f\u00e5 ut information ur en metod s\u00e5 att informationen kan anv\u00e4ndas i resten av programmet anv\u00e4nds returnering. Det inneb\u00e4r att man ist\u00e4llet f\u00f6r void skriver vilken datatyp informationen man vill f\u00e5 ut fr\u00e5n metoden ska ha, och sedan n\u00e5gonstans i metoden skriver return f\u00f6ljt av en information som har denna datatyp.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>static float OneThird()\n{\n  float result = 1f / 3f;\n  return result;\n} \n</code></pre></p> <p>N\u00e4r man sedan anropar metoden s\u00e5 f\u00e5ngar man upp den returnerade informationen i en variabel.</p> <pre><code>float f = OneThird();\n</code></pre> <p>Ofta kombinerar man parametrar och returneringar f\u00f6r att bygga metoder som bearbetar den information man stoppar in p\u00e5 n\u00e5got s\u00e4tt.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>static int Multiply(int a, int b)\n{\n  int result = a * b;\n  return result;\n}\n</code></pre></p> <p>Och ovanst\u00e5ende metod anropas s\u00e5h\u00e4r:</p> <pre><code>int area = Multiply(3, 4);\n</code></pre> <p>Resultatet blir att 3 multipliceras med 4 inuti metoden, och resultatet (12) returneras och lagras i variabeln <code>area</code>.</p>"},{"location":"grundlaeggande/egna-metoder/#overlagring","title":"\u00d6verlagring","text":"<p>Att \u00f6verlagra metoder inneb\u00e4r att man d\u00f6per flera metoder till samma namn, men l\u00e5ter dem ha olika parametrar.</p> <p>Effekten blir att n\u00e4r man anropar metodnamnet s\u00e5 anv\u00e4nds de parameterv\u00e4rden man anger f\u00f6r att avg\u00f6ra vilken av de olika metoderna som ska k\u00f6ras.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>static void Shout()\n{\n  Console.WriteLine(\"AAAAAAAAH!\");\n}\n</code></pre></p> <p>{% code lineNumbers=\"true\" %} <pre><code>static void Shout(string exclamation)\n{\n  Console.WriteLine(exclamation.ToUpper());\n}\n</code></pre></p> <p>De tv\u00e5 Shout-metoderna ovan har samma namn, men den ena tar emot en parameter. Om man nu anropar s\u00e5 h\u00e4r:</p> <pre><code>Shout();\n</code></pre> <p>S\u00e5 kommer den \u00f6vre versionen att k\u00f6ras. Inget parameterv\u00e4rde angavs, och det finns en version av Shout som inte beh\u00f6ver n\u00e5gra parametrar, allts\u00e5 k\u00f6rs den.</p> <p>Om man d\u00e4remot anropar s\u00e5 h\u00e4r:</p> <pre><code>Shout(\"abracadabra!\");\n</code></pre> <p>S\u00e5 kommer den nedre versionen att k\u00f6ras. Ett string-v\u00e4rde angavs som parameterv\u00e4rde, och det finns en version av Shout som beh\u00f6ver ett string-v\u00e4rde, allts\u00e5 k\u00f6rs den.</p>"},{"location":"grundlaeggande/egna-metoder/#generiska-metoder","title":"Generiska metoder","text":"<p>Generiska metoder \u00e4r metoder d\u00e4r datatypen f\u00f6r n\u00e5gon eller n\u00e5gra av variablerna eller parametrarna inte best\u00e4ms n\u00e4r metoden deklareras, utan n\u00e4r den anropas.</p> <p>I exemplet nedan anv\u00e4nds 1 typ-parameter, \"T\". Efter att den skrivits mellan &lt;&gt; efter metodens namn s\u00e5 kan T anv\u00e4ndas i koden som om den vore en datatyp.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>static void PrintInRed&lt;T&gt;(T content)\n{\n  ConsoleColor defaultColor = Console.ForegroundColor;\n  Console.ForegroundColor = ConsoleColor.Red;\n  Console.WriteLine(content);\n  Console.ForegroundColor = defaultColor;\n}\n</code></pre></p> <p>N\u00e4r metoden sedan anropas s\u00e5 anges vilken datatyp T ska vara vid just det anropet genom att datatypen skrivs mellan &lt;&gt; efter metodens namn.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>PrintInRed&lt;int&gt;(8);\nPrintInRed&lt;string&gt;(\"Hello, World!\");\n</code></pre></p> <p>Detta liknar hur generiska klasser fungerar.</p>"},{"location":"grundlaeggande/fel/","title":"Fel","text":""},{"location":"grundlaeggande/fel/#syntaxfel","title":"Syntaxfel","text":"<p>Ett syntaxfel \u00e4r ett fel i sj\u00e4lva grammatiken i koden; ett ganska l\u00e4ttf\u00e5ngat fel d\u00e4r man helt enkelt skrivit n\u00e5got ogiltigt. Syntaxfel signaleras i Visual Studio Code genom att strykas under med r\u00f6da v\u00e5giga streck, s.k, \"sqiggley lines\". Man kan ocks\u00e5 f\u00e5 fram en lista med alla syntaxfel genom att g\u00e5 till Problems-panelen (View \u2192 Problems).</p>"},{"location":"grundlaeggande/fel/#runtime-fel-exceptions","title":"Runtime-fel (exceptions)","text":"<p>Ett runtime-fel \u00e4r ett fel som uppst\u00e5r n\u00e4r programmet k\u00f6rs. Koden som orsakar felet \u00e4r syntaxm\u00e4ssigt korrekt, men den operation som koden beskriver g\u00e5r inte att utf\u00f6ra. Det kan till exempel vara att man f\u00f6rs\u00f6ker komma \u00e5t en position i en array som inte finns.</p> <pre><code>int[] numbers = {3, 4, 12, 66};\nConsole.WriteLine(numbers[8]); // Det finns ingen \u00e5ttonde int i arrayen\n</code></pre> <p>N\u00e4r ett runtime-fel uppst\u00e5r s\u00e5 skapas ett Exception. Detta kan f\u00e5ngas upp av en try-catch.</p>"},{"location":"grundlaeggande/fel/#logiska-fel","title":"Logiska fel","text":"<p>Logiska fel \u00e4r de sv\u00e5raste att hitta \u2013 de hittas inte av Visual Studio (inga r\u00f6da sqiggley lines), de orsakar inga felmeddelanden. De \u00e4r helt enkelt resultatet av ett felt\u00e4nk hos programmeraren \u2013 som leder till o\u00f6nskat beteende.</p> <pre><code>// Eftersom || anv\u00e4nds ist\u00e4llet f\u00f6r &amp;&amp; s\u00e5 r\u00e4cker det med att ha r\u00e4tt\n//  anv\u00e4ndarnamn ELLER r\u00e4tt l\u00f6senord.\n\nif (username == \"micke || password == \"12345\")\n{\n  loggedIn = true;\n}\n</code></pre>"},{"location":"grundlaeggande/if-satser/","title":"If-satser","text":""},{"location":"grundlaeggande/if-satser/#if-sats","title":"if-sats","text":"<p>Ett villkorat kodblock. Koden i blocket k\u00f6rs bara om det som \u00e4r mellan parenteserna \u00e4r sant.</p> <p>Man kan bara l\u00e4gga in kod som ger boolskt resultat mellan parenteserna, t.ex. en j\u00e4mf\u00f6relse eller en metod som returnerar ett boolskt v\u00e4rde.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>if (i &gt; 4)\n{\n  Console.WriteLine(\"H\u00f6gre \u00e4n fyra!\");\n}\n\nif (name == \"Micke\")\n{\n  Console.WriteLine(\"Inneh\u00e5llet i variabeln name \u00e4r samma som 'Micke'\");\n}\n</code></pre></p>"},{"location":"grundlaeggande/if-satser/#else","title":"else","text":"<p>Kompletterar en if-sats. Skrivs innan ett kodblock som ska k\u00f6ras om if-satsens kriterium inte st\u00e4mmer.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>if (i &gt; 4)\n{\n  Console.WriteLine(\"H\u00f6gre \u00e4n fyra!\");\n}\nelse\n{\n  Console.WriteLine(\"Inte h\u00f6gre \u00e4n fyra!\");\n}\n</code></pre></p>"},{"location":"grundlaeggande/if-satser/#else-if","title":"else if","text":"<p>Anv\u00e4nds f\u00f6r att skapa en kedja av if-satser, d\u00e4r varje if-sats bara kollas om den f\u00f6reg\u00e5ende inte satsens kriterium inte uppn\u00e5ddes.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>if (i &gt; 4)\n{\n  Console.WriteLine(\"H\u00f6gre \u00e4n fyra!\");\n}\nelse if (i &lt; 0)\n{\n  Console.WriteLine(\"L\u00e4gre \u00e4n noll!\");\n}\nelse\n{\n  Console.WriteLine(\"H\u00f6gre \u00e4n noll, l\u00e4gre \u00e4n fem!\");\n}\n</code></pre></p>"},{"location":"grundlaeggande/konsollen-console/","title":"Konsolen (Console)","text":""},{"location":"grundlaeggande/konsollen-console/#skriva-ut-och-lasa-in-text","title":"Skriva ut och l\u00e4sa in text","text":""},{"location":"grundlaeggande/konsollen-console/#consolewriteline","title":"Console.WriteLine()","text":"<p>Skriver ut n\u00e5got till konsolen, med en radbrytning i slutet.</p> <pre><code>Console.WriteLine(\"Hello!\");\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#consolewrite","title":"Console.Write()","text":"<p>Skriver ut n\u00e5got till konsolen, utan radbrytning efter\u00e5t.</p> <pre><code>Console.Write(\"Hello\");\nConsole.Write(\"World\");\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#consoleclear","title":"Console.Clear()","text":"<p>Rensar sk\u00e4rmen.</p> <pre><code>Console.Clear();\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#consolereadline","title":"Console.ReadLine()","text":"<p>L\u00e4ser in en string fr\u00e5n anv\u00e4ndaren och v\u00e4ntar p\u00e5 Enter-tryckning. Returnerar stringen s\u00e5 att den kan lagras i en variabel eller anv\u00e4ndas i koden.</p> <pre><code>string answer = Console.ReadLine();\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#consolereadkey","title":"Console.ReadKey()","text":"<p>L\u00e4ser in ett knapptryck fr\u00e5n anv\u00e4ndaren. Pausar k\u00f6rningen av programmet tills en knapptryckning sker.</p> <pre><code>ConsoleKey key = Console.ReadKey();\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#consolekeyavailable","title":"Console.KeyAvailable","text":"<p>Kollar om en knapptryckning skett sedan f\u00f6rra g\u00e5ngen ReadLine eller ReadKey k\u00f6rdes. Praktisk f\u00f6r n\u00e4r man t.ex. inte vill att k\u00f6rningen av programmet ska pausas n\u00e4r man k\u00f6r en ReadKey().</p> <pre><code>if (Console.KeyAvailable)\n{\n  ConsoleKey key = Console.ReadKey();\n}\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#consoleoutputencoding","title":"Console.OutputEncoding","text":"<p>\u00c4ndrar vilken teckenkodning som ska anv\u00e4ndas n\u00e4r saker skrivs ut till konsolen.</p> <pre><code>Console.OutputEncoding = System.Text.Encoding.UTF8;\n</code></pre> <p>Med UTF-8 som teckenkodning kan man anv\u00e4nda fler tecken \u2013 till exempel emojis som \ud83e\udd16.</p> <pre><code>Console.WriteLine(\"\ud83e\udd16\");\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#farg","title":"F\u00e4rg","text":""},{"location":"grundlaeggande/konsollen-console/#consoleforegroundcolor","title":"Console.ForegroundColor","text":"<p>Variabel vars v\u00e4rde avg\u00f6r f\u00e4rgen p\u00e5 texten i konsolf\u00f6nstret.</p> <pre><code>Console.ForegroundColor = ConsoleColor.Cyan;\n</code></pre> <p>Warning</p> <p>OBSERVERA: detta g\u00e4ller enbart text som skrivs efter det att f\u00e4rgen \u00e4ndrats. Text som redan skrivits ut f\u00f6r\u00e4ndras inte.</p>"},{"location":"grundlaeggande/konsollen-console/#consolebackgroundcolor","title":"Console.BackgroundColor","text":"<p>Variabel vars v\u00e4rde avg\u00f6r f\u00e4rgen p\u00e5 texten i konsolf\u00f6nstret.</p> <pre><code>Console.BackgroundColor = ConsoleColor.Magenta;\n</code></pre> <p>Warning</p> <p>OBSERVERA: detta g\u00e4ller enbart text som skrivs efter det att f\u00e4rgen \u00e4ndrats. Text som redan skrivits ut f\u00f6r\u00e4ndras inte. Man kan anv\u00e4nda Console.Clear() f\u00f6r att fylla sk\u00e4rmen med den nya bakgrundsf\u00e4rgen.</p>"},{"location":"grundlaeggande/konsollen-console/#consoleresetcolor","title":"Console.ResetColor","text":"<p>\u00c5terst\u00e4ller f\u00f6r- och bakgrundsf\u00e4rg till konsolens vanliga.</p> <pre><code>Console.ResetColor();\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#ansi-farger","title":"ANSI-f\u00e4rger","text":"<p>ANSI \u00e4r en gammal textstandard, med koder som fortfarande kan anv\u00e4ndas f\u00f6r att formatera text i konsolen. Man b\u00f6rjar varje kommando med <code>\\x1b[</code>, f\u00f6ljt av en siffra och sedan <code>m</code>. En komplett lista finns h\u00e4r.</p> <p>I exemplet nedan anv\u00e4nds allts\u00e5 <code>\\x1b[34m</code> f\u00f6r att aktivera bl\u00e5 f\u00e4rg, och sedan anv\u00e4nds <code>\\x1b[0m</code> f\u00f6r att \u00e5terg\u00e5 till normal f\u00e4rg.</p> <pre><code>Console.WriteLine(\"\\x1b[34mBl\u00e5\\x1b[0m f\u00e4rg\");\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#fonstret","title":"F\u00f6nstret","text":""},{"location":"grundlaeggande/konsollen-console/#consoletitle","title":"Console.Title","text":"<p>\u00c4ndrar konsolf\u00f6nstrets namn.</p> <pre><code>Console.Title = \"Mitt fina f\u00f6nster\";\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#consolebeep","title":"Console.Beep()","text":"<p>G\u00f6r ett ljud!</p> <pre><code>Console.Beep(294,1000) // 1 sekunds (1000 millisekunders) beep i D.\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#pekaren","title":"Pekaren","text":""},{"location":"grundlaeggande/konsollen-console/#consolesetcursorposition","title":"Console.SetCursorPosition()","text":"<p>Best\u00e4m pekarens position i x- och y-led. Tar emot tv\u00e5 int-v\u00e4rden.</p> <pre><code>Console.SetCursorPosition(20, 10); // Plancera pekaren p\u00e5 column 20, rad 10\n</code></pre> <p>Warning</p> <p>OBSERVERA: y-axeln \u00e4r omv\u00e4nd! Med andra ord, den f\u00f6rsta raden \u00e4r 0, den andra \u00e4r 1, den tredje \u00e4r 2\u2026 Och \"origo\" ligger uppe i v\u00e4nstra h\u00f6rnet.</p>"},{"location":"grundlaeggande/konsollen-console/#consolegetcursorposition","title":"Console.GetCursorPosition()","text":"<p>L\u00e4s av pekarens position i x- och y-led. Returnerar en tuple d\u00e4r det f\u00f6rsta v\u00e4rdet \u00e4r x, det andra y.</p> <pre><code>(int x, int y) = Console.GetCursorPosition();\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#consolecursorleft","title":"Console.CursorLeft","text":"<p>Pekarens position i x-led, r\u00e4knat fr\u00e5n f\u00f6nstrets v\u00e4nstra kant (den f\u00f6rsta \"kolumnen\" \u00e4r 0)</p> <pre><code>Console.CursorLeft = 20; // Placera pekaren i kolumn 20\nConsole.CursorLeft -= 5; // Flytta pekaren fem steg \u00e5t v\u00e4nster\n</code></pre>"},{"location":"grundlaeggande/konsollen-console/#consolecursortop","title":"Console.CursorTop","text":"<p>Pekarens position i y-led, r\u00e4knat fr\u00e5n f\u00f6nstrets \u00f6verdel.</p> <pre><code>Console.CursorTop = 10; // Placera pekaren p\u00e5 rad 10\nConsole.CursorTop-- // Flytta pekaren 1 rad upp\u00e5t\n</code></pre>"},{"location":"grundlaeggande/listor-och-arrayer/","title":"Listor och arrayer","text":"<p>B\u00e5de listor och arrayer \u00e4r samlingar, som (f\u00f6renklat) l\u00e5ter oss lagra flera v\u00e4rden av samma datatyp p\u00e5 samma st\u00e4lle. Man kan till exempel ha en samling av en massa int-v\u00e4rden som \u00e4r samlade p\u00e5 samma st\u00e4lle, eller en samling strings.</p> <ul> <li>Arrayer kom f\u00f6rst, \u00e4r snabba och effektiva, men kan inte v\u00e4xa/krympa \u2013 de har ett fast antal platser.</li> <li>Listor \u00e4r en senare uppfinning. De \u00e4r mer flexibla och n\u00e4stan lika snabba. De \u00e4r en generisk klass och de kan v\u00e4xa/krympa.</li> </ul>"},{"location":"grundlaeggande/listor-och-arrayer/#indexering","title":"Indexering","text":"<p>Alla f\u00f6rem\u00e5l som lagrats i en samling ges normalt ett index, som beskriver f\u00f6rem\u00e5lets position i samlingen och l\u00e5ter oss komma \u00e5t det.</p> <p>I arrayer och listor \u00e4r index alltid en siffra \u2013 en integer. Det f\u00f6rsta f\u00f6rem\u00e5let i listan har index 0, det andra har index 1, etc.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string[] names = [\"Benny\", \"Jenny\", \"Kenny\", \"Anna\"];\n// I denna array har Benny index 0, Jenny 1, Kenny 2 och Anna 3.\n\nConsole.WriteLine(names[2]); // Skriver ut \"Kenny\"\n</code></pre></p> <p>F\u00f6r att h\u00e4nvisa till ett index r\u00e4knat fr\u00e5n slutet av arrayen s\u00e5 skriver man ^ framf\u00f6r siffran.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string[] names = [\"Benny\", \"Jenny\", \"Kenny\", \"Anna\"];\n\nConsole.WriteLine(names[^2]); // Skriver ut \"Jenny\"\n</code></pre></p>"},{"location":"grundlaeggande/listor-och-arrayer/#list","title":"List","text":"<p>N\u00e4r listor skapas har de normalt sett en l\u00e4ngd p\u00e5 0, och de v\u00e4xer dynamiskt n\u00e4r man l\u00e4gger till saker i dem.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Skapa en tom string-lista\nList&lt;string&gt; listNamn = [];\n\n// Skapa en string-lista som redan fr\u00e5n b\u00f6rjan inneh\u00e5ller tre v\u00e4rden\nList&lt;string&gt; choices = [\"Start\", \"Options\", \"Quit\"];\n</code></pre></p> <p>Mer information om List finns under Generiska klasser.</p>"},{"location":"grundlaeggande/listor-och-arrayer/#add","title":"Add()","text":"<p>Metod som \u00e4r inbyggd i listor. Anv\u00e4nds f\u00f6r att l\u00e4gga till nya f\u00f6rem\u00e5l i listan.</p> <pre><code>listNamn.Add(\"Kim\");\n</code></pre>"},{"location":"grundlaeggande/listor-och-arrayer/#count","title":"Count","text":"<p>Variabel som \u00e4r inbyggd i listor. Har alltid ett v\u00e4rde som \u00e4r lika med listans storlek.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Skapa en integer-variabel och tilldela den v\u00e4rdet som motsvarar listans storlek\nint length = listNamn.Count;\n</code></pre></p>"},{"location":"grundlaeggande/listor-och-arrayer/#remove","title":"Remove()","text":"<p>Metod som \u00e4r inbyggd i listor. Anv\u00e4nds f\u00f6r att ta bort f\u00f6rem\u00e5l fr\u00e5n listan.</p> <pre><code>listNamn.Remove(\"Kim\");\n</code></pre>"},{"location":"grundlaeggande/listor-och-arrayer/#removeat","title":"RemoveAt()","text":"<p>Metod som \u00e4r inbyggd i listor. Anv\u00e4nds f\u00f6r att ta bort f\u00f6rem\u00e5l p\u00e5 en specifik plats i listan.</p> <pre><code>listNamn.RemoveAt(4);\n</code></pre>"},{"location":"grundlaeggande/listor-och-arrayer/#removeall","title":"RemoveAll()","text":"<p>Metod f\u00f6r att ta bort alla f\u00f6rem\u00e5l som matchar ett visst kriterium. Kriteriet skrivs som en metod. Metoden tar emot ett v\u00e4rde av samma datatyp som listan inneh\u00e5ller, och returnerar true om kriteriet \u00e4r uppfyllt och false om det inte \u00e4r det. H\u00e4r anv\u00e4nds med andra ord delegates.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// IsAboveScreen \u00e4r kriteriet\nstatic bool IsAboveScreen(Rectangle r)\n{\n  return r.y &lt; 0;\n}\n\nstatic void Main(string[] args)\n{\n  List&lt;Rectangle&gt; rects = new List&lt;Rectangle&gt;();\n\n  /* ... */\n\n  // Tar bort alla rektanglar som, n\u00e4r de stoppas in \n  // i metoden, f\u00e5r den att returnera true\n  rects.RemoveAll(IsAboveScreen);\n</code></pre></p> <p>Ett annat s\u00e4tt \u00e4r att anv\u00e4nda ett lambda-uttryck:</p> <pre><code>rects.removeAll(rect =&gt; rect.y &lt; 0);\n</code></pre>"},{"location":"grundlaeggande/listor-och-arrayer/#att-gora-om-en-lista-till-en-array","title":"Att g\u00f6ra om en lista till en array","text":"<pre><code>string[] aNamn = listNamn.ToArray();\n</code></pre>"},{"location":"grundlaeggande/listor-och-arrayer/#att-gora-om-en-array-till-en-lista","title":"Att g\u00f6ra om en array till en lista","text":"<pre><code>List&lt;string&gt; listNamn = new List&lt;string&gt;(aNamn);\n</code></pre>"},{"location":"grundlaeggande/listor-och-arrayer/#array","title":"Array","text":"<p>Arrayer har en fast l\u00e4ngd som best\u00e4ms n\u00e4r arrayen skapas.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Skapa en int-array med tre tomma platser\nint[] arrayHp = new int[3];\n\n// Skapa en string-array med tre platser som redan fr\u00e5n b\u00f6rjan ges v\u00e4rden\nstring[] choices = [\"Start\", \"Options\", \"Quit\"];\n</code></pre></p>"},{"location":"grundlaeggande/listor-och-arrayer/#length","title":"Length","text":"<p>Variabel som \u00e4r inbyggd i arrayer. Har alltid ett v\u00e4rde som \u00e4r lika med arrayens storlek.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Skapa en integer-variabel och tilldela den v\u00e4rdet som motsvarar \n// arrayens storlek\nint length = arrayHp.Length;\n</code></pre></p>"},{"location":"grundlaeggande/listor-och-arrayer/#contains","title":"Contains()","text":"<p>Ett snabbt s\u00e4tt att se ifall en sak finns i arrayen.</p> <pre><code>string choice = Console.ReadLine();\nbool validAnswer = choices.Contains(choice);\n</code></pre> <p>Warning</p> <p>OBSERVERA: Contains \u00e4r en del av biblioteket Linq, s\u00e5 du beh\u00f6ver skriva detta l\u00e4ngst upp bland dina andra using-statements:</p> <p><code>using System.Linq;</code></p>"},{"location":"grundlaeggande/listor-och-arrayer/#range","title":"Range","text":"<p>F\u00f6r att f\u00e5 ut en del av en array som en ny array kan man anv\u00e4nda ranges.</p> <p>Ranges anger man genom att skriva <code>..</code> (tv\u00e5 punkter). Innan punkten skriver man start-index, allts\u00e5 den sak i arrayen man vill att den nya arrayen ska b\u00f6rja p\u00e5. Efter punkterna skriver man slut-index. Den nya arrayen inkluderar inte den sak som finns p\u00e5 slut-index.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string[] names = [\"Benny\", \"Jenny\", \"Kenny\", \"Anna\", \"Mahmud\", \"Ki\"];\n\nstring[] subNames = names[1..3]; // subNames blir en array med Jenny och Kenny\n\nstring[] firstHalf = names[..3]; // blir Benny, Jenny och Kenny\n\nstring[] secondHalf = names[3..]; // blir Anna, Mahmud och Ki\n\nstring[] lastTwo = names[^2..]; // blir Jenny och Kenny\n</code></pre></p> <p>Detta kallas ibland ocks\u00e5 \"slicing\", eftersom man delar upp arrayen i mindre bitar.</p>"},{"location":"grundlaeggande/listor-och-arrayer/#att-gora-om-en-array-till-en-lista_1","title":"Att g\u00f6ra om en array till en lista","text":"<p>{% code lineNumbers=\"true\" %} <pre><code>// Skapa en string-lista baserat p\u00e5 arrayHp, med samma inneh\u00e5ll och storlek\nList&lt;string&gt; lNamn = new List&lt;string&gt;(arrayHp);\n</code></pre></p>"},{"location":"grundlaeggande/listor-och-arrayer/#flerdimensionella-arrayer","title":"Flerdimensionella arrayer","text":"<p>En vanlig array \u00e4r endimensionell \u2013 en lista, eller en serie. Varje sak i arrayen identifieras av ett index.</p> <p>En tv\u00e5dimensionell array \u00e4r som ett rutn\u00e4t eller en tabell. Varje sak i arrayen identifieras av tv\u00e5 index.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Skapa en tv\u00e5dimensionell array med 150 platser; 10 rader med 15 kolumner\nint[,] grid = new int[10,15];\n\n// Best\u00e4m v\u00e4rdet p\u00e5 position 2,2 till 1\ngrid[2,2] = 1;\n</code></pre></p>"},{"location":"grundlaeggande/listor-och-arrayer/#getlength","title":"GetLength","text":"<p>F\u00f6r att l\u00e4sa av en flerdimensionell arrays l\u00e4ngd i n\u00e5gon dimension, anv\u00e4nd GetLength.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>for (int y = 0; y &lt; grid.GetLength(1); y++)\n{\n  for (int x = 0; x &lt; grid.GetLength(0); x++)\n  {\n    grid[x, y] = 0;\n  }\n}\n</code></pre></p>"},{"location":"grundlaeggande/listor-och-arrayer/#skapa-i-aldre-versioner-innan-net-8","title":"Skapa i \u00e4ldre versioner (innan .net 8)","text":"<p>Innan C# 12, som ing\u00e5r i dotnet 8, kunde man inte skapa nya arrayer eller listor via \"collection expressions\", allts\u00e5 de enkla hakparenteserna.</p> <p>Ist\u00e4llet var man tvungen att anv\u00e4nda m\u00e5svingar f\u00f6r arrayer, och new() f\u00f6r List.</p> <pre><code>List&lt;int&gt; integerList = new() {1, 2, 3, 4};\nint[] integerArray = {5, 6, 7, 8};\n</code></pre>"},{"location":"grundlaeggande/loopar/","title":"Loopar","text":""},{"location":"grundlaeggande/loopar/#while-loop","title":"while-loop","text":"<p>Fungerar och ser ut som en if-sats utom att k\u00f6rningen inte forts\u00e4tter n\u00e4r kodblocket k\u00f6rts, utan \"hoppar upp\" till kriteriet och testar det igen.</p> <p>Precis som med if-satserna ska det som \u00e4r mellan paranteserna vara kod som ger boolskt resultat t.ex. en j\u00e4mf\u00f6relse eller en metod som returnerar ett boolskt v\u00e4rde.</p> <p>While-loopar anv\u00e4nds n\u00e4r man inte vet hur m\u00e5nga g\u00e5nger loopen ska k\u00f6ras. Till exempel:</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string name = \"\";\n\n// K\u00f6rs s\u00e5 m\u00e5nga g\u00e5nger som beh\u00f6vs f\u00f6r att \n// anv\u00e4ndaren ska f\u00f6rst\u00e5 att hen ska skriva \"Micke\"\nwhile (name != \"Micke\")\n{\n  Console.WriteLine(\"Skriv ditt namn:\")\n  name = Console.ReadLine();\n}\n</code></pre></p>"},{"location":"grundlaeggande/loopar/#for-loop","title":"for-loop","text":"<p>Fungerar som en while-loop men har alltid en r\u00e4knare \u2013 bra n\u00e4r man vill g\u00f6ra n\u00e5got ett visst antal g\u00e5nger. Samlar deklaration av r\u00e4knare, kriterie f\u00f6r att forts\u00e4tta loopa och f\u00f6r\u00e4ndring av r\u00e4knarens v\u00e4rde p\u00e5 samma st\u00e4lle.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// i \u00e4r r\u00e4knarvariabeln, vars v\u00e4rder b\u00f6rjar p\u00e5 0\n// i &lt; 10 \u00e4r villkoret; s\u00e5 l\u00e4nge det utv\u00e4rderas som sant forts\u00e4tter loopen k\u00f6ras\n// i++ k\u00f6rs i slutet av varje iteration, och betyder att i \u00f6kar med 1 varje g\u00e5ng\n\nfor (int i = 0; i &lt; 10; i++)\n{\n  Console.WriteLine(i);\n}\n</code></pre></p> <p>For-loopar anv\u00e4nds n\u00e4r man vet hur m\u00e5nga g\u00e5nger loopen ska k\u00f6ras \u2013 \u00e5tminstone n\u00e4r man n\u00e5r den. S\u00e5 l\u00e4nge en r\u00e4knare ska anv\u00e4ndas fungerar en for-loop bra.</p>"},{"location":"grundlaeggande/loopar/#foreach-loop","title":"foreach-loop","text":"<p>Foreach-loopar \u00e4r i princip likadana som for-loopar men \u00e4r specialdesignade f\u00f6r att g\u00e5 igenom listor och arrayer. En foreach-loop k\u00f6rs lika m\u00e5nga g\u00e5nger som det finns saker i en lista/array, och varje g\u00e5ng loopen k\u00f6rs s\u00e5 lagras en av sakerna i variabeln som anges.</p> <p>Nackdelen j\u00e4mf\u00f6rt med en for-loop \u00e4r att man inte f\u00e5r ut vilket index (plats i listan/arrayen) respektive sak har. Beh\u00f6ver man skriva ut index eller anv\u00e4nda det p\u00e5 n\u00e5got vis \u00e4r d\u00e4rf\u00f6r for-loop ett b\u00e4ttre val.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string[] choices = {\"Start\", \"Options\", \"Quit\"};\n\nforeach (string choice in choices)\n{\n  Console.WriteLine(choice);\n}\n</code></pre></p>"},{"location":"grundlaeggande/matematik-math/","title":"Matematik (Math)","text":""},{"location":"grundlaeggande/matematik-math/#mathabs","title":"Math.Abs()","text":"<p>Returnerar det absoluta v\u00e4rdet hos ett tal som anges som parameter.</p> <pre><code>float y = Math.Abs(-0.45f); // y f\u00e5r v\u00e4rdet 0.45\n</code></pre>"},{"location":"grundlaeggande/matematik-math/#mathsin-mathcos-mathtan","title":"Math.Sin(), Math.Cos(), Math.Tan()","text":"<p>Returnerar sinus, cosinus eller tangens av vinkeln som anges som parameter. Vinkeln beh\u00f6ver anges i radianer.</p> <pre><code>float s = Math.Sin(3.4f);\n</code></pre> <p>De inverterade trigonomiska funktionerna finns ocks\u00e5 - de heter Math.Asin, Math.Acos och Math.Atan.</p>"},{"location":"grundlaeggande/matematik-math/#mathmax","title":"Math.Max()","text":"<p>Returnerar det st\u00f6rsta av tv\u00e5 v\u00e4rden som anges som parametrar</p> <pre><code>int i = Math.Max(4, 12); // i blir 12.\n</code></pre>"},{"location":"grundlaeggande/matematik-math/#mathmin","title":"Math.Min()","text":"<p>Returnerar det minsta av tv\u00e5 v\u00e4rden som anges som parametrar</p> <pre><code>int i = Math.Min(4, 12); // i blir 4.\n</code></pre>"},{"location":"grundlaeggande/namngivning/","title":"Namngivning","text":""},{"location":"grundlaeggande/namngivning/#sprak-och-bra-namn","title":"Spr\u00e5k och \"bra namn\"","text":"<p>Namnen i ett projekt b\u00f6r alla vara p\u00e5 samma spr\u00e5k och f\u00f6lja samma m\u00f6nster.</p> <p>Ett bra namn \u00e4r tydligt och beskriver informationen variabeln inneh\u00e5ller, eller den handling metoden g\u00f6r. \"hitPoints\" \u00e4r ett b\u00e4ttre namn \u00e4n \"x\".</p> KategoriGrundtankeBra exempelnamnVariablerParametrarPropertiesDen data som lagras_hitPointsmovementXhasBeenHitweaponDamagemoneyOwedMetoderDen handling som utf\u00f6rsEtt verbCheckCollisionDrawUpdateLoadSavegameApplyMovementVectorKlasserKategorinamn i singularEnemyLevelPowerupButtonBook"},{"location":"grundlaeggande/namngivning/#pascalcase-och-camelcase","title":"PascalCase och camelCase","text":"<ul> <li>PascalCase: Inga mellanslag mellan orden, stor bokstav (versal) i b\u00f6rjan av varje ord.</li> <li>camelCase: Inga mellanslag mellan orden, liten bokstav i b\u00f6rjan men i \u00f6vrigt stor bokstav (versal) i b\u00f6rjan av varje ord.</li> </ul>"},{"location":"grundlaeggande/namngivning/#exempel","title":"Exempel","text":"TypModellExempelProjektPascalCase<p>SpaceShooter</p><p>PacMan</p><p>BreakoutClone</p>MetoderPascalCase<p>TakeDamage()</p><p>RestoreOriginalPosition()</p><p>Rest()</p>KlasserPascalCase<p>Enemy</p><p>ProjectileTarget</p><p>PowerupBox</p>PropertiesPascalCaseHitPointsKlassvariabler: public, protectedPascalCaseIsAliveKlassvariabler: privatecamelCase_hitPointsLokala variabler(\"vanliga variabler\")camelCase<p>hitPoints</p><p>mana</p><p>isFloating</p>ParametrarcamelCase<p>name</p><p>movementVector</p>"},{"location":"grundlaeggande/namngivning/#understreck","title":"Understreck","text":"<p>Understreck anv\u00e4nds i b\u00f6rjan av privata/protected variabler i klasser, och ingen annanstans.</p> <pre><code>public class Fighter\n{\n  private int _hp;\n  protected int _mana;\n  public int ShoeSize;\n  public int Level { get; protected set; }\n}\n</code></pre>"},{"location":"grundlaeggande/operatorer/","title":"Operatorer","text":""},{"location":"grundlaeggande/operatorer/#matematiska","title":"Matematiska","text":""},{"location":"grundlaeggande/operatorer/#addition-och-konkatenering","title":"+ Addition och konkatenering","text":"<p>{% code lineNumbers=\"true\" %} <pre><code>int x = 4 + 6; // Addition\nstring s = \"hej \" + \"d\u00e5\" // Konkatenering\nstring s2 = \"V\u00e4rdet p\u00e5 x \u00e4r \" + x;\n</code></pre></p>"},{"location":"grundlaeggande/operatorer/#-subtraktion","title":"- Subtraktion.","text":"<pre><code>int x = 6 - 4;\n</code></pre>"},{"location":"grundlaeggande/operatorer/#division","title":"/ Division.","text":"<pre><code>int x = 6 / 3;\n</code></pre> <p>OBS: Om man delar ett heltal (int eller long) med ett annat heltal blir resultatet alltid ett heltal \u2013 decimaler trunkeras bort.</p>"},{"location":"grundlaeggande/operatorer/#multiplikation","title":"* Multiplikation.","text":"<pre><code>int x = 2 * 3;\n</code></pre>"},{"location":"grundlaeggande/operatorer/#modulus","title":"% Modulus","text":"<p>R\u00e4knar ut resten.</p> <pre><code>int x = 5 % 2;\n</code></pre> <p>x blir lika med 1, eftersom det \u00e4r vad man f\u00e5r kvar n\u00e4r man delat 5 med 2.</p>"},{"location":"grundlaeggande/operatorer/#tilldelning","title":"Tilldelning","text":""},{"location":"grundlaeggande/operatorer/#tilldela-ett-varde-till-en-variabel","title":"= Tilldela ett v\u00e4rde till en variabel","text":"<pre><code>i = 6;\n</code></pre>"},{"location":"grundlaeggande/operatorer/#addera-nagot-till-variabelns-varde","title":"+= Addera n\u00e5got till variabelns v\u00e4rde.","text":"<pre><code>i += 5;\n</code></pre>"},{"location":"grundlaeggande/operatorer/#lagg-till-1-till-variabelns-varde","title":"++ L\u00e4gg till 1 till variabelns v\u00e4rde.","text":"<pre><code>i++;\n</code></pre>"},{"location":"grundlaeggande/operatorer/#-subtrahera-nagot-fran-variabelns-varde","title":"-= Subtrahera n\u00e5got fr\u00e5n variabelns v\u00e4rde.","text":"<pre><code>i -= 5; \n</code></pre>"},{"location":"grundlaeggande/operatorer/#-dra-ifran-1-fran-variabelns-varde","title":"-- Dra ifr\u00e5n 1 fr\u00e5n variabelns v\u00e4rde.","text":"<pre><code>i--;\n</code></pre>"},{"location":"grundlaeggande/operatorer/#boolska","title":"Boolska","text":""},{"location":"grundlaeggande/operatorer/#lika-med","title":"== Lika med","text":"<p>\u00c4r operanderna likadana?</p> <pre><code>bool x = 4 == 4; // true eftersom 4 \u00e4r samma som 4\n</code></pre>"},{"location":"grundlaeggande/operatorer/#inte-lika-med","title":"!= Inte lika med","text":"<p>\u00c4r operanderna olika?</p> <pre><code>bool x = 4 != 5; // true eftersom det st\u00e4mmer att 4 och 5 \u00e4r olika\n</code></pre>"},{"location":"grundlaeggande/operatorer/#storre-an-mindre-an","title":"&gt; &lt; St\u00f6rre \u00e4n, mindre \u00e4n.","text":"<pre><code>bool x = 4 &gt; 3;\n</code></pre>"},{"location":"grundlaeggande/operatorer/#storre-an-eller-lika-med-mindre-an-eller-lika-med","title":"&lt;= &gt;= St\u00f6rre \u00e4n eller lika med, Mindre \u00e4n eller lika med","text":"<pre><code>bool x = 4 &gt;= 4; // Blir true eftersom fyra \u00e4r st\u00f6rre \u00e4n eller lika med fyra\n\nbool y = 3 &lt;= 10;\n</code></pre>"},{"location":"grundlaeggande/operatorer/#logiska","title":"Logiska","text":""},{"location":"grundlaeggande/operatorer/#and-och","title":"&amp;&amp; And (Och)","text":"<p>True om b\u00e5da operanderna \u00e4r true, dvs det \u00e4r true p\u00e5 b\u00e5da sidorna om &amp;&amp;.</p> <pre><code>bool x = true &amp;&amp; true; // resultatet \u00e4r true\n</code></pre> <pre><code>bool y = true &amp;&amp; false; // resultatet \u00e4r false\n</code></pre>"},{"location":"grundlaeggande/operatorer/#or-eller","title":"|| Or (Eller)","text":"<p>True om minst en av operanderna \u00e4r true.</p> <pre><code>bool x = true || false; // true; det r\u00e4cker om den ena \u00e4r true.\nbool y = false || false; // false\nbool z = (3 == 2) || x; // true; x \u00e4r true \u00e4ven om 3 inte \u00e4r samma som 2.\n</code></pre>"},{"location":"grundlaeggande/operatorer/#specialoperatorer","title":"Specialoperatorer","text":""},{"location":"grundlaeggande/operatorer/#member-access","title":". Member access","text":"<p>Anv\u00e4nds f\u00f6r att komma \u00e5t variabler och metoder som ing\u00e5r i andra objekt. Varje string har till exempel en inbyggd egenskap, en \"medlem\", som heter Length.</p> <pre><code>string s = \"Hello\";\nConsole.WriteLine(s.Length); // 5\nConsole.WriteLine(\"Worlds\".Length); // 6\n</code></pre>"},{"location":"grundlaeggande/operatorer/#null-conditional","title":".? Null conditional","text":"<p>Anv\u00e4nds precis som Member access-operatorn men g\u00f6r att man inte f\u00e5r ett runtime-fel ifall objektet \u00e4r null.</p> <pre><code>string s = null;\nConsole.WriteLine(\"L\u00e4ngd: \" + s?.Length); // L\u00e4ngd: \nConsole.WriteLine(\"L\u00e4ngd: \" + s.Length); // Runtime-fel\n</code></pre>"},{"location":"grundlaeggande/operatorer/#ternary","title":"? : Ternary","text":"<p>Ternary-operatorn fungerar som en f\u00f6rkortad if-sats och best\u00e5r av tre delar \u2013 ett villkor, ett v\u00e4rde som g\u00e4ller ifall villkoret \u00e4r sant och ett v\u00e4rde som g\u00e4ller ifall villkoret \u00e4r falskt.</p> <pre><code>int i = 1;\n\n// Om i == 1 s\u00e5 blir name lika med \"Micke\", annars blir name lika med \"Mira\".\nstring name = i == 1 ? \"Micke\" : \"Mira\";\n</code></pre>"},{"location":"grundlaeggande/operatorer/#null-coalescing","title":"?? Null-coalescing","text":"<p>Null-coalescing-operatorn anv\u00e4nds n\u00e4r det finns en risk f\u00f6r att ett v\u00e4rde \u00e4r null, och g\u00f6r s\u00e5 att ett alternativt v\u00e4rde kan tilldelas.</p> <pre><code>// actualName f\u00e5r samma v\u00e4rde som name, f\u00f6rutsatt att name inte \u00e4r null.\n// om name \u00e4r null s\u00e5 blir actualName \"Micke\" ist\u00e4llet.\nstring actualName = name ?? \"Micke\";\n</code></pre>"},{"location":"grundlaeggande/projektstruktur/","title":"Projektstruktur","text":"<p>Ett C#-projekt best\u00e5r av ett antal textfiler. N\u00e5gra av dem inneh\u00e5ller sj\u00e4lva C#-koden; andra inneh\u00e5ller information om hur den koden ska k\u00f6ras, vilken version av C# som ska anv\u00e4ndas och s\u00e5 vidare.</p> <p>Oftast brukar C#-projektet ocks\u00e5 ing\u00e5 i en solution \u2013 ett slags samling av ett eller flera projekt. N\u00e4r ett nytt projekt skapas genom C# Toolbox-till\u00e4gget s\u00e5 skapas b\u00e5de en solution, ett projekt i denna solution, och en f\u00f6rsta C#-fil i projektet.</p>"},{"location":"grundlaeggande/projektstruktur/#mappstruktur","title":"Mappstruktur","text":"<p>Mappen som skapas av C# Dev Kit har f\u00f6ljande struktur:</p> <ul> <li>.vscode</li> <li>Mapp med projektet</li> <li>obj</li> <li>bin</li> <li>csproj-fil</li> <li>cs-filer</li> <li>sln-fil</li> </ul> <p>.vscode \u00e4r en mapp som Vidual Studio Code skapar f\u00f6r att h\u00e5lla reda p\u00e5 sina egna inst\u00e4llningar \u2013 till exempel n\u00e4r filer f\u00f6r k\u00f6rning och debuggning skapas, eller n\u00e4r man sedan \u00e4ndrar i de filerna (internalConsole --&gt; externalTerminal).</p> <p>Mapp med projektet \u2013 en mapp som f\u00e5r projektets namn och inneh\u00e5ller alla filer som h\u00f6r till sj\u00e4lva C#-projektet.</p> <p>obj-mappen inneh\u00e5ller \"mellanfiler\" \u2013 filer som dotnet/C# skapar som ett mellanled mellan k\u00e4llkoden och de f\u00e4rdiga k\u00f6rbara filerna. Den kan tas bort, men kommer d\u00e5 att \u00e5terskapas n\u00e4sta g\u00e5ng projektet k\u00f6rs eller debuggas.</p> <p>bin-mappen inneh\u00e5ller de k\u00f6rbara filer som dotnet/C# skapar utifr\u00e5n k\u00e4llkoden. Det \u00e4r filerna i den h\u00e4r mappen som \u00e4r sj\u00e4lva \"programmet\", och som man kan distribuera till andra m\u00e4nniskor och datorer.</p> <p>csproj-filen inneh\u00e5ller information om C#-projektet.</p> <p>cs-filerna inneh\u00e5ller sj\u00e4lva C#-k\u00e4llkoden.</p> <p>sln-filen \u00e4r den fil som inneh\u00e5ller information om den solution som skapats.</p>"},{"location":"grundlaeggande/projektstruktur/#c-projekt-csproj","title":"C#-projekt (csproj)","text":"<p>{% code lineNumbers=\"true\" %} <pre><code>&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n  &lt;PropertyGroup&gt;\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n    &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;\n    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\n    &lt;Nullable&gt;enable&lt;/Nullable&gt;\n  &lt;/PropertyGroup&gt;\n&lt;/Project&gt;\n</code></pre></p> <p>En csproj-fil \u00e4r en XML-fil med information om C#-projektet. N\u00e5gra viktiga delar \u00e4r:</p> <ul> <li>TargetFramework \u2013 vilken version av dotnet / C# som ska anv\u00e4ndas. I exemplet \u00e4r det dotnet 6.</li> <li>ImplicitUsings \u2013 huruvida man vill anv\u00e4nda implicita usings.</li> <li>Nullable \u2013 Dotnet 6 introducerar \"nullable reference types\", n\u00e5got som mestadels m\u00e4rks i att man f\u00e5r varningar vid vanliga strings\u2026 Enklaste l\u00f6sningen att hantera detta \u00e4r att helt enkelt st\u00e4nga av Nullable genom att kommentera bort raden eller \u00e4ndra \"enable\" till \"disable\".</li> </ul>"},{"location":"grundlaeggande/projektstruktur/#dotnet-solutions-sln","title":"Dotnet-solutions (sln)","text":"<p>{% code lineNumbers=\"true\" %} <pre><code>Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.30114.105\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"DemoProject\", \"DemoProject\\DemoProject.csproj\", \"{FE320B4D-B077-4D3C-BBF4-306ADAA15842}\"\nEndProject\nGlobal\n    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n        Debug|Any CPU = Debug|Any CPU\n        Release|Any CPU = Release|Any CPU\n    EndGlobalSection\n    GlobalSection(SolutionProperties) = preSolution\n        HideSolutionNode = FALSE\n    EndGlobalSection\n    GlobalSection(ProjectConfigurationPlatforms) = postSolution\n        {FE320B4D-B077-4D3C-BBF4-306ADAA15842}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n        {FE320B4D-B077-4D3C-BBF4-306ADAA15842}.Debug|Any CPU.Build.0 = Debug|Any CPU\n        {FE320B4D-B077-4D3C-BBF4-306ADAA15842}.Release|Any CPU.ActiveCfg = Release|Any CPU\n        {FE320B4D-B077-4D3C-BBF4-306ADAA15842}.Release|Any CPU.Build.0 = Release|Any CPU\n    EndGlobalSection\nEndGlobal\n</code></pre></p> <p>SLN-filen inneh\u00e5ller en hel del information, d\u00e4r det viktigaste f\u00f6r oss \u00e4r vilka projekt som ing\u00e5r. I exemplet ing\u00e5r ett enda projekt \u2013 \"DemoProject\".</p>"},{"location":"grundlaeggande/reference-vs-value-types/","title":"Reference vs value types","text":"<p>Info</p> <p>OBS: Lite \u00f6verkurs =)</p>"},{"location":"grundlaeggande/reference-vs-value-types/#identifiers","title":"Identifiers","text":"<p>Variabelnamn \u00e4r egentligen bara namn p\u00e5 specifika minnesplatser i datorns RAM-minne.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>int t; // Reservera 32 bitar i datorns minne f\u00f6r att lagra heltal, \n       //  och namge den minnesadressen \"t\"\nt = 8; // Lagra heltalet 8 i den minnesaddress som har namnet \"t\".\n</code></pre></p> <p>Namnet n\u00e5got f\u00e5r kallas f\u00f6r en identifier.</p>"},{"location":"grundlaeggande/reference-vs-value-types/#minnet-stacken-och-heapen","title":"Minnet \u2013 stacken och heapen","text":"<p>F\u00f6renklat delas datorns minne upp i tv\u00e5 delar: Stacken och heapen.</p> <p>Stacken \u00e4r strukturerad, snabb och begr\u00e4nsad i storlek. Det man l\u00e4gger i den finns bara kvar s\u00e5 l\u00e4nge det nuvarande kodblocket k\u00f6rs.</p> <p>Heapen \u00e4r ostrukturerad, stor och det man l\u00e4gger i den lever kvar tills det tas bort. I en del spr\u00e5k betyder det att man alltid m\u00e5ste komma ih\u00e5g att ta bort saker som ligger d\u00e4r manuellt \u2013 i C# och en del andra spr\u00e5k finns s.k. Garbage Collection som d\u00e5 och d\u00e5 rensar bort saker i heapen som det inte l\u00e4ngre finns n\u00e5gon identifier som pekar mot.</p> <p>Identifiers finns alltid i stacken. I stacken skapas en koppling mellan identifiern och vad den \u00e4r satt att identifiera. S\u00e5 till exempel skapas h\u00e4r en koppling mellan identifiern \"x\" och v\u00e4rdet \"10\".</p> <p></p>"},{"location":"grundlaeggande/reference-vs-value-types/#value-types","title":"Value types","text":"<p>F\u00f6r datatyper som \u00e4r value types lagras ocks\u00e5 v\u00e4rdet i stacken. Int \u00e4r ett exempel p\u00e5 value type. S\u00e5 n\u00e4r int-variabeln t skapas s\u00e5 \u00e4r det i stacken namnet \"t\" associeras med ett 32-bitar stort minnesutrymme.</p> <p>Exempel p\u00e5 value types:</p> <ul> <li>int, float och \u00f6vriga numeriska typer.</li> <li>bool</li> <li>struct-typer</li> </ul> <p></p>"},{"location":"grundlaeggande/reference-vs-value-types/#reference-types","title":"Reference types","text":"<p>F\u00f6r datatyper som \u00e4r reference types lagras sj\u00e4lva objektet, datan, i heapen. Det enda som lagras p\u00e5 minnesadressen i stacken \u00e4r en referens vidare till platsen i stacken d\u00e4r datan finns.</p> <p>S\u00e5 identifiern pekar p\u00e5 en plats i stacken, p\u00e5 den platsen finns en vidarepekning till en plats i heapen.</p> <p>I stacken \u00e4r axe-identifiern inte kopplad direkt till en instans av Weapon, utan till en minnesadress d\u00e4r det finns en s\u00e5n instans.</p>"},{"location":"grundlaeggande/reference-vs-value-types/#varfor-ar-det-har-viktigt","title":"Varf\u00f6r \u00e4r det h\u00e4r viktigt?","text":""},{"location":"grundlaeggande/reference-vs-value-types/#tilldelning","title":"Tilldelning","text":"<p>Value types och reference types beter sig olika n\u00e4r tilldelnings-operatorn = anv\u00e4nds. Mer exakt beter de sig exakt lika \u2013 men eftersom de lagrar olika saker i stacken s\u00e5 blir effekten olika.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>int a = 9;\nint b = a; // Kopierar stack-positionen som identifiern a pekar p\u00e5\n           //  till stack-positionen som identifiern b pekar p\u00e5.\n</code></pre></p> <p></p> <p></p> <p>{% code lineNumbers=\"true\" %} <pre><code>Fighter f = new Fighter(); // Instans skapas av klassen Fighter.\n                           // Instansen lagras i heapen.\n                           // Identifiern f skapas och pekar mot en plats i stacken.\n                           // P\u00e5 den platsen finns en pekning till instansens plats\n                           //  i heapen.\n\nFighter f2 = f; // Identifiern f2 skapas.\n                // Det som finns p\u00e5 platsen i stacken som f pekar mot\n                // kopieras till platsen som f2 pekar p\u00e5.\n                // Inget nytt objekt skapas i heapen \u2013 b\u00e5de f1 och f2 pekar mot\n                //  samma objekt.\n</code></pre></p> <p>Innan tilldelningen av f2 finns bara f, som pekar till en Fighter-instans i heapen.</p> <p>Efter tilldelningen av f2 finns fortfarande bara en Fighter-instans; det som kopieras \u00e4r inneh\u00e5llet i stacken \u2013 allts\u00e5 pekaren.</p>"},{"location":"grundlaeggande/reference-vs-value-types/#parametervarden","title":"Parameterv\u00e4rden","text":"<p>Ovanst\u00e5ende g\u00e4ller ocks\u00e5 parametrar i metoder.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>int k = 9;\n\nTakeInt(k); // talet 9 kopieras fr\u00e5n k-identifiern till i-identifiern.\n\nstatic void TakeInt(int i)\n{\n  // variabeln i pekar mot sin helt egna kopia av talet 9.\n}\n</code></pre></p> <p>{% code lineNumbers=\"true\" %} <pre><code>Fighter f = new Fighter();\n\nTakeFight(f); // Referensen till fighter-instansen kopieras fr\u00e5n f till localFighter\n\nConsole.WriteLine(f.hp); // visar att f's hp-v\u00e4rde \u00e4ndrades inuti metodenc\n\nstatic void TakeFight(Fighter localFighter)\n{\n  // Variabeln localFighter pekar mot samma instans som variabeln f.\n  localFighter.hp -= 9; // \u00c4ndrar p\u00e5 instansens hp-v\u00e4rde\n}\n</code></pre></p>"},{"location":"grundlaeggande/reference-vs-value-types/#out-och-ref","title":"Out och ref","text":"<p>Info</p> <p>Varning: Anv\u00e4nd out och ref s\u00e5 lite som m\u00f6jligt. Det \u00e4r v\u00e4ldigt, v\u00e4ldigt l\u00e4tt att g\u00f6ra fel med dem.</p> <p>N\u00e4r en metod tar emot en parameter, \u00e4r det i vanliga fall s\u00e5 att det man f\u00e5r en kopia av v\u00e4rdet i stacken.</p> <p>Med out och ref kan man ist\u00e4llet f\u00e5 en pekare till platsen i stacken \u2013 vilket g\u00f6r att man inuti metoden kan \u00e4ndra variabelns v\u00e4rden direkt.</p> <p>Med andra ord \u2013 stoppar man in en variabel som ref eller out s\u00e5 f\u00e5r man vara beredd p\u00e5 att precis vad som helst kan ha h\u00e4nt med den efter\u00e5t. Den kan ha f\u00e5tt ett helt nytt v\u00e4rde eller till och med, om det \u00e4r en reference type-variabel, referera till ett helt annat objekt.</p> <pre><code>static void WithoutRef(int x)\n{\n  x++;\n}\n\nstatic void WithRef(ref int x)\n{\n  x++;\n}\n\nstatic void WithOut (out int x)\n{\n  x = 0;\n  x++;\n}\n\nint y = 3;\n\nWithoutRef(y);\nConsole.WriteLine(y); // 3\n\nWithRef(ref y);\nConsole.WriteLine(y); // 4\n\nWithOut(out y);\nConsole.WriteLine(y); // 1\n</code></pre> <p>Ref och out fungerar i princip likadant, men det finns skillnader:</p> <ul> <li>Med out m\u00e5ste variabeln initieras inuti metoden. Man kan allts\u00e5 inte \u00e4ndra ett existerande v\u00e4rde \u2013 variabeln som stoppas in kommer garanterat att ges ett helt annat v\u00e4rde i metoden.</li> <li>Med ref m\u00e5ste variabeln redan vara initierad innan den stoppas in som ref. Man kan inte ref:a en variabel man skapar p\u00e5 plats. Med out kan man skapa variabeln i parenteserna vid anropet.</li> </ul> <pre><code>// Fungerar:\nint t = 6;\nWithRef(ref t);\n\n// Fungerar inte:\nWithRef(ref int u);\n\n// Fungerar:\nWithOut(out int u);\n</code></pre>"},{"location":"grundlaeggande/slump/","title":"Slump (Random)","text":""},{"location":"grundlaeggande/slump/#slumpgenerator","title":"Slumpgenerator","text":"<p>En slumpgenerator \u00e4r ett objekt som anv\u00e4nds f\u00f6r att generera slumptal.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Skapar en slumpgenerator och g\u00f6r s\u00e5 att vi kan komma \u00e5t den \n// med hj\u00e4lp av variabeln \"generator\".\nRandom generator = new Random();\n</code></pre></p> <p>I Dotnet 6 och senare finns ocks\u00e5 en f\u00e4rdig slumpgenerator i <code>Random.Shared</code>.</p>"},{"location":"grundlaeggande/slump/#next-heltal-int","title":"Next \u2013 heltal (int)","text":"<p>Anv\u00e4nds f\u00f6r att slumpa heltal (int).</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Slumpar ett heltal mellan 0 och det st\u00f6rsta heltal int kan inneh\u00e5lla\nint r = Random.Shared.Next();\n</code></pre></p> <p>Next kan anropas med en parameter som anger \"taket\" f\u00f6r slumpen. Taket \u00e4r exklusivt, dvs det tal som anges kommer aldrig att slumpas - bara l\u00e4gre tal.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Slumpar ett heltal som \u00e4r 0, 1, 2 eller 3\nint r = Random.Shared.Next(4);\n</code></pre></p> <p>Om man anger tv\u00e5 parametrar s\u00e5 tolkas den f\u00f6rsta som ett golv, och den andra som ett tak. Golvet \u00e4r inklusivt, dvs det tal som anges kan komma att slumpas fram.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Slumpar ett heltal som \u00e4r 2, 3 eller 4\nint r = Random.Shared.Next(2,5);\n</code></pre></p>"},{"location":"grundlaeggande/slump/#nextdouble-decimaltal","title":"NextDouble  \u2013 decimaltal","text":"<p>Anv\u00e4nds f\u00f6r att slumpa decimaltal mellan 0 och 1. Man f\u00e5r v\u00e4rdet i form av en double, s\u00e5 den beh\u00f6ver dels multipliceras med ett tal f\u00f6r att bli n\u00e5got annat \u00e4n 0\u20131, och dels konverteras till float.</p> <pre><code>float percent = (float) Random.Shared.NextDouble() * 100f;\n</code></pre>"},{"location":"grundlaeggande/string-manipulering/","title":"Strings","text":"<p>En string \u00e4r i C# alltid of\u00f6r\u00e4nderlig; man kan inte \u00e4ndra direkt i en string. Men man kan anv\u00e4nda olika metoder f\u00f6r att skapa nya versioner av existerande strings.</p>"},{"location":"grundlaeggande/string-manipulering/#escape-sekvenser","title":"Escape-sekvenser","text":"<p>Genom att skriva  f\u00f6ljt av ett annat tecken kan man f\u00e5 vissa specialeffekter. \\n \u00e4r till exempel ny rad.</p> <pre><code>Console.WriteLine(\"Detta \u00e4r en rad\\nDetta \u00e4r en annan rad\");\n</code></pre> <p>Andra anv\u00e4ndbara sekvenser \u00e4r:</p> <ul> <li><code>\\\\</code> skriver ut ett faktiskt \\-tecken</li> <li><code>\\\"</code> skriver ut ett citattecken</li> <li><code>\\'</code> skriver ut ett enkelt citattecken</li> </ul>"},{"location":"grundlaeggande/string-manipulering/#string-interpolation","title":"String interpolation","text":"<p>Genom att skriva $ framf\u00f6r citattecknet kan man l\u00e4gga in variabler och \u00e4ven kod mitt i sina strings, mellan {}. Det viktiga \u00e4r att det man skriver in antingen \u00e4r en string, kan konverteras till en string eller blir en string n\u00e4r koden k\u00f6rs.</p> <pre><code>string name = \"Mikael\";\nConsole.WriteLine($\"Hello {name} how are you today?\");\n</code></pre>"},{"location":"grundlaeggande/string-manipulering/#verbatim-strings","title":"Verbatim strings","text":"<p>Genom att skriva @ framf\u00f6r citattecknet st\u00e4nger man av escape-sekvenser. Detta \u00e4r v\u00e4ldigt praktiskt ifall man vill l\u00e4gga in ASCII-art eller anv\u00e4nda m\u00e5nga '\\-tecken. Detta kan dock inte kombineras med string interpolation.</p> <pre><code>Console.Writeline(@\"\\\\\\\\\\--- inga problem ---/////\");\n</code></pre>"},{"location":"grundlaeggande/string-manipulering/#literal-strings","title":"Literal strings","text":"<p>Genom att anv\u00e4nda tre citattecken i b\u00f6rjan och slutet av en string kan man kombinera verbatim string-tolkning med string interpolation.</p> <p>Dessutom: om koden d\u00e4r stringen skapas \u00e4r indenterad, ignoreras denna indentering n\u00e4r stringen skrivs ut. Mycket praktiskt f\u00f6r l\u00e4ngre texter \u00f6verlag!</p> <pre><code>static void Hey()\n{\n  string name = \"Luka\";\n\n  string s = $\"\"\"\n    My name is {name}\n      I live on the second floor \n  \"\"\";\n\n  Console.WriteLine(s);\n}\n</code></pre>"},{"location":"grundlaeggande/string-manipulering/#string-metoder","title":"String-metoder","text":""},{"location":"grundlaeggande/string-manipulering/#replace","title":"Replace()","text":"<p>Byter ut ett tecken eller en del-string.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string oldString = \"Mikael \u00e4r min programmeringsl\u00e4rare\";\n\nstring newString = oldString.Replace(\"Mikael\", \"Micke\");\n</code></pre></p>"},{"location":"grundlaeggande/string-manipulering/#substring","title":"Substring()","text":"<p>Returnerar en del av stringen. Tar emot startposition och l\u00e4ngd som parametrar. Anges bara en parameter s\u00e5 antas l\u00e4ngden vara resten av stringen.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string oldstring = \"Detta \u00e4r en string\";\n\nstring sub1 = oldString.Substring(2,5); // sub1 blir \"tta \u00e4\"\n\nstring sub2 = oldString.Substring(2); // sub2 blir \"tta \u00e4r en string\"\n</code></pre></p>"},{"location":"grundlaeggande/string-manipulering/#trim","title":"Trim()","text":"<p>Returnerar en kopia av stringen d\u00e4r mellanslag och andra \"tomma\" tecken tagits bort fr\u00e5n b\u00f6rjan och slutet.</p> <pre><code>string clean = oldString.Trim();\n</code></pre> <p>Det finns ocks\u00e5 <code>TrimEnd</code> och <code>TrimStart</code> ifall man bara vill trimma slutet eller b\u00f6rjan av stringen.</p>"},{"location":"grundlaeggande/string-manipulering/#insert","title":"Insert()","text":"<p>Returnerar en kopia av stringen d\u00e4r en annan string stoppats in p\u00e5 en angiven plats. Tar emot en position och en string som parametrar.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string folk = \"micke och kim och mimmi\";\n\nstring nyFolk = folk.insert(5, \" och herbert\"); \n// nyFolk blir \"micke och herbert och kim och mimmi\"\n</code></pre></p>"},{"location":"grundlaeggande/string-manipulering/#contains","title":"Contains()","text":"<p>Kollar om en string inneh\u00e5ller en annan string, t.ex. ifall \"haj\" finns i texten \"en haj hoppar \u00f6ver en bj\u00f6rn\". Returnerar true om den finns, false om den inte g\u00f6r det.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string answer = Console.ReadLine();\nbool hasAShark = answer.Contains(\"haj\");\n\nif (hasAShark == true)\n{\n  Console.WriteLine(\"Du skrev n\u00e5got med ordet haj!\");\n}\n</code></pre></p>"},{"location":"grundlaeggande/string-manipulering/#indexof","title":"IndexOf()","text":"<p>Returnerar positionen f\u00f6r den f\u00f6rsta plats i stringen d\u00e4r en annan string finns. Tar emot n\u00e5got att s\u00f6ka efter som parameter.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string folk = \"micke och kim och mimmi\";\nint kimPlats = folk.IndexOf(\"kim\");\nint mellanslagPlats = folk.IndexOf(\" \");\n</code></pre></p> <p>Resultatet av ovanst\u00e5ende blir att variabeln kimPlats f\u00e5r v\u00e4rdet 10 och att mellanslagPlats f\u00e5r v\u00e4rdet 5. Positionssiffrorna b\u00f6rjar p\u00e5 0.</p>"},{"location":"grundlaeggande/string-manipulering/#toupper","title":"ToUpper()","text":"<p>Returnerar en kopia av stringen d\u00e4r alla gemener (sm\u00e5 bokst\u00e4ver) bytts ut mot versaler (stora bokst\u00e4ver).</p> <pre><code>string caps = oldString.ToUpper();\n</code></pre>"},{"location":"grundlaeggande/string-manipulering/#tolower","title":"ToLower()","text":"<p>Returnerar en kopia av stringen d\u00e4r alla versaler (stora bokst\u00e4ver) bytts ut mot gemener (sm\u00e5 bokst\u00e4ver).</p> <pre><code>string small = oldString.ToLower();\n</code></pre> <p>Denna anv\u00e4nds ofta f\u00f6r att till exempel f\u00f6rvandla strings man f\u00e5tt in fr\u00e5n en anv\u00e4ndare s\u00e5 att det inte spelar n\u00e5gon roll ifall hen svarat t.ex. JA, Ja, jA eller ja.</p>"},{"location":"grundlaeggande/string-manipulering/#satta-ihop-och-ta-isar","title":"S\u00e4tta ihop och ta is\u00e4r","text":""},{"location":"grundlaeggande/string-manipulering/#stringjoin","title":"String.Join()","text":"<p>S\u00e4tter ihop alla element i en array till en string. Tar emot tv\u00e5 parametrar; en separator som placeras mellan elementen och en array med de element som ska s\u00e4ttas ihop.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string[] names = {\"micke\", \"kim\", \"mimmi\"};\nstring folk = String.Join(\" och \", names);\n\n// Variabeln \"folk\" f\u00e5r namnet \"micke och kim och mimmi\"\n</code></pre></p>"},{"location":"grundlaeggande/string-manipulering/#split","title":"Split()","text":"<p>Returnerar en array som best\u00e5r av en uppdelad string. Tar emot en separator som parameter. Separatorn kan bara vara ett ensamt tecken, en char.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string folk = \"micke och kim och mimmi\";\nstring[] names = folk.Split(' ');\n\n// Variabeln \"names\" f\u00e5r inneh\u00e5llet {\"micke\", \"och\", \"kim\", \"och\", \"mimmi\"}\n</code></pre></p>"},{"location":"grundlaeggande/string-manipulering/#en-string-ar-en-array","title":"En string \u00e4r en array","text":"<p>I grunden \u00e4r en string helt enkelt en array av chars. Det betyder att man kan anv\u00e4nda alla tekniker man normalt kan med arrayer \u2013 Length, indexering och ranges till exempel \u2013 \u00e4ven med strings</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string name = \"Mikael Bergstr\u00f6m\";\n\nchar firstChar = name[0]; // firstChar blir M\n\nstring firstPart = name[..6]; // firstPart blir \"Mikael\"\n</code></pre></p>"},{"location":"grundlaeggande/try-catch/","title":"Try-catch och Exception","text":""},{"location":"grundlaeggande/try-catch/#try-och-catch","title":"Try och catch","text":"<p>N\u00e4r man l\u00e4gger in kod i ett try-block s\u00e5 f\u00f6rhindrar det att programmet avslutas n\u00e4r ett runtime-fel intr\u00e4ffar, t.ex. att man f\u00f6rs\u00f6ker konvertera n\u00e5got som inte kan konverteras eller komma \u00e5t ett index som inte finns i en array. Kort sagt f\u00f6rs\u00f6ker C# k\u00f6ra koden. Ist\u00e4llet avbryts k\u00f6rningen, och programmet hoppar ist\u00e4llet ner till det catch-block som st\u00e5r under.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>int[] nums = {4, 5, 7};\n\ntry\n{\n  Console.WriteLine(nums[8]); // Orsakar ett IndexOutOfRange-fel\n}\ncatch\n{\n  Console.WriteLine(\"Nope!\");\n}\n</code></pre></p> <p>Ett Try-block m\u00e5ste alltid paras ihop med minst ett Catch-block.</p>"},{"location":"grundlaeggande/try-catch/#att-fanga-specifika-fel","title":"Att f\u00e5nga specifika fel","text":"<p>N\u00e4r man f\u00e5r ett runtime-fel s\u00e5 talar C# alltid om vad det \u00e4r f\u00f6r fel.</p> <p>Om du vill skriva ett catch-block f\u00f6r att f\u00e5nga ett specifikt fel s\u00e5 specificerar du feltypen inom parenteser.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>int[] nums = { 4, 5, 7 };\n\ntry\n{\n  Console.WriteLine(nums[8]);\n}\ncatch (System.IndexOutOfRangeException)\n{\n  Console.WriteLine(\"Fel index!\");\n}\n</code></pre></p> <p>Du kan skriva in flera olika catch-block om du vill:</p> <p>{% code lineNumbers=\"true\" %} <pre><code>int[] nums = { 4, 5, 7 };\n\ntry\n{\n  Console.WriteLine(nums[8]);\n}\ncatch (System.IndexOutOfRangeException)\n{\n  Console.WriteLine(\"Fel index!\");\n}\ncatch\n{\n  Console.WriteLine(\"N\u00e5got annat fel!\");\n}\n</code></pre></p>"},{"location":"grundlaeggande/try-catch/#throw","title":"Throw","text":"<p>Om du vill kan du, i dina egna metoder, ge upphov till ett exception som sedan m\u00e5ste catch:as d\u00e4r metoden anropas. P\u00e5 s\u00e5 vis m\u00e5ste du inte hantera alla fel direkt, utan kan sk\u00f6ta allt s\u00e5dant p\u00e5 ett st\u00e4lle.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>static int DoThing(int i)\n{\n  int[] nums = { 4, 5, 7 };\n\n  if (i &gt;= nums.Length || i &lt; 0)\n  {\n    throw new IndexOutOfRangeException();\n  }\n\n  return nums[i];\n}\n</code></pre></p>"},{"location":"grundlaeggande/try-catch/#kasta-upp","title":"Kasta upp","text":"<p>Om du catch:ar ett fel du inte vill hantera direkt, s\u00e5 kan du helt enkelt anv\u00e4nda throw f\u00f6r att tvinga den som anropade den nuvarande metoden att hantera felet.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>static int DoThing(int i)\n{\n  int[] nums = { 4, 5, 7 };\n  try\n  {\n    return nums[i];\n  }\n  catch\n  {\n    throw;\n  }\n}\n</code></pre></p>"},{"location":"grundlaeggande/try-catch/#exception-typer-ar-klasser","title":"Exception-typer \u00e4r klasser","text":"<p><code>System.IndexOutOfRangeException</code> \u00e4r en klass, liksom alla andra sorters exceptions. De har alla System.Exception som basklass. Det g\u00f6r att man kan f\u00e5nga in alla exceptions genom att catch:a System.Exception och sedan unders\u00f6ka felet man f\u00e5tt genom t.ex. <code>is</code>.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>int[] nums = { 4, 5, 7 };\ntry\n{\n  Console.WriteLine(nums[8]);\n}\ncatch (Exception e)\n{\n  if (e is System.IndexOutOfRangeException)\n  {\n    Console.WriteLine(\"Indexfel!\");\n  }\n}\n</code></pre></p>"},{"location":"grundlaeggande/typkonvertering/","title":"Typkonvertering","text":""},{"location":"grundlaeggande/typkonvertering/#implicit-konvertering","title":"Implicit konvertering","text":"<p>En del datatyper kan l\u00e4tt konverteras till andra utan att man beh\u00f6ver g\u00f6ra n\u00e5gon manuell konvertering. Det g\u00e4ller framf\u00f6r allt n\u00e4r konverteringen inte inneb\u00e4r att man blir av med information eller precision.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>int i = 9;\nlong l = i;\n</code></pre></p>"},{"location":"grundlaeggande/typkonvertering/#exempel","title":"Exempel:","text":"<ul> <li>int \u2192 long</li> <li>int \u2192 string</li> <li>int \u2192 float</li> <li>float \u2192 double</li> </ul>"},{"location":"grundlaeggande/typkonvertering/#casting","title":"Casting","text":"<p>N\u00e4r konverteringen inneb\u00e4r att man blir av med precision, t.ex. g\u00e5r fr\u00e5n en float till en int och blir av med decimaler, s\u00e5 anv\u00e4nder man ibland casting. Det betyder att man helt enkelt skriver vilken datatyp man vill konvertera till inom parenteser innan v\u00e4rdet som ska konverteras.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>float xPos = 3.4f;\nint x = (int) xPos;\n</code></pre></p>"},{"location":"grundlaeggande/typkonvertering/#as","title":"As","text":"<p>As fyller en liknande funktion som casting, men fungerar bara p\u00e5 datatyper som \u00e4r av referenstyp (t.ex. klasser) och datatyper som kan bli null (t.ex. string). Detta \u00e4r mest anv\u00e4ndbart n\u00e4r man anv\u00e4nt polymorfi.</p> <p>As g\u00e5r ocks\u00e5 lite snabbare \u00e4n casting.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// S\u00e4ger att instansen som enemy-variabeln pekar mot \u00e4r en instans av Goomba,\n//  och att Goomba-variabeln \"g\" ocks\u00e5 ska peka mot samma instans.\nGoomba g = enemy as Goomba;\n</code></pre></p>"},{"location":"grundlaeggande/typkonvertering/#is","title":"Is","text":"<p>Is kan anv\u00e4ndas f\u00f6r att se vilken datatyp ett v\u00e4rde \u00e4r. Detta \u00e4r mest anv\u00e4ndbart n\u00e4r man anv\u00e4nt polymorfi.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Om instansen som enemy-variabeln pekar mot \u00e4r en instans av Goomba-klassen,\n//  s\u00e5 k\u00f6r koden inuti if-blocket.\n\nif (enemy is Goomba)\n{\n  // ---\n}\n</code></pre></p> <p>Is kan ocks\u00e5 g\u00f6ra en samtidig As-operation.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Om instansen som enemy-variabeln pekar mot \u00e4r en instans av Goomba-klassen\n//  s\u00e5 skapa en ny variabel \"g\" som \u00e4r an datatypen Goomba och pekar mot\n//  samma instans.\n\nif (enemy is Goomba g)\n{\n  g.SetColor(\"Brown\");\n}\n</code></pre></p>"},{"location":"grundlaeggande/typkonvertering/#konvertera-till-int","title":"Konvertera till int","text":""},{"location":"grundlaeggande/typkonvertering/#intparse","title":"int.Parse()","text":"<p>M\u00e5nga datatyper kan inte konverteras direkt till t.ex. en int. Metoden int.Parse tar emot n\u00e4stan vad som helst \u2013 t.ex. en string \u2013 och f\u00f6rs\u00f6ker konvertera den till en int.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string tal = \"42\";\nint i = int.Parse(tal);\n</code></pre></p> <p>Warning</p> <p>OBS: Parse kommer att orsaka ett runtime error ifall den string som anges inte kan konverteras till en int. Anv\u00e4nd try-catch f\u00f6r att f\u00e5nga upp felet eller anv\u00e4nd TryParse ist\u00e4llet f\u00f6r Parse.</p>"},{"location":"grundlaeggande/typkonvertering/#inttryparse","title":"int.TryParse()","text":"<p>F\u00f6r en enkel, s\u00e4ker konvertering kan man anv\u00e4nda TryParse.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string tal = \"42\";\nint resultat;\nbool lyckad = int.TryParse(tal, out resultat);\n</code></pre></p> <p>TryParse returnerar true om konverteringen lyckades, false om den inte lyckades. Resultatet lagras i variabeln som anges som \"out\"-variabel i den andra parametern (i exemplet, variabeln \"resultat\"). Om konverteringen misslyckas s\u00e5 blir resultatet 0.</p>"},{"location":"grundlaeggande/typkonvertering/#konvertera-till-float","title":"Konvertera till float","text":""},{"location":"grundlaeggande/typkonvertering/#floatparse","title":"float.Parse()","text":"<p>Tar emot ett v\u00e4rde, och konverterar det till en float \u2013 om det g\u00e5r. Resultatet av konverteringen returneras.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string tal = \"42.5\"\nfloat f = float.Parse(tal);\n</code></pre></p> <p>Om det inte g\u00e5r att konvertera v\u00e4rdet till en float, kommer Parse att ge ifr\u00e5n sig ett runtime-felmeddelande.</p>"},{"location":"grundlaeggande/typkonvertering/#floattryparse","title":"float.TryParse()","text":"<p>F\u00f6r en enkel, s\u00e4ker konvertering kan man anv\u00e4nda TryParse.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>string tal = \"42.5\";\nfloat f;\nbool lyckad = float.TryParse(tal, out f);\n</code></pre></p> <p>TryParse returnerar true om konverteringen lyckades, false om den inte lyckades. Resultatet lagras i variabeln som anges som \"out\"-variabel i den andra parametern (i exemplet, variabeln \"resultat\"). Om konverteringen misslyckas s\u00e5 blir resultatet 0.</p>"},{"location":"grundlaeggande/vektorer-numerics/","title":"Vektorer (Numerics)","text":"<p>Numerics \u00e4r ett bibliotek som inneh\u00e5ller mer avancerade numeriska typer, som komplement till de vanliga, t.ex. int.</p> <pre><code>using System.Numerics;\n</code></pre> <p>De anv\u00e4nds ofta i spel, till exempel s\u00e5dana man skapar med Raylib. D\u00e4remot har Unity sina egna Vector-klasser.</p>"},{"location":"grundlaeggande/vektorer-numerics/#vector2","title":"Vector2","text":"<p>En Vector2 \u00e4r en tv\u00e5dimensionell vektor som best\u00e5r av tv\u00e5 komposanter, en i x-led och en i y-led. Komposanterna har datatypen float.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>// Skapa en vektor med X-v\u00e4rde 20 och Y-v\u00e4rde 30.5\nVector2 position = new Vector2(20f, 30.5f);\n</code></pre></p> <p>Man kan anv\u00e4nda r\u00e4knes\u00e4tt med vektorer.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Vector2 position = new Vector2(20, 20);\nVector2 movement = new Vector2(0.1f, 0.1f);\n\n// Adderar movement-vektorn till position-vektorn\nposition += movement;\n</code></pre></p> <p>Man kan till och med kombinera vektorer med vanliga siffror och r\u00e4knes\u00e4tt.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Vector2 position = new Vector2(20, 20);\n\n// Skapar en vektor med X-v\u00e4rde 1 och Y-v\u00e4rde 0; \n// multiplicerar sedan b\u00e5de X och Y med 0.5.\nVector2 movement = new Vector2(1f, 0f) * 0.5f;\n\nposition += movement;\n</code></pre></p>"},{"location":"grundlaeggande/vektorer-numerics/#x-och-y","title":"X och Y","text":"<p>X och Y \u00e4r float-egenskaper hos varje vektor.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Vector2 position = new Vector2(20, 30);\n\nConsole.WriteLine(position.X); // 20\nConsole.WriteLine(position.Y); // 30\n</code></pre></p>"},{"location":"grundlaeggande/vektorer-numerics/#length","title":"Length()","text":"<p>En metod inbyggd i varje vektor. Ger vektorns storlek (magnitud) som en float.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Vector2 position = new Vector2(20, 20);\nfloat l = position.Length(); // 28.284271\n</code></pre></p>"},{"location":"grundlaeggande/vektorer-numerics/#vector2distance","title":"Vector2.Distance()","text":"<p>Ger avst\u00e5ndet mellan tv\u00e5 vektorer som en float.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Vector2 position = new Vector2(20, 20);\nVector2 enemyPosition = new Vector2(30, 30);\n\nfloat d = Vector2.Distance(position, enemyPosition); // 14.142136\n</code></pre></p>"},{"location":"grundlaeggande/vektorer-numerics/#vector2normalize","title":"Vector2.Normalize()","text":"<p>Ger en normaliserad version av en vektor.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Vector2 position = new Vector2(20, 10);\n\n// Ger en vektor med storlek 1, X 0.8944272 och Y 0.4472136\nVector2 n = Vector2.Normalize(position);\n</code></pre></p>"},{"location":"grundlaeggande/datatyper/","title":"Datatyper [\u2026]","text":""},{"location":"grundlaeggande/datatyper/#int","title":"int","text":"<p>Integer, heltal.</p> <pre><code>int x = 3;\n</code></pre> <p>Man kan anv\u00e4nda understreck f\u00f6r att g\u00f6ra heltalen mer l\u00e4ttl\u00e4sta.</p> <pre><code>int million = 1_000_000;\n</code></pre>"},{"location":"grundlaeggande/datatyper/#string","title":"string","text":"<p>En string \u00e4r en text \u2013 en serie tecken efter varandra.</p> <pre><code>string s = \"Hello\";\n</code></pre> <p>Mer om strings finns h\u00e4r</p>"},{"location":"grundlaeggande/datatyper/#float","title":"float","text":"<p>Flyttal, decimaltal.</p> <pre><code>float y = 3.4692f;\n\nConsole.WriteLine(y:N2); // Skriver ut talet med 2 decimaler\n</code></pre>"},{"location":"grundlaeggande/datatyper/#double","title":"double","text":"<p>Decimaltal som kan inneh\u00e5lla st\u00f6rre tal \u2013 dubbelt s\u00e5 stora som floats.</p> <pre><code>double x = 7.892;\n\nConsole.WriteLine(x:N2); // Skriver ut talet med 2 decimaler\n</code></pre>"},{"location":"grundlaeggande/datatyper/#bool","title":"bool","text":"<p>Boolskt v\u00e4rde, \u00e4r antingen true eller false.</p> <pre><code>bool z = true;\n</code></pre>"},{"location":"grundlaeggande/datatyper/#char","title":"char","text":"<p>Ett tecken.</p> <pre><code>char c = '\u00e4';\n</code></pre>"},{"location":"grundlaeggande/datatyper/#charis","title":"Char.Is\u2026","text":"<p>I klassen Char finns flera metoder f\u00f6r att unders\u00f6ka char-tecken. Till exempel:</p> <pre><code>Char.IsDigit(c) // true om c \u00e4r en siffra\nChar.IsLetter(c) // true om c \u00e4r en bokstav\nChar.IsLetterOrDigit(c) // true om c \u00e4r en siffra eller en bokstav\nChar.IsUpper(c) // true om c \u00e4r en STOR BOKSTAV\nChar.IsWhiteSpace(c) // true om c \u00e4r ett mellanslag, en tabb eller en radbrytning\n</code></pre> <p>Observera att definitionen av \"siffra\" h\u00e4r inte bara inkluderar tecknen 0\u20139 utan ocks\u00e5 till exempel thail\u00e4ndska siffertecken.</p>"},{"location":"grundlaeggande/datatyper/#andra-heltal","title":"Andra heltal","text":"<p>\u00d6verkurs: det finns ett antal olika s\u00e4tt att spara heltal, och de har olika min- och maxv\u00e4rden.</p> <ul> <li>int, eller int32, \u00e4r en 32-bitars integer. Den anv\u00e4nder 32 ettor och nollor (bits/bitar) f\u00f6r att lagra ett heltal som kan vara positivt eller negativt. En av bitarna anv\u00e4nds f\u00f6r att avg\u00f6ra ifall talet \u00e4r positivt eller negativt.</li> <li>long, eller int64, \u00e4r en 64-bitars integer.</li> <li>short, eller int16, \u00e4r en 16-bitars integer.</li> <li>uint, ulong och ushort \u00e4r versioner av int, long och short som inte kan bli negativa \u2013 men i geng\u00e4ld kan m\u00e4ta st\u00f6rre positiva tal. Eftersom ingen bit anv\u00e4nds f\u00f6r att avg\u00f6ra om talet \u00e4r positivt/negativt.</li> </ul> <p>Vilken som \u00e4r l\u00e4mplig vid vilket tillf\u00e4lle beror p\u00e5 hur h\u00f6ga tal man beh\u00f6ver lagra samt hur viktigt det \u00e4r att spara p\u00e5 minnesutrymmet.</p> <pre><code>Console.WriteLine(int.MaxValue); //   2147483647\nConsole.WriteLine(int.MinValue); //  -2147483648\nConsole.WriteLine(uint.MaxValue); // 4294967295\nConsole.WriteLine(uint.MinValue); // 0\n\nConsole.WriteLine(long.MaxValue); //   9223372036854775807\nConsole.WriteLine(long.MinValue); //  -9223372036854775808\nConsole.WriteLine(ulong.MaxValue); // 18446744073709551615\nConsole.WriteLine(ulong.MinValue); // 0\n\nConsole.WriteLine(short.MaxValue); // 32767\nConsole.WriteLine(short.MinValue); // -32768\nConsole.WriteLine(ushort.MaxValue); // 65535\nConsole.WriteLine(ushort.MinValue); // 0\n</code></pre>"},{"location":"grundlaeggande/datatyper/#void","title":"Void","text":"<p>Void \u00e4r egentligen inte en datatyp \u2013 det \u00e4r mer ett ord som anv\u00e4nds n\u00e4r man specifikt inte f\u00f6rv\u00e4ntar sig n\u00e5gon data. Void anv\u00e4nds bara som returdatatyp f\u00f6r metoder som inte ska returnera n\u00e5got.</p>"},{"location":"grundlaeggande/datatyper/#null","title":"Null","text":"<p>Null \u00e4r inte heller riktigt en datatyp, utan snarare \"icke-data\". En string-variabel som ges v\u00e4rdet null \u00e4r inte ens en tom string \u2013 det \u00e4r ett icke-v\u00e4rde.</p>"},{"location":"grundlaeggande/datatyper/enum/","title":"Enum","text":"<p>Enums \u00e4r ett snabbt, enkelt s\u00e4tt att skapa egna \"datatyper\".</p> <p>Man skriver dem utanf\u00f6r de vanliga metoderna.</p> <p>N\u00e4r man skapar en enum, s\u00e5 best\u00e4mmer man vilka v\u00e4rden som ska vara giltiga \u2013 ungef\u00e4r som att de enda giltiga v\u00e4rdena f\u00f6r en boolean \u00e4r true och false.</p> <pre><code>Enum Room {\n  entrance,\n  corridor,\n  dungeon\n}\n</code></pre> <p>I exemplet \u00e4r de enda giltiga v\u00e4rdena f\u00f6r en variabel med Rooms-datatypen entrance, corridor och dungeon.</p> <p>Senare, i metoderna, kan de anv\u00e4ndas som datatyper.</p> <p>Man skapar allts\u00e5 variabler d\u00e4r man anger datatypen som enum-namnet:</p> <pre><code>Room currentRoom = Room.entrance;\n</code></pre> <p>Man kan ocks\u00e5 anv\u00e4nda dem i till exempel if-satser:</p> <pre><code>if (currentRoom == Room.corridor)\n{\n  // kod\n}\n</code></pre> <p>Vill man skapa mer komplexa egna datatyper s\u00e5 \u00e4r det klasser som g\u00e4ller.</p>"},{"location":"grundlaeggande/datatyper/string/","title":"String","text":"<p>En string \u00e4r en text \u2013 en serie tecken efter varandra.</p> <pre><code>string s = \"Hello\";\n</code></pre>"},{"location":"grundlaeggande/datatyper/string/#interpolated-strings","title":"$ \u2013 interpolated strings","text":"<p>Om man skriver $ framf\u00f6r en string, s\u00e5 kan man sedan stoppa in variabler och metodanrop och annat inuti m\u00e5svingar i stringen. Det som st\u00e5r innanf\u00f6r m\u00e5svingarna utv\u00e4rderas och blir en del av stringen.</p> <pre><code>int hp = 100;\nstring s = $\"Du har {hp} hit points kvar\";\n</code></pre> <p>Om man har ett decimaltal (float eller double) s\u00e5 kan man skriva : och sedan ett format med t.ex. antal decimaler.</p> <pre><code>float c = 23;\nfloat f = 32 + (c * 1.8f);\nConsole.WriteLine($\"Fahrenheit: {f:00.00}\");\n</code></pre>"},{"location":"grundlaeggande/datatyper/string/#tolower","title":"ToLower()","text":"<p>En metod som \u00e4r inbyggd i alla strings, och ger en kopia av stringen d\u00e4r alla stora bokst\u00e4ver bytts ut mot sm\u00e5.</p> <pre><code>string name = \"Micke\";\nstring nameSmall = name.ToLower(); // v\u00e4rdet i nameSmall blir \"micke\".\n</code></pre> <p>Detta \u00e4r praktiskt n\u00e4r man t.ex. vill g\u00f6ra j\u00e4mf\u00f6relser och det inte ska spela n\u00e5gon roll ifall anv\u00e4ndaren skriver med stor bokstav.</p>"},{"location":"grundlaeggande/datatyper/string/#length","title":"Length","text":"<p>Length \u00e4r en egenskap alla strings har. Det \u00e4r en int som inneh\u00e5ller det antal tecken stringen har.</p> <pre><code>Console.WriteLine($\"Texten {s} har {s.Length} tecken\");\n</code></pre>"},{"location":"grundlaeggande/datatyper/string/#specialtecken","title":"<code>\\</code> \u2013 specialtecken","text":"<p>Om man skriver <code>\\</code> i en string s\u00e5 kommer tecknet efter att tolkas som ett specialtecken. Det vanligaste \u00e4r <code>\\n</code>, som \u00e4r en newline (ny rad).</p> <pre><code>Console.WriteLine(\"Detta \u00e4r f\u00f6rsta raden.\\nDetta \u00e4r andra raden.\");\n</code></pre>"},{"location":"grundlaeggande/datatyper/string/#raw-literal-strings","title":"<code>\"\"\"</code> \u2013 raw literal strings","text":"<p>V\u00e4ldigt praktiskt f\u00f6r ASCII-art och andra strings som har flera rader.</p> <p>Om man anv\u00e4nder tre citattecken f\u00f6re och efter en string:</p> <ul> <li>Alla tecken inklusive <code>\"</code> och <code>\\</code> tolkas som vanliga tecken snarare \u00e4n kommandon.</li> <li>Framf\u00f6r allt den avslutande <code>\"\"\"</code> m\u00e5ste vara p\u00e5 en egen ny rad</li> <li>Ingen rad i stringen f\u00e5r b\u00f6rja l\u00e4ngre \u00e5t v\u00e4nster \u00e4n den avslutande <code>\"\"\"</code>.</li> <li>Indraget f\u00f6r sista \"\"\" anger var alla raderna anses \"b\u00f6rja\", s\u00e5 \u00e4ven om hela stringen har ett indrag p\u00e5 8 mellanslag s\u00e5 kommer den skrivas ut med 2 mellanslags indrag om den avslutande \"\"\" \u00e4r indragen 6 mellanslag.</li> <li>Man kan fortfarande anv\u00e4nda <code>$</code> och <code>{}</code> f\u00f6r att infoga variabler.</li> </ul> <pre><code>Console.WriteLine(\"\"\"\n          _  .   .   .\n        .' '; '-' '-'|-.\n      (     '------.'  )\n        ;            \\ /\n        :     '   ' |/\n        '._._       \\    .;\n        .-'   ;--.    '--' /\n      /      \\-'---.___.'\n      |     / 7 \\(&gt;o&lt;) /  \n      |     | \\ |  . \\     \n      |=====|   |  .  \\ |-)\n      |-'-'   ./_.-._.\\|\"\n      '-.----'        |\n        |       |     |\n        |     | |   | |\n        |_____|_|___|_|\n        (-------',----'.\n          '-'-----'-----'         \n    \"\"\");\n</code></pre>"},{"location":"grundlaeggande/datatyper/string/#literal-strings","title":"@ \u2013 literal strings","text":"<p>Om man skriver @ framf\u00f6r en string, s\u00e5 kommer varje tecken i denna string sedan att tolkas v\u00e4ldigt bokstavligt. Framf\u00f6r allt anv\u00e4nds detta n\u00e4r man inte vill att  ska tolkas, utan bara skrivas ut som just \\. Det \u00e4r praktiskt n\u00e4r man ska g\u00f6ra s\u00f6kv\u00e4gar i Windows.</p> <pre><code>Console.WriteLine(@\"Detta \u00e4r f\u00f6rsta raden.\\nDetta \u00e4r ocks\u00e5 f\u00f6rsta rader.\");\n</code></pre>"},{"location":"grundlaeggande/datatyper/string/#all","title":"All()","text":"<p>All() \u00e4r en del av Linq-biblioteket s\u00e5 man m\u00e5ste f\u00f6rst ha med <code>using System.Linq</code>. All har en delegate som parameter, och f\u00f6rv\u00e4ntar sig d\u00e5 en metod (eller ett lambda-uttryck) som tar emot en <code>char</code> och returnerar <code>true</code> eller <code>false</code>. All stoppar sedan i var och ett av stringens tecken in i den angivna metoden. Om resultatet f\u00f6r alla blir <code>true</code> s\u00e5 returnerar All ocks\u00e5 <code>true</code>.</p> <pre><code>using System.Linq;\n\nstring s1 = \"12345\";\nstring s2 = \"123a45;\n\nbool b1 = s1.All(char.IsDigit); // b1 = true\nbool b2 = s2.All(char.IsDigit); // b2 = false\n</code></pre>"},{"location":"grundlaeggande/datatyper/tuples/","title":"Tuples","text":"<p>OBS: Detta fungerar bara i lite nyare C#. Om du arbetar i Visual Studio 2017 finns risk att Tuples inte fungerar om du inte kr\u00e5nglar lite (det g\u00e5r eventuellt att l\u00e4gga till st\u00f6d f\u00f6r tuples genom att l\u00e4gga till det NuGet-paket som heter ValueTuples)</p> <p>Tuples \u00e4r ett s\u00e4tt att lagra flera bitar information i samma variabel.</p> <p>Datatypen f\u00f6r variabeln anges d\u00e5 som en parentes, och i den parentesen skriver man datatyperna som ska ing\u00e5, i ordning.</p> <pre><code>(int, int) coordinate = (3, 4);\n\n(string, int) property = (\"strength\", 10);\n</code></pre> <p>N\u00e4r man g\u00f6r som i exemplen ovan s\u00e5 f\u00e5r varje egenskap ett automatiskt namn, utifr\u00e5n modellen item#, d\u00e4r # \u00e4r numret i ordningen f\u00f6r den datan.</p> <p>S\u00e5 f\u00f6r att f\u00e5 ut trean ur koordinaten skulle man skriva:</p> <pre><code>Console.WriteLine(coordinate.item1);\n</code></pre> <p>Och f\u00f6r att f\u00e5 fram v\u00e4rdet 10 s\u00e5 skulle man skriva:</p> <pre><code>Console.WriteLine(property.item2);\n</code></pre> <p>Observera allts\u00e5 att namngivningen b\u00f6rjar p\u00e5 1 och inte 0!</p>"},{"location":"grundlaeggande/datatyper/tuples/#namnge-en-tuples-egenskaper","title":"Namnge en tuples egenskaper","text":"<p>Man kan ge egenskaperna namn, som man d\u00e5 best\u00e4mmer n\u00e4r man skapar datatypen.</p> <pre><code>(int x, int y) coordinates = (3, 4);\nConsole.WriteLine(coordinates.x);\n</code></pre>"},{"location":"grundlaeggande/datatyper/tuples/#tuples-i-arrayer-och-listor","title":"Tuples i arrayer och listor","text":"<pre><code>(int x, int y)[] coordinateArray = new (int, int)[10];\nList&lt;(int x, int y)&gt; coordinateList = new List&lt;(int, int)&gt;();\n</code></pre>"},{"location":"grundlaeggande/datatyper/tuples/#tuples-som-returtyp","title":"Tuples som returtyp","text":"<pre><code>static (int x, int y) GetCoordinates()\n{\n  return (5, 6)\n}\n</code></pre>"},{"location":"grundlaeggande/datatyper/tuples/#tuples-som-parameter","title":"Tuples som parameter","text":"<pre><code>static void ReceiveCoordinate((int x, int y) coord)\n{\n  Console.WriteLine(coord.x);\n}\n</code></pre>"},{"location":"klasser-och-objektorientering/abstract/","title":"Abstract","text":""},{"location":"klasser-och-objektorientering/abstract/#abstrakta-klasser","title":"Abstrakta klasser","text":"<p>En abstrakt klass kan aldrig instansieras, utan kan bara anv\u00e4ndas som basklass f\u00f6r arv.</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>abstract class Character\n{\n  public string Name;\n  public int Hp = 100;\n\n  public void Hurt(int amount)\n  {\n    Hp -= amount;\n  }\n}\n</code></pre></p> <p>{% code title=\"Hero.cs\" lineNumbers=\"true\" %} <pre><code>class Hero: Character\n{\n  int _xp = 0;\n  int _level = 1;\n  public void AddExperience(int amount)\n  {\n    _xp += amount;\n    _level = 1 + _xp / 10;\n  }\n}\n</code></pre></p>"},{"location":"klasser-och-objektorientering/abstract/#abstrakta-metoder","title":"Abstrakta metoder","text":"<p>Den huvudsakliga anledningen till att g\u00f6ra en basklass abstrakt \u00e4r f\u00f6r att man vill kunna anv\u00e4nda sig av abstrakta metoder. En abstrakt metod saknar kod, och m\u00e5ste overridas i alla subklasser. Det \u00e4r med andra ord ett s\u00e4tt att tvinga de som skapar subklasser att bygga egna versioner av den metoden.</p> <p>Abstrakta metoder fungerar b\u00e4st i de fall d\u00e4r det inte finns n\u00e5gon l\u00e4mplig \"standardversion\" av metoden som kan ing\u00e5 i basklassen</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>abstract class Character\n{\n  public string Name;\n  public int Hp = 100;\n  public int Strength = 5;\n  public int Level = 1;\n  public int Xp = 0;\n  public string[] Attacks = {\"Kick\", \"Punch\"}\n\n  public abstract void LevelUp();\n}\n</code></pre></p> <p>{% code title=\"Warrior.cs\" lineNumbers=\"true\" %} <pre><code>class Warrior : Character\n{\n  public override void LevelUp()\n  {\n    Level = Xp / 10;\n    if (Level == 3)\n    {\n      Attacks = new string[] { \"Kick\", \"Punch\", \"Bite\" };\n    }\n  }\n}\n</code></pre></p> <p>I exemplet ovan \u00e4r det allts\u00e5 t\u00e4nkt att metoden LevelUp ska anropas f\u00f6r att ge karakt\u00e4rer ny level, ifall de f\u00e5tt tillr\u00e4ckligt med xp. I och med att olika karakt\u00e4rer ska ha olika progression baserat p\u00e5 vilken klass de tillh\u00f6r (t.ex. Warrior) s\u00e5 kan man l\u00e5ta LevelUp-metoden vara abstrakt och ha en egen implementation f\u00f6r varje subklass.</p>"},{"location":"klasser-och-objektorientering/arv/","title":"Arv","text":"<p>N\u00e4r man bygger en klass som bygger p\u00e5 en annan klass s\u00e5 kallas det arv. Arvet inneb\u00e4r att subklassen f\u00e5r samma variabler och metoder som basklassen. Arv \u00e4r allts\u00e5 ett s\u00e4tt att \u00e5teranv\u00e4nda kod.</p> <p>Info</p> <p>OBSERVERA: Arv symboliserar en \"\u00e4r-en-relation\", det vill s\u00e4ga subklassen ska kunna s\u00e4gas vara en underkategori till basklassen. En Hero \u00e4r en sorts Character. En Goomba \u00e4r en sorts Enemy. Ett sv\u00e4rd \u00e4r en sorts vapen.</p> <p>Man skapar ett arv genom att skriva ett kolon (:) efter klassnamnet, f\u00f6ljt av namnet p\u00e5 basklassen. S\u00e5 om man vill att klassen Hero ska \u00e4rva fr\u00e5n klassen Character s\u00e5 skriver man <code>class Hero: Character</code> n\u00e4r man skapar klassen.</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character\n{\n  public string name;\n  public int hp = 100;\n  public int x = 0;\n  public int y = 0;\n\n  public void Hurt(int amount)\n  {\n    hp -= amount;\n  }\n}\n</code></pre></p> <p>{% code title=\"Hero.cs\" lineNumbers=\"true\" %} <pre><code>class Hero: Character\n{\n  int _xp = 0;\n  int _level = 1;\n\n  public AddExperience(int amount)\n  {\n    _xp += amount;\n    _level = 1 + _xp / 10;\n  }\n}\n</code></pre></p> <p>{% code title=\"Program.cs\" lineNumbers=\"true\" %} <pre><code>Hero myHero = new Hero();\n\nmyHero.name = \"Britt-Marie\";\n\nmyHero.Hurt(3);\nmyHero.AddExperience(12);\n</code></pre></p> <p>Hero bygger p\u00e5 Character, s\u00e5 alla instanser av Hero-klassen har egna name, hp, x och y-variabler. Dessutom har de egna kopior av Hurt-metoden, som d\u00e5 p\u00e5verkar Hero-instansens egen hp.</p> <p>Dessutom tillf\u00f6r Hero-klassen ett par egna variabler och en egen metod.</p>"},{"location":"klasser-och-objektorientering/attribut/","title":"Attribut","text":"<p>Attribut anv\u00e4nds f\u00f6r att s\u00e4ga saker om klassvariabler, properties och metoder. Med andra ord \u00e4r de ett slags metadata \u2013 information om information.</p> <p>De anv\u00e4nds en hel del n\u00e4r man konstruerar controllers till REST-servrar, och n\u00e4r man jobbar med JSON-serialisering.</p> <p>Man skriver attribut mellan hakparenteser <code>[]</code> innan det attributet ska g\u00e4lla.</p> <p>{% code title=\"Pokemon.cs\" lineNumbers=\"true\" %} <pre><code>using System.Text.Json.Serialization;\n\npublic class Pokemon\n{\n  public string Name {get; set;}\n  public bool IsDefault {get; set;}\n\n  [JsonIgnore]\n  public int CurrentHp {get; set;}\n}\n</code></pre></p>"},{"location":"klasser-och-objektorientering/generiska-klasser/","title":"Generiska klasser","text":"<p>En generisk klass \u00e4r en klass d\u00e4r n\u00e5gon datatyp inte \u00e4r f\u00f6rdefinierad, utan deklareras i koden. En lista d\u00e4r v\u00e4rdena som lagras \u00e4r <code>int</code> har till exempel datatypen List&lt;int&gt; och en lista med strings \u00e4r en List&lt;string&gt;.</p> <p>Det som skrivs mellan &lt;&gt; i en generisk klass kallas f\u00f6r en typ-parameter.</p>"},{"location":"klasser-och-objektorientering/generiska-klasser/#samlingar","title":"Samlingar","text":"<p>C# inneh\u00e5ller ett antal f\u00e4rdiga generiska klasser i form av \"samlingar\" \u2013 helt enkelt objekt som samlar flera objekt eller v\u00e4rden av andra datatyper. Till exempel kan en samling inneh\u00e5lla integers, strings eller instanser av en klass.</p> <p>N\u00e5gra exempel p\u00e5 generiska samlingar \u00e4r List, Queue, PriorityQueue, Stack, HashSet och Dictionary.</p> <p>Info</p> <p>OBS: F\u00f6r att dessa ska fungera om du k\u00f6r \u00e4ldre versioner av dotnet (t.ex. dotnet 5), s\u00e5 beh\u00f6ver du skriva in f\u00f6ljande h\u00f6gst upp i din kod:</p> <pre><code>using System.Collections.Generic;\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#gemensamt-for-samlingar","title":"Gemensamt f\u00f6r samlingar","text":"<p>Nedanst\u00e5ende finns i de flesta samlingar \u2013 n\u00e5gra saknas i Dictionary, som \u00e4r lite av ett specialfall.</p> <p>M\u00e5nga samlings-datatyper kan ocks\u00e5 f\u00e5 ytterligare funktionalitet via Linq-metoder.</p>"},{"location":"klasser-och-objektorientering/generiska-klasser/#count","title":"Count","text":"<p>En property som anv\u00e4nds ist\u00e4llet f\u00f6r Length f\u00f6r att r\u00e4kna antalet saker i samlingen.</p> <pre><code>List&lt;int&gt; myList = [1, 2, 3, 4, 5];\n\nConsole.WriteLine(myList.Count);\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#tolist-toarray","title":"ToList() / ToArray()","text":"<p>Returnerar en lista eller en array som inneh\u00e5ller samma saker som samlingen.</p> <pre><code>Queue&lt;int&gt; myQueue = new Queue&lt;int&gt;();\nmyQueue.Enqueue(4);\n\nList&lt;int&gt; myList = myQueue.ToList();\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#contains","title":"Contains()","text":"<p>Tar emot ett v\u00e4rde. Om v\u00e4rdet finns i samlingen returnerar metoden true, annars false.</p> <pre><code>List&lt;int&gt; myList = [4, 5, 6, 7];\n\nif (myList.Contains(6))\n{\n  Console.WriteLine(\"Yes!\");\n}\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#clear","title":"Clear()","text":"<p>Rensar bort alla saker som finns i samlingen.</p> <pre><code>List&lt;int&gt; myList = [4, 5, 6, 7];\n\nmyList.Clear();\n\nConsole.WriteLine(myList.Count); // skriver ut 0\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#list","title":"List","text":"<p>Fungerar som arrayer, utom att man inte best\u00e4mmer storlek fr\u00e5n b\u00f6rjan utan kan anv\u00e4nda bl.a Add och Insert och RemoveAt-metoder f\u00f6r att l\u00e4gga till, stoppa in och ta bort grejer ur listan n\u00e4r som helst.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>List&lt;string&gt; myList = [];\n\nmyList.Add(\"hej\");\n\nConsole.WriteLine(myList[0])\n\nList.RemoveAt(0);\n</code></pre></p> <p>N\u00e4r man skapar en lista kan man ocks\u00e5 direkt l\u00e4gga in v\u00e4rden genom att ange en array efter parenteserna.</p> <pre><code>List&lt;int&gt; myList = [1, 2, 3, 4, 5];\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#add","title":"Add()","text":"<p>L\u00e4gger till n\u00e5got i listan.</p> <pre><code>myList.Add(\"hej\");\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#remove","title":"Remove()","text":"<p>Tar bort n\u00e5got fr\u00e5n listan. N\u00e4r man tar bort n\u00e5got ur listan </p> <pre><code>myList.Remove(\"hej\");\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#removeat","title":"RemoveAt()","text":"<p>Tar bort n\u00e5got fr\u00e5n en specifik indexposition i listan.</p> <pre><code>myList.RemoveAt(0);\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#removeall","title":"RemoveAll()","text":"<p>Tar emot en delegate som beskriver ett kriterie. Delegaten tar emot ett objekt eller ett v\u00e4rde av samma datatyp som listan lagrar, och returnerar en bool ifall instansen uppfyller kriteriet. Normalt anv\u00e4nds ett lambda-uttryck ist\u00e4llet f\u00f6r en metod f\u00f6r att uppfylla delegaten.</p> <p>RemoveAll() tar bort alla element som matchar kriteriet, och returnerar ett int-v\u00e4rde som beskriver hur m\u00e5nga som togs bort.</p> <pre><code>List&lt;int&gt; intList = [1, 2, 3, 4, 5];\n\nint i = intList.RemoveAll(x =&gt; x &gt; 3); // i blir 2, och 4 och 5 tas bort ur listan.\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#find","title":"Find()","text":"<p>Tar emot en delegate som beskriver ett kriterie. Delegaten tar emot ett objekt eller ett v\u00e4rde av samma datatyp som listan lagrar, och returnerar en bool ifall instansen uppfyller kriteriet. Normalt anv\u00e4nds ett lambda-uttryck ist\u00e4llet f\u00f6r en metod f\u00f6r att uppfylla delegaten.</p> <p>Find() returnerar det f\u00f6rsta f\u00f6rem\u00e5l (v\u00e4rde eller objekt) i listan som matchar kriteriet. Om inget hittas, returneras null eller defaultv\u00e4rdet f\u00f6r datatypen (t.ex. 0 f\u00f6r integers).</p> <pre><code>List&lt;int&gt; intList = [1, 2, 3, 4, 5];\n\nint i = intList.Find(x =&gt; x &gt; 3); // i blir 4\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#findlast","title":"FindLast()","text":"<p>Fungerar som Find, men kollar igenom listan bakifr\u00e5n  och returnerar d\u00e4rmed det sista f\u00f6rem\u00e5l som matchar kriteriet.</p> <pre><code>List&lt;int&gt; intList = [1, 2, 3, 4, 5];\n\nint i = intList.FindLast (x =&gt; x &lt; 3); // i blir 2\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#findall","title":"FindAll()","text":"<p>Fungerar som Find, men returnerar en lista med alla matchande f\u00f6rem\u00e5l i listan.</p> <pre><code>List&lt;int&gt; intList = [1, 2, 3, 4, 5];\n\nList&lt;int&gt; lowNumbers = intList.FindAll (x =&gt; x &lt; 4); // lowNumbers blir 1,2,3\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#findindex","title":"FindIndex()","text":"<p>Fungerar som Find, men returnerar index f\u00f6r f\u00f6rsta matchande f\u00f6rem\u00e5l.</p> <pre><code>List&lt;int&gt; intList = [11, 12, 13, 14, 15];\n\nint i = intList.FindIndex (x =&gt; x &gt; 12); // i blir 2\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#findlastindex","title":"FindLastIndex()","text":"<p>Fungerar som FindIndex(), men kollar igenom listan bakifr\u00e5n och returnerar d\u00e4rmed index f\u00f6r det sista f\u00f6rem\u00e5l som matchar kriteriet.</p> <pre><code>List&lt;int&gt; intList = [11, 12, 13, 14, 15];\n\nint i = intList.FindLastIndex (x =&gt; x &lt; 13); // i blir 1\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#queue","title":"Queue","text":"<p>Fungerar som en lista, utom att man bara kan l\u00e4gga till saker l\u00e4ngst bak i k\u00f6n, och ta bort dem l\u00e4ngst fram. Detta kallas FIFO, eller First In, First Out.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Queue&lt;int&gt; myQueue = new Queue&lt;int&gt;();\n\nmyQueue.Enqueue(5);\nmyQueue.Enqueue(42);\nmyQueue.Enqueue(665);\n\n// Peek returnerar en kopia av v\u00e4rdet som ligger \n// l\u00e4ngst fram i k\u00f6n \u2013 5 i det h\u00e4r fallet\nConsole.WriteLine(myQueue.Peek());\n\n// Dequeue tar bort v\u00e4rdet som ligger l\u00e4ngst fram ur k\u00f6n \n// och returnerar det. S\u00e5 nu \u00e4r k\u00f6n = 42, 665.\nint n = myQueue.Dequeue();\n</code></pre></p>"},{"location":"klasser-och-objektorientering/generiska-klasser/#enqueue","title":"Enqueue()","text":"<p>L\u00e4gger till ett objekt i k\u00f6n.</p> <pre><code>myQueue.Enqueue(5);\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#dequeue","title":"Dequeue()","text":"<p>Tar bort och returnerar n\u00e4sta objekt i k\u00f6n.</p> <pre><code>int n = myQueue.Dequeue();\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#peek","title":"Peek()","text":"<p>Returnerar, men tar inte bort, n\u00e4sta objekt i k\u00f6n.</p> <pre><code>Console.WriteLine(myQueue.Peek();\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#priorityqueue","title":"PriorityQueue","text":"<p>Fungerar som en Queue, plus att varje sak som l\u00e4ggs in i k\u00f6n ges en prioritet. N\u00e4r man sedan k\u00f6r Dequeue eller Peek s\u00e5 \u00e4r det objektet med h\u00f6gst prioritet (l\u00e4gst prioritets-v\u00e4rde) som returneras. N\u00e4r man skapar en PriorityQueue s\u00e5 anger man tv\u00e5 datatyper \u2013 en f\u00f6r de saker som ska sparas i k\u00f6n, en som ska anv\u00e4ndas f\u00f6r att avg\u00f6ra prioritet. Oftast \u00e4r den senare bara en int eller annan numerisk datatyp.</p> <p>Om flera saker har samma prioritet s\u00e5 returneras de i ordning motsvarande en vanlig queue.</p> <pre><code>PriorityQueue&lt;string, int&gt; queue = new PriorityQueue&lt;string, int&gt;();\n\nqueue.Enqueue(\"Micke\", 2);\nqueue.Enqueue(\"Martin\", 1);\nqueue.Enqueue(\"Lena\", 3);\n\nConsole.WriteLine(queue.Peek()); // Skriver ut \"Martin\"\n</code></pre>"},{"location":"klasser-och-objektorientering/generiska-klasser/#stack","title":"Stack","text":"<p>Fungerar som en \"h\u00f6g\" \u2013 man kan bara l\u00e4gga till saker h\u00f6gst upp i h\u00f6gen och \u00e4ven bara plocka bort saker fr\u00e5n h\u00f6gst upp i h\u00f6gen. Detta kallas FILO, eller First In, Last Out.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Stack&lt;int&gt; myStack = new Stack&lt;int&gt;();\n\nmyStack.Push(5);\nmyStack.Push(42);\nmyStack.Push(665);\n\n// Precis som f\u00f6r queue, peekar \"n\u00e4sta v\u00e4rde\". Det som ligger h\u00f6gst upp \u2013 665.\nConsole.WriteLine(myStack.Peek());\n\n// Tar bort det som ligger h\u00f6gst upp i h\u00f6gen och returnerar det.\n// S\u00e5 nu \u00e4r bara 5 och 42 kvar i h\u00f6gen.\nint n = myStack.Pop();\n</code></pre></p>"},{"location":"klasser-och-objektorientering/generiska-klasser/#hashset","title":"HashSet","text":"<p>Saknar indexering, men kan bara inneh\u00e5lla unika objekt \u2013 man riskerar inte att r\u00e5ka l\u00e4gga till samma sak flera g\u00e5nger.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>HashSet&lt;int&gt; mySet = new HashSet&lt;int&gt;();\n\nmySet.Add(5);\nmySet.Add(42);\nmySet.Add(5);\n\n// skriver ut true, eftersom 5 ing\u00e5r i setet.\nConsole.WriteLine(mySet.Contains(5));\n\n// Skriver ut 2, f\u00f6r det finns bara 2 unika objekt i setet\n//  \u2013 den andra femman lades aldrig till.\nConsole.WriteLine(mySet.Count());\n</code></pre></p>"},{"location":"klasser-och-objektorientering/generiska-klasser/#dictionary","title":"Dictionary","text":"<p>Fungerar som en lista, utom att man kan anv\u00e4nda andra datatyper \u00e4n ints som index. I Dictionaries anv\u00e4nder man ofta ordet \"key\" ist\u00e4llet f\u00f6r \"index\".</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Dictionary&lt;string, int&gt; myStats = new Dictionary&lt;string, int&gt;();\n\nmyStats.Add(\"Strength\", 20);\nmyStats.Add(\"Intelligence\", 12);\n\nConsole.WriteLine(myStats[\"Strength\"]);\n</code></pre></p>"},{"location":"klasser-och-objektorientering/generiska-klasser/#keys","title":"Keys","text":"<p>Man kan f\u00e5 fram en samling av alla keys i ett dictionary genom att l\u00e4sa av egenskapen Keys som \u00e4r inbyggd i alla Dictionaries.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>foreach (string key in myStats.Keys)\n{\n  Console.WriteLine($\"{key}: {myStats[key]}\");\n}\n</code></pre></p>"},{"location":"klasser-och-objektorientering/generiska-klasser/#skapa-egna-generiska-klasser","title":"Skapa egna generiska klasser","text":"<p>Generiska klasser \u00e4r oftast \"container-klasser\", allts\u00e5 klasser vars uppgift det \u00e4r att lagra ett annat v\u00e4rde.</p> <p>{% code title=\"Node.cs\" lineNumbers=\"true\" %} <pre><code>class Node&lt;T&gt;\n{\n  public T Value;\n  public Node NextNode;\n}\n</code></pre></p> <p>Ovanst\u00e5ende kod \u00e4r en enkel nod i en s.k. l\u00e4nkad lista. I en l\u00e4nkad lista k\u00e4nner varje nod bara till \"n\u00e4sta nod\". </p> <p>Nu best\u00e4ms vilken datatyp variabeln value ska ha genom att den anges mellan &lt;&gt; n\u00e4r instansen skapas:</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Node&lt;string&gt; firstTextNode = new Node&lt;string&gt;(); // value blir en string\nfirstTextNode.Value = \"Bananas\";\n\nNode&lt;int&gt; firstNumberNode = new Node&lt;int&gt;(); // value blir en int\nfirstNumberNode.Value = 23;\n</code></pre></p>"},{"location":"klasser-och-objektorientering/inkapsling-och-properties/","title":"Inkapsling och properties","text":"<p>Inkapsling inneb\u00e4r egentligen inte n\u00f6dv\u00e4ndigtvis n\u00e5gon ny kod, utan \u00e4r ett grundl\u00e4ggande tankes\u00e4tt:</p> <ul> <li>Exponera s\u00e5 lite som m\u00f6jligt.</li> </ul> <p>Det h\u00e4r inneb\u00e4r att man undviker att ha variabler som \u00e4r direkt tillg\u00e4ngliga utanf\u00f6r klassen - i princip ska inga variabler vara public, utan de ska alla vara private eller protected.</p> <p>Ist\u00e4llet anv\u00e4nds metoder f\u00f6r att l\u00e4sa av och \u00e4ndra p\u00e5 variablerna.</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character\n{\n  private int _hp = 100;\n\n  public void SetHp(int hp)\n  {\n    _hp = hp;\n  }\n\n  public int GetHp()\n  {\n    return _hp;\n  }  \n}\n</code></pre></p> <p>I exemplet ovan kan man fortfarande f\u00e5 tag i karakt\u00e4rers hp utifr\u00e5n, och \u00e4ven best\u00e4mma nya v\u00e4rden, men man m\u00e5ste g\u00e5 via GetHp och SetHp. Den h\u00e4r sortens metoder, som anv\u00e4nds f\u00f6r att direkt l\u00e4sa av eller best\u00e4mma en variabels v\u00e4rde, kallas getters och setters.</p> <p>En f\u00f6rdel med det h\u00e4r \u00e4r att man kan v\u00e4lja att en variabel t.ex. enbart ska kunna l\u00e4sas av - inte \u00e4ndras utifr\u00e5n. D\u00e5 skapar man helt enkelt bara en getter och ingen setter.</p> <p>En annan finess \u00e4r att man f\u00e5r mer kontroll \u00f6ver vilka v\u00e4rden som ges till en variabel. I exemplet nedan hindras till exempel hp-v\u00e4rdet fr\u00e5n att bli l\u00e4gre \u00e4n 0.</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character\n{\n  private int _hp = 100;\n\n  public void SetHp(int hp)\n  {\n    _hp = Math.Max(hp, 0);\n  }\n\n  public int GetHp()\n  {\n    return _hp;\n  }\n}\n</code></pre></p>"},{"location":"klasser-och-objektorientering/inkapsling-och-properties/#properties","title":"Properties","text":"<p>Properties, \u00e4ven kallade egenskaper, fungerar som ett slags variabler med inbyggda getters och setters.</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character\n{\n  private int _hp = 100;\n\n  public int Hitpoints {\n    get\n    {\n      return _hp;\n    }\n    set\n    {\n      _hp = Math.Max(value, 0);\n    }\n  }\n}\n</code></pre></p> <p>F\u00f6rdelen med att anv\u00e4nda properties \u00e4r att de kan anropas och anv\u00e4ndas som om de vore variabler:</p> <p>{% code title=\"Program.cs\" lineNumbers=\"true\" %} <pre><code>Character cha = new Character();\n\n// Propertyns setter anropas automatiskt, och value s\u00e4tts till 80.\ncha.Hitpoints = 80; \n\n// Propertyns getter anropas automatiskt, \n// och returnerar v\u00e4rdet av den privata variabeln hp.\nConsole.WriteLine(cha.Hitpoints);\n</code></pre></p>"},{"location":"klasser-och-objektorientering/inkapsling-och-properties/#lambda-properties","title":"Lambda-properties","text":"<p>Om det man vill g\u00f6ra med sin set resp. get \u00e4r ganska enkelt, s\u00e5 beh\u00f6vs ingen fullst\u00e4ndig kodblocks-syntax. D\u00e5 kan man ist\u00e4llet anv\u00e4nda enkla lambdas:</p> <pre><code>public class Character\n{\n  private int _hp = 100;\n\n  public int Hitpoints\n  {\n    get =&gt; _hp;\n    set =&gt; _hp = Math.Max(value, 0);\n  }\n}\n</code></pre>"},{"location":"klasser-och-objektorientering/inkapsling-och-properties/#properties-som-bara-skickar-vidare-nagot-lasas-inte-skrivas","title":"Properties som bara skickar vidare n\u00e5got (l\u00e4sas, inte skrivas)","text":"<p>Om man inte ens beh\u00f6ver en set s\u00e5 kan hela propertien g\u00f6ras om till en lambda (den f\u00e5r d\u00e5 ingen set, utan bara en get):</p> <pre><code>class Hero: Character\n{\n  int _xp = 0;\n\n  public int Level =&gt; 1 + _xp / 10;\n}\n</code></pre>"},{"location":"klasser-och-objektorientering/inkapsling-och-properties/#auto-implementerade-properties","title":"Auto-implementerade properties","text":"<p>Om man inte vill l\u00e4gga in n\u00e5gon extra logik alls i en property s\u00e5 kan man deklarera den p\u00e5 f\u00f6ljande vis:</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character\n{\n  public int Hitpoints{ get; set; }\n}\n</code></pre></p> <p>Det h\u00e4r inneb\u00e4r att man blir av med den f\u00f6rdel properties ger j\u00e4mf\u00f6rt med publika variabler, men \u00e5 andra sidan blir det l\u00e4tt att senare bygga ut propertyn till en fullv\u00e4rdig s\u00e5dan. P\u00e5 det h\u00e4r viset beh\u00f6ver man med andra ord inte i efterhand byta ut en publik variabel mot en property n\u00e4r man senare kommer p\u00e5 att man trots allt ville ha lite logik.</p>"},{"location":"klasser-och-objektorientering/inkapsling-och-properties/#properties-med-varden-som-bara-far-lasas-inte-skrivas","title":"Properties med v\u00e4rden som bara f\u00e5r l\u00e4sas, inte skrivas","text":"<p>Ett anv\u00e4ndningsomr\u00e5de f\u00f6r automatiskt implementerade properties \u00e4r s.k. read only-v\u00e4rden. S\u00e4g t.ex. att vi vill att karakt\u00e4rens hitpoints ska kunna l\u00e4sas, men inte \u00e4ndras, utifr\u00e5n. D\u00e5 skriver man s\u00e5 h\u00e4r:</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character\n{\n  public int Hitpoints{ get; private set; }\n}\n</code></pre></p> <p>Det inneb\u00e4r att propertyns setter bara kan anropas fr\u00e5n andra av klassens metoder.</p>"},{"location":"klasser-och-objektorientering/interface/","title":"Interface","text":"<p>Ett interface \u00e4r ett slags kravspecifikation som beskriver ett antal metoder som en klass beh\u00f6ver implementera. De fungerar som ett slags tvingande abstrakta klasser. N\u00e4r en klass \"\u00e4rver\" fr\u00e5n ett interface s\u00e5 kallas det att klassen implementerar interfacet.</p> <p>Interfaces namnges med PascalCase och med ett I (stora i) i b\u00f6rjan.</p> <p>{% code title=\"IDamagable.cs\" lineNumbers=\"true\" %} <pre><code>interface IDamagable\n{\n  void Hurt(int amount);\n}\n</code></pre></p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character : IDamagable\n{\n  public string Name;\n  public int Hp = 100;\n\n  public void Hurt(int amount)\n  {\n    Hp -= amount;\n  }\n}\n</code></pre></p> <p>Interfacet Damagable specificerar att klasser som implementerar det m\u00e5ste ha en Hurt-metod.</p> <p>Sedan kan man designa t.ex. metoder som kan ta emot vilken klass sim helst som implemeterar interfacet som parameter:</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character : IDamagable\n{\n  public string Name;\n  public int Hp = 100;\n\n  public void Hurt(int amount)\n  {\n     Hp -= amount;\n  }\n\n  public void Attack(IDamagable target)\n  {\n    target.Hurt(5);\n  }\n}\n</code></pre></p> <p>I exemplet ovan kan man allts\u00e5 stoppa in Characters - eller vad som helst som implementerar Damagable - i metoden Attack. Eftersom man vet att alla klasser som implementerar Damagable har en Hurt-metod.</p> <p>Sedan beh\u00f6ver den som designar andra saker i spelet som kan skadas - v\u00e4ggar, v\u00e4xter, utrustning, k\u00e4nslor - bara se till att hens klasser implementerar Damagable, s\u00e5 vet man att klasserna kommer att fungera tillsammans med karakt\u00e4rernas Attack-metod.</p>"},{"location":"klasser-och-objektorientering/interface/#implementera-flera-interfaces","title":"Implementera flera interfaces","text":"<p>En och samma klass kan implementera flera interfaces.</p> <p>{% code title=\"IDamagable.cs\" lineNumbers=\"true\" %} <pre><code>interface IDamagable\n{\n  void Hurt(int amount);\n}\n</code></pre></p> <p>{% code title=\"IAttacking.cs\" lineNumbers=\"true\" %} <pre><code>interface IAttacking\n{\n  void Attack(Damagable target);\n}\n</code></pre></p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character : IDamagable, IAttacking\n{\n  public string Name;\n  public int Hp = 100;\n\n  public void Hurt(int amount)\n  {\n     Hp -= amount;\n  }\n\n  public void Attack(Damagable target)\n  {\n    target.Hurt(5);\n  }\n}\n</code></pre></p> <p>Eftersom interfaces mer fungerar som kravspecifikationer \u00e4n traditionella arv s\u00e5 inneb\u00e4r detta med andra ord helt enkelt att klassen uppfyller de krav som st\u00e4lls upp av b\u00e5de IDamagable och IAttacking.</p>"},{"location":"klasser-och-objektorientering/klassdiagram/","title":"Klassdiagram","text":"<p>Ett klassdiagram beskriver hur en klass \u00e4r strukturerad, och ser likadant ut oavsett programmeringsspr\u00e5k. Diagrammet h\u00e4r skulle t.ex. kunna omvandlas till kod i Java, C#, PHP eller vilket annat spr\u00e5k som helst som har objektorientering.</p> <p>I ett klassdiagram beskrivs klassen i tre sektioner:</p> <ul> <li>Klassnamnet \u2014 i det h\u00e4r fallet \"Character\".</li> <li>Variabler \u2014 i det h\u00e4r fallet hp och name.</li> <li>Metoder \u2014 i det h\u00e4r fallet Hurt och Attack.</li> </ul> <p>Variablerna: Skrivs med namn och datatyp, men aldrig v\u00e4rde. Oftast skriver man namnet f\u00f6rst, sedan kolon, och slutligen datatypen.</p> <p>Metoderna: Skrivs med namn, parametrar och returtyp, men aldrig funktion. Oftast skriver man namnet f\u00f6rst, sedan parametrarna inom parentes (i samma form som man skrev variablerna), och slutligen vilken datatyp metoden returnerar.</p> <p>Synlighet: Man anger synlighet f\u00f6r variabler och metoder genom att skriva +, - eller # innan namnet.</p> <ul> <li>+ betyder \"public\"</li> <li>\u2212 betyder \"private\"</li> <li># betyder \"protected\" </li> </ul> <pre><code>%%{init: {'theme': 'base', 'themeVariables': \n{ 'primaryBorderColor': 'black', \n'primaryColor': 'white'\n}}}%%\n\nclassDiagram\n  class Character{\n        \u2212_hp : int\n        \u2212_name : string \n        +  Hurt(amount : int) void\n        + Attack() int\n  }</code></pre>"},{"location":"klasser-och-objektorientering/klassdiagram/#arv-i-klassdiagram","title":"Arv i klassdiagram","text":"<p>F\u00f6r att visa arv i klassdiagram anv\u00e4nds pilar.</p> <p>Pilarna pekar alltid FR\u00c5N subklassen TILL basklassen. Man kan t\u00e4nka sig att pilen betyder \"\u00e4r en sorts\" eller \"\u00e4rver fr\u00e5n\".</p> <p>Subklassernas diagram ritas p\u00e5 samma s\u00e4tt som basklassens. Man skriver in klassens variabler och metoder, inklusive metoder som anv\u00e4nder override. D\u00e4remot skriver man inte in variabler eller metoder som bara \u00e4rvs fr\u00e5n basklassen.</p> <pre><code>%%{init: {'theme': 'base', 'themeVariables': \n{ 'primaryBorderColor': 'black', \n'primaryColor': 'white'\n}}}%%\n\nclassDiagram\n  class Character{\n        \u2212_hp : int\n        \u2212_name : string \n        +Hurt(amount : int) void\n        +Attack() int\n  }\n  class Hero{\n        \u2212_xp : int\n        +GetLevel() int\n  }\n  Character &lt;|-- Hero</code></pre>"},{"location":"klasser-och-objektorientering/klassdiagram/#komposition-i-klassdiagram","title":"Komposition i klassdiagram","text":"<p>F\u00f6r att visa komposition i klassdiagram anv\u00e4nds en pil som avslutas i en romb.</p> <p>Rombpilarna pekar alltid FR\u00c5N del-klassen TILL huvud-klassen. Man kan t\u00e4nka sig att pilen betyder \"ing\u00e5r i\", s\u00e5 att den ena klassen \"ing\u00e5r i\" den andra klassen.</p> <pre><code>%%{init: {'theme': 'base', 'themeVariables': \n{ 'primaryBorderColor': 'black', \n'primaryColor': 'white'\n}}}%%\n\nclassDiagram\n  class Character{\n        \u2212_hp : int\n        \u2212_name : string \n        -_weapon : Weapon\n        +Hurt(amount : int) void\n        +Attack() int\n  }\n  class Weapon{\n        \u2212minDamage : int\n        \u2212maxDamage : int\n        +Attack(target: Character) void\n  }\n  Character o-- Weapon</code></pre>"},{"location":"klasser-och-objektorientering/klassdiagram/#overkurs","title":"\u00d6verkurs","text":"<p>Ibland g\u00f6rs skillnad mellan komposition och aggregering. Skillnaden \u00e4r d\u00e5 att man med komposition menar att de kopplade klasserna bara finns i huvudklassen och \u00e4r integrerade delar av den \u2013 relationen \u00e4r inte bara \"ing\u00e5r i\" utan \"\u00e4r en del av\". Aggregering \u00e4r d\u00e5 namnet man ger den l\u00f6sare typen av koppling.</p> <pre><code>%%{init: {'theme': 'base',\n'themeVariables': \n{ 'primaryBorderColor': 'black', \n'primaryColor': 'white'\n}}}%%\n\nclassDiagram\n  class Character{\n        \u2212_hp : int\n        \u2212_name : string \n        +Hurt(amount : int) void\n        +Attack() int\n  }\n  class Inventory{\n        \u2212_item: List&lt;Item&gt;\n        +Add(item: Item)\n        +Remove(item: Item)\n  }\n  class Weapon{\n        \u2212minDamage : int\n        \u2212maxDamage : int\n        +Attack(target: Character) void\n  }\n  Character o-- Weapon\n  Character *-- Inventory\n</code></pre>"},{"location":"klasser-och-objektorientering/klassdiagram/#vanliga-fragor","title":"Vanliga fr\u00e5gor","text":"<ul> <li>Har man med variablers v\u00e4rde? Nej, bara datatyp, namn och access modifier (public, private, protected)</li> <li>Har man med metoders inneh\u00e5ll? Nej, bara datatyp (returtyp), namn, parametrar (med namn och datatyp) och access modifier.</li> <li>Hur g\u00f6r man med listor? Precis som vanligt, en int-listas datatyp skrivs som \"List&lt;int&gt;\".</li> <li>Hur g\u00f6r man med properties? Man kan lista dem som vanliga klassvariabler. NClass visar dem i metod-sektionen, kompletta med get och set. Det \u00e4r ocks\u00e5 helt OK.</li> </ul>"},{"location":"klasser-och-objektorientering/klassdiagram/#nclass","title":"NClass","text":"<p>NClass \u00e4r ett enkelt program f\u00f6r att skapa klassdiagram. Det \u00e4r gratis och kan laddas ner h\u00e4r.</p> <p>Info</p> <p>Observera: L\u00e4nken leder till en ny fork av den gamla versionen av NClass. Den nya verkar utvecklas aktivt och har t.ex. st\u00f6d f\u00f6r Ctrl+Z och nyare projekt i sin code generation (Visual Studio 2019\u2026 Fortfarande inte Dotnet 5/6 tyv\u00e4rr)</p>"},{"location":"klasser-och-objektorientering/klasser-och-instanser/","title":"Klasser och instanser","text":"<p>Klasser \u00e4r ett s\u00e4tt att klumpa ihop variabler och metoder som h\u00f6r till samma \"sak\" i ett spel eller ett program. De g\u00f6r det l\u00e4ttare att fels\u00f6ka och l\u00e4ttare att h\u00e5lla god struktur.</p> <p>Man kan betrakta en klass som en ritning f\u00f6r n\u00e5got - \"s\u00e5h\u00e4r ska fiender i spelet se ut - de ska ha de h\u00e4r egenskaperna\".</p> <p>Sedan skapar man instanser av klassen - de konkreta, faktiska fienderna. Alla goombas i Super Mario Bros och alla paladiner i World of Warcraft bygger p\u00e5 samma ritning. De har samma egenskaper och utseende i grunden, \u00e4ven om de skiljer sig \u00e5t i vilka v\u00e4rden en del av egenskaperna har. De befinner sig till exempel p\u00e5 olika positioner, \u00e4ven om de alla har en position.</p>"},{"location":"klasser-och-objektorientering/klasser-och-instanser/#skapa-klasser","title":"Skapa klasser","text":"<p>Generellt b\u00f6r varje klass l\u00e4ggas i sin egen fil. Med C# Dev Kit finns ett snabbt och enkelt s\u00e4tt:</p> <ul> <li>G\u00e5 till Explorer och \u00f6ppna Solution Explorer.</li> <li>H\u00f6gerklicka p\u00e5 projektet klassen/filen ska l\u00e4ggas till i.</li> <li>V\u00e4lj \"Add new File\".</li> <li>V\u00e4lj \"Class\".</li> <li>Skriv in namnet p\u00e5 klassen \u2013 gl\u00f6m inte namngivning med PascalCase!</li> <li>Skriv in skriv in using och namnet p\u00e5 klassens namespace h\u00f6gst upp i Program.cs</li> </ul> <p>{% code title=\"Goomba.cs\" lineNumbers=\"true\" %} <pre><code>namespace PlumberPlatformer\n\nclass Goomba\n{\n  // Klassvariabler\n  public int X = 0;\n  public int Y = 0;\n  public bool IsDead = false;\n}\n</code></pre></p> <p>{% code title=\"Program.cs\" %} <pre><code>using PlumberPlatformer;\n</code></pre></p>"},{"location":"klasser-och-objektorientering/klasser-och-instanser/#skapa-instanser","title":"Skapa instanser","text":"<p>Kodordet <code>new</code> skapar nya instanser i minnet (heapen).</p> <p>D\u00e4refter beh\u00f6ver en referens till instansen lagras n\u00e5gonstans, till exempel i en variabel.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Goomba g1 = new Goomba();\nGoomba g2 = new Goomba();\n</code></pre></p> <p>D\u00e4refter kan man \u00e4ndra p\u00e5 de individuella instansernas variabler separat:</p> <p>{% code lineNumbers=\"true\" %} <pre><code>g1.X = 60;\ng1.Y = 20;\ng2.X = 80;\ng2.Y = 25;\n</code></pre></p> <p>Man kan ocks\u00e5 tilldela v\u00e4rden till variablerna direkt n\u00e4r instansen skapas:</p> <pre><code>Goomba g3 = new Goomba() {x = 10, y = 6};\n</code></pre>"},{"location":"klasser-och-objektorientering/klasser-och-instanser/#new","title":"New()","text":"<p>Om man (som ovan) skapar en instans av exakt samma klass som variabeln s\u00e5 kan koden f\u00f6renklas. Det g\u00e4ller med andra ord n\u00e4stan j\u00e4mt \u2013 undantaget \u00e4r vid polymorfism.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Goomba g4 = new();\nGoomba g5 = new() {X = 100};\n</code></pre></p>"},{"location":"klasser-och-objektorientering/klassmetoder/","title":"Klassmetoder","text":"<p>Det g\u00e5r utm\u00e4rkt att l\u00e4gga in metoder i klasser. De anropas d\u00e5 genom att man skriver instansens namn f\u00f6ljt av metodens namn, och l\u00e4gger in parametrar och hanterar returneringar som vanligt.</p> <p>Klassmetoders kod kan komma \u00e5t instansens variabler, properties och metoder. Det g\u00e4ller \u00e4ven s\u00e5dana den f\u00e5tt genom arv.</p> <p>{% code title=\"Fighter.cs\" lineNumbers=\"true\" %} <pre><code>class Fighter\n{\n  private string _name = \"\";\n  public string GetName()\n  {\n    return _name;\n  }\n}\n</code></pre></p> <p>{% code title=\"Program.cs\" lineNumbers=\"true\" %} <pre><code>Fighter f1 = new Fighter();\n\nstring n = f1.GetName();\nConsole.WriteLine(n);\n</code></pre></p> <p>N\u00e4r en metod som ing\u00e5r i en klass vill anv\u00e4nda en variabel som ing\u00e5r i samma klass s\u00e5 kan den g\u00f6ra detta genom att anv\u00e4nda dess namn rakt av. Man beh\u00f6ver allts\u00e5 inte skriva instansens namn.</p> <p>Om man vill vara tydlig med att man anv\u00e4nder en intern klassvariabel s\u00e5 kan man skriva this. framf\u00f6r.</p> <p>{% code title=\"Fighter.cs\" lineNumbers=\"true\" %} <pre><code>class Fighter\n{\n  private string _name = \"\";\n\n  public void WriteName()\n  {\n    Console.WriteLine(this._name);\n  }\n}\n</code></pre></p>"},{"location":"klasser-och-objektorientering/komposition/","title":"Komposition","text":"<p>N\u00e4r ett objekt skapas och f\u00e5r sin funktionalitet genom att instanser av flera olika klasser samlas, s\u00e5 kallas det komposition. Komposition \u00e4r, liksom arv, ett s\u00e4tt att \u00e5teranv\u00e4nda kod.</p> <p>Info</p> <p>OBSERVERA: Den relation som en komposition symboliserar \u00e4r en \"har-en-relation\". En karakt\u00e4r har ett vapen, en karakt\u00e4r har en karakt\u00e4rsklass. Medan \"krigare\" till exempel snarare \u00e4r en karakt\u00e4rsklass.</p> <p>Komposition skapas genom att man helt enkelt l\u00e4gger in klassvariabler eller properties vars datatyp \u00e4r en klass som beskriver n\u00e5got instanser av klassen har.</p> <pre><code>public class CharClass\n{\n  public string name;\n}\n\npublic class Warrior : CharClass // Arv\n{\n  public Warrior()\n  {\n    name = \"Warrior\";\n  }\n}\n\npublic class Weapon\n{\n  public string name;\n  public int minDamage;\n  public int maxDamage;\n}\n</code></pre> <pre><code>public class Character\n{\n  public string name;\n  public int hp;\n  public Weapon mainWeapon = new Weapon(); // Komposition\n  public CharClass charClass = new Warrior(); // Komposition\n}\n</code></pre>"},{"location":"klasser-och-objektorientering/kontruktorer/","title":"Konstruktorer","text":"<p>En konstruktor \u00e4r en metod som anropas automatiskt n\u00e4r en instans skapas. Den skrivs in i klassen som en publik metod utan returtyp och med samma namn som klassen.</p> <p>{% code title=\"Fighter.cs\" lineNumbers=\"true\" %} <pre><code>class Fighter\n{\n  private string _name = \"\";\n  private int _strength = 0;\n\n  public Fighter()\n  {\n    _strength = Random.Shared.Next(5,10);\n  }\n}\n</code></pre></p> <p>N\u00e4r man skapar en instans av klassen Fighter s\u00e5 ges instansen nu enligt koden ovan ett slumpat strength-v\u00e4rde.</p>"},{"location":"klasser-och-objektorientering/kontruktorer/#parametrar-och-konstruktorer","title":"Parametrar och konstruktorer","text":"<p>Precis som andra metoder kan konstruktorer ta emot en eller flera parametrar. Det brukar till exempel anv\u00e4ndas som ett snabbt och enkelt s\u00e4tt att skjuta in information som ska lagras i instansens variabler.</p> <p>{% code title=\"Fighter.cs\" lineNumbers=\"true\" %} <pre><code>class Fighter\n{\n  private string _name = \"\";\n  private int _strength = 0;\n\n  public Fighter(string name)\n  {\n    _name = name;\n    strength = Random.Shared.Next(5,10);\n  }\n}\n</code></pre></p> <p>{% code title=\"Program.cs\" lineNumbers=\"true\" %} <pre><code>Fighter heroFighter = new Fighter(\"Britta-Lena\");\nFighter enemyFighter = new Fighter(\"B\u00f6rje\");\n</code></pre></p>"},{"location":"klasser-och-objektorientering/kontruktorer/#kontruktorer-som-anropar-varandra-this","title":"Kontruktorer som anropar varandra (this)","text":"<p>Om man har flera konstruktorer s\u00e5 v\u00e4ljs vilken som k\u00f6rs genom samma principer som annan metod-\u00f6verlagring. Vill man sj\u00e4lv kalla p\u00e5 en annan konstruktor s\u00e5 kan man g\u00f6ra detta genom att skriva :this() efter konstruktorns parenteser. Mellan de nya parenteserna l\u00e4gger man de v\u00e4rden som ska passeras till \u00f6nskad konstruktor.</p> <pre><code>public class Fighter\n{\n  private int _hp;\n\n  public Fighter(): this(100)\n  {\n  }\n\n  public Fighter(int hp)\n  {\n    _hp = hp;\n  }\n}\n</code></pre>"},{"location":"klasser-och-objektorientering/kontruktorer/#konstruktorer-i-arv","title":"Konstruktorer i arv","text":"<p>N\u00e4r en basklass och en subklass har varsin konstruktor s\u00e5 kommer b\u00e5da konstruktorerna att k\u00f6ras n\u00e4r en instans av subklassen skapas. F\u00f6rst k\u00f6rs basklassens konstruktor, d\u00e4refter k\u00f6rs subklassens konstruktor.</p> <p>{% code title=\"\" lineNumbers=\"true\" %} <pre><code>class Character\n{\n  protected int _hp;\n  protected string _name = \"\";\n\n  public Character()\n  {\n    _hp = 100;\n  }\n}\n</code></pre></p> <p>{% code title=\"Thief.cs\" lineNumbers=\"true\" %} <pre><code>class Thief: Character\n{\n  public Thief()\n  {\n    _name = \"Thief\";\n    _hp = 20;\n  }\n}\n</code></pre></p> <p>I exemplet ovan kommer med andra ord en instans av Thief f\u00f6rst 100 i hp n\u00e4r basklassens konstruktor k\u00f6rs, och sedan \u00e4ndras hp till 20 och name till \"Thief\".</p>"},{"location":"klasser-och-objektorientering/kontruktorer/#konstruktorer-med-parametrar-i-arv","title":"Konstruktorer med parametrar i arv","text":"<p>Eftersom b\u00e5de basklassens och subklassens konstruktor k\u00f6rs, s\u00e5 betyder det att om basklassens konstruktor kr\u00e4ver ett parameterv\u00e4rde s\u00e5 m\u00e5ste det v\u00e4rdet stoppas in p\u00e5 n\u00e5got s\u00e4tt \u00e4ven n\u00e4r det \u00e4r subklassen som instansieras.</p> <p>I exemplet nedan m\u00e5ste Character-klassens konstruktor f\u00e5 ett string-v\u00e4rde som parameter.</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character\n{\n  public string _name;\n  public int _hp = 100;\n\n  public Character(string name)\n  {\n    _name = name;\n  }\n}\n</code></pre></p> <p>F\u00f6r att ange vilket v\u00e4rde som ska skickas till basklassens konstruktor s\u00e5 anv\u00e4nder man base().</p> <pre><code>class Dragon : Character\n{\n  public Dragon() : base(\"Dragon\")\n  {\n    _hp = 200;\n  }\n}\n</code></pre> <p>Man kan ocks\u00e5 skicka vidare v\u00e4rden fr\u00e5n subklassens konstruktor-parametrar till basklassens konstruktor.</p> <p>{% code title=\"Hero.cs\" lineNumbers=\"true\" %} <pre><code>class Hero : Character\n{\n  public Hero(string name, int hp) : base(name)\n  {\n    _hp = hp;\n  }\n}\n</code></pre></p> <p>H\u00e4r tar subklassens konstruktor emot tv\u00e5 parametrar \u2013 name och hp \u2013 och skickar vidare v\u00e4rdet som lagras i parametern name till basklassens konstruktor.</p>"},{"location":"klasser-och-objektorientering/kontruktorer/#primara-konstruktorer-net-8","title":"Prim\u00e4ra konstruktorer (.net 8)","text":"<p>I dotnet 8 introduceras primary constructors \u2013 de g\u00f6r att man kan stoppa in parameterv\u00e4rden in i klassen utan att explicit skapa en konstruktor.</p> <pre><code>public class Enemy (string name, int hp)\n{\n  private int _hp = hp;\n  private string _name = name;\n}\n</code></pre> <p>Om man d\u00e5 stoppar in andra, vanliga konstruktorer s\u00e5 m\u00e5ste man modifiera dem s\u00e5 att de matar \"prim\u00e4rkonstruktorn\" med r\u00e4tt data.</p> <pre><code>public class Enemy(string name, int hp)\n{\n  private int _hp = hp;\n  private string _name = name;\n\n  // Konstruktor som k\u00f6rs n\u00e4r man inte anger n\u00e5gra parameterv\u00e4rden: new Enemy()\n  public Enemy() : this(\"Goomba\", 100)\n  {\n  }\n\n  // Konstruktor som k\u00f6rs n\u00e4r man anger bara en string, som f\u00f6rs vidare in i\n  //  prim\u00e4rkonstruktorn\n  public Enemy(string name) : this(name, 50)\n  {\n  }\n}\n</code></pre>"},{"location":"klasser-och-objektorientering/lathund-foer-klassdesign/","title":"Lathund f\u00f6r klassdesign","text":""},{"location":"klasser-och-objektorientering/lathund-foer-klassdesign/#klasser","title":"Klasser","text":"<ul> <li>Vilka SAKER finns i programmet/spelet?</li> <li>Spelarkarakt\u00e4r, Fiender, Powerups, Andra objekt, Level/spelplan, Grafiska knappar</li> <li>Varje klass ska ha namn i singular, \u00e4ven om det finns flera i programmet/spelet.</li> <li>Powerup, Player, Enemy, Football, BaseballBat</li> <li>Varje klass beskriver en kategori av saker.</li> </ul>"},{"location":"klasser-och-objektorientering/lathund-foer-klassdesign/#underkategorier","title":"Underkategorier","text":"<ul> <li>\u00c4r det liten skillnad mellan sakerna? Anv\u00e4nd olika instanser av samma klass.</li> <li>\u00c4r det stor skillnad, framf\u00f6r allt i metoderna? Skapa nya klasser och anv\u00e4nd arv.</li> </ul>"},{"location":"klasser-och-objektorientering/lathund-foer-klassdesign/#variabler","title":"Variabler","text":"<ul> <li>Vilka EGENSKAPER hos de olika sakerna \u00e4r relevanta f\u00f6r spelet?</li> <li>Position, Styrka, intelligens, Hit points</li> <li>En egenskap som bara \u00e4r ett enkelt v\u00e4rde (int, strint, float etc) b\u00f6r vara en variabel.</li> <li>Exempel: namn, hit points</li> <li>En egenskap som \u00e4r mer komplex, och i sig har en massa egenskaper/funktionalitet b\u00f6r vara en referens till en instans av en klass.</li> <li>Exempel: ett sv\u00e4rd, som har skadev\u00e4rde, vikt etc</li> <li>Variabler kan leda till djupa hierarkier.</li> <li>I en instans av klassen Game finns en instans av Scene, i instansen av Scene finns en instans av Player\u2026</li> </ul>"},{"location":"klasser-och-objektorientering/lathund-foer-klassdesign/#metoder","title":"Metoder","text":"<ul> <li>Vilken kod h\u00f6r samman med varje SAK?</li> <li>Vilken kod anv\u00e4nder enbart eller mestadels variabler som tillh\u00f6r klassen?</li> <li>Vad ska varje SAK kunna g\u00f6ra?</li> <li>Metoder = verb, saker man kan g\u00f6ra med en instans eller som instansen kan g\u00f6ra.</li> </ul>"},{"location":"klasser-och-objektorientering/lathund-foer-klassdesign/#publicprivateprotected","title":"Public/private/protected","text":"<ul> <li>Public, private och protected anv\u00e4nds f\u00f6r att skapa gr\u00e4nssnittet ut mot v\u00e4rlden.</li> <li>Saker som ska kunna kommas \u00e5t utifr\u00e5n \u2013 public.</li> <li>Variabler \u2013 helst inte public alls. Anv\u00e4nd properties ist\u00e4llet.</li> <li>Saker som bara ska kunna p\u00e5verkas fr\u00e5n metoder som tillh\u00f6r den h\u00e4r klassen \u2013 private.</li> <li>Saker som ska kunna p\u00e5verkas av metoder som tillh\u00f6r den h\u00e4r klassen och klasser som \u00e4rver fr\u00e5n den \u2013 protected.</li> </ul>"},{"location":"klasser-och-objektorientering/oeversikt-objektorientering/","title":"\u00d6versikt objektorientering","text":""},{"location":"klasser-och-objektorientering/oeversikt-objektorientering/#objekt","title":"Objekt","text":"<p>Ett objekt \u00e4r en samling variabler, metoder och algoritmer som \"h\u00f6r ihop\" och motsvarar en \"sak\" i programmet.</p> <p>Exempel p\u00e5 objekt: Ett sv\u00e4rd, en fiende, en bok, en bana, ett p\u00e4ron, en kund.</p>"},{"location":"klasser-och-objektorientering/oeversikt-objektorientering/#klass","title":"Klass","text":"<p>En klass \u00e4r en ritning, eller en mall, f\u00f6r en kategori av objekt. En klass \u00e4r inte i sig ett objekt, utan bara en instruktion f\u00f6r hur ett objekt ska se ut och fungera.</p> <p>Exempel p\u00e5 klasser: Sv\u00e4rd, fiende, bok, bana, p\u00e4ron, kund.</p> <p>En klass fungerar ocks\u00e5 som en datatyp, s\u00e5 varje g\u00e5ng kod f\u00f6rv\u00e4ntar sig en datatyp (t.ex. string eller int) kan man ist\u00e4llet skriva dit en klass.</p> <p>Mer om klasser.</p>"},{"location":"klasser-och-objektorientering/oeversikt-objektorientering/#instans","title":"Instans","text":"<p>En instans \u00e4r ett objekt man skapat utifr\u00e5n en klass.</p> <p>Mer om instanser.</p>"},{"location":"klasser-och-objektorientering/oeversikt-objektorientering/#klassvariabler-och-klassmetoder","title":"Klassvariabler och klassmetoder","text":"<p>En klassvariabel \u00e4r en variabel som ing\u00e5r i en klass, och en klassmetod \u00e4r en metod som ing\u00e5r i en klass.</p> <p>Alla instanser av en klass f\u00e5r tillg\u00e5ng till alla klassens metoder och egen kopia av alla klassens variabler.</p> <p>Exempel:</p> <p>{% code title=\"\" lineNumbers=\"true\" %} <pre><code>class Pear\n{\n  public int Cost = 100; // &lt;-- klassvariabel\n  public bool Eaten = false; // &lt;-- klassvariabel\n\n  public void Eat() // &lt;- klassmetod\n  {\n    eaten = true;\n  }\n}\n</code></pre></p>"},{"location":"klasser-och-objektorientering/oeversikt-objektorientering/#arv","title":"Arv","text":"<p>En klass kan \u00e4rva fr\u00e5n en annan klass. Det betyder att subklassen f\u00e5r basklassens alla metoder och variabler, men den kan ocks\u00e5 l\u00e4gga till egna.</p> <p>Man brukar ocks\u00e5 beskriva det som att subklassen \u00e4r en mer specialiserad version av basklassen \u2013 ett exempel p\u00e5 basklass kan vara <code>Weapon</code> och en subklass till Weapon kan d\u00e5 vara <code>Sword</code>. Sedan kan Sword agera basklass till <code>LongSword</code> och <code>ShortSword</code>. Relationen mellan subklass och basklass \u00e4r att [subklassen] \u00e4r en sorts [basklassen], s\u00e5 att ShortWord \u00e4r en sorts Weapon till exempel.</p> <p>Alla sv\u00e4rd \u00e4r d\u00e5 vapen, och har alla metoder etc som ing\u00e5r i vapen \u2013 fast de kan ha egna till\u00e4gg, och de kan ocks\u00e5 delvis fungera annorlunda (se Polymorfism).</p>"},{"location":"klasser-och-objektorientering/oeversikt-objektorientering/#komposition","title":"Komposition","text":"<p>Man kan ocks\u00e5 l\u00e4gga in instanser av en klass i instanser av en annan klass. Detta kallas komposition.</p> <p>Man brukar ocks\u00e5 beskriva det som att klassernas relation blir en har-en-relation. En hj\u00e4lte har ett vapen (klassen Hero har en Weapon-variabel som inneh\u00e5ller instanser av den klassen eller dess subklasser).</p>"},{"location":"klasser-och-objektorientering/oeversikt-objektorientering/#inkapsling","title":"Inkapsling","text":"<p>Inkapsling \u00e4r principen att varje objekt \u2013 varje klass \u2013 ska sk\u00f6ta sin egen logik. Det inneb\u00e4r att man samlar all kod som h\u00f6r ihop med ett objekt inuti metoder i objektets klass.</p> <p>Det inneb\u00e4r ocks\u00e5 att man har s\u00e5 f\u00e5 variabler, properties och metoder som \u00e4r publika. Man vill visa upp ett s\u00e5 litet \"gr\u00e4nssnitt\" mot resten av v\u00e4rlden som m\u00f6jligt.</p> <p>Framf\u00f6r allt b\u00f6r man, om man jobbar med inkapsling, inte ha n\u00e5gra publika variabler. Ist\u00e4llet anv\u00e4nds properties och metoder f\u00f6r att \u00e4ndra p\u00e5 variablernas v\u00e4rde.</p> <p>Anledningen till att man g\u00f6r detta \u00e4r dels f\u00f6r att skapa en tydlig struktur, dels minska risken att man g\u00f6r fel n\u00e4r man skriver kod. Om det inte g\u00e5r att \u00e4ndra p\u00e5 de privata variablerna direkt s\u00e5 kan man heller inte r\u00e5ka t.ex. ge dem ett felaktigt v\u00e4rde.</p>"},{"location":"klasser-och-objektorientering/oeversikt-objektorientering/#interaktion-mellan-objekt","title":"Interaktion mellan objekt","text":"<p>N\u00e4r tv\u00e5 objekt interagerar direkt med varandra, till exempel n\u00e4r data fr\u00e5n ett objekt f\u00f6rs \u00f6ver till ett annat, eller n\u00e4r ett objekt stoppas in som parameterv\u00e4rde in i ett annat objekts metod.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Fighter hero = new Fighter();\nFighter opponent = new Fighter();\n\nhero.Attack(opponent);\nopponent.Attack(hero);\n</code></pre></p>"},{"location":"klasser-och-objektorientering/oeversikt-objektorientering/#polymorfism","title":"Polymorfism","text":"<p>Polymorfism i objektorientering \u00e4r n\u00e4r en instans av en subklass lagras i en variabel eller t.ex. en lista vars datatyp \u00e4r subklassens basklass. S\u00e5 om man har subklassen Goomba som \u00e4rver fr\u00e5n Monster, och lagrar en Goomba-instans i en Monster-variabel eller l\u00e4gger in den i en Monster-lista s\u00e5 anv\u00e4nder man polymorfism.</p>"},{"location":"klasser-och-objektorientering/oeversikt-objektorientering/#generiska-klasser","title":"Generiska klasser","text":"<p>Generiska klasser \u00e4r klasser d\u00e4r datatypen f\u00f6r en eller flera variabler eller metoder inte best\u00e4mts, utan avg\u00f6rs n\u00e4r man skapar en instans av klassen. Ett exempel p\u00e5 f\u00e4rdig generisk klass \u00e4r List.</p>"},{"location":"klasser-och-objektorientering/public-private-och-protected/","title":"Public, private och protected","text":""},{"location":"klasser-och-objektorientering/public-private-och-protected/#public","title":"Public","text":"<p>Variabler och metoder som \u00e4r publika kan l\u00e4sas av och \u00e4ndras p\u00e5 utifr\u00e5n.</p> <p>{% code title=\"Fighter.cs\" lineNumbers=\"true\" %} <pre><code>class Fighter\n{\n  public string Name = \"\";\n}\n</code></pre></p> <p>{% code title=\"Program.cs\" lineNumbers=\"true\" %} <pre><code>Fighter hero = new Fighter();\nhero.Name = \"Laban\";\n</code></pre></p>"},{"location":"klasser-och-objektorientering/public-private-och-protected/#private","title":"Private","text":"<p>Variabler och metoder som inte \u00e4r publika kan inte n\u00e5s utifr\u00e5n \u2013 men d\u00e4remot kan de fortfarande n\u00e5s inifr\u00e5n metoder som ing\u00e5r i samma klass. Privata variabler och metoder kan bara n\u00e5s fr\u00e5n metoder i exakt samma klass \u2013 s\u00e5 inte i n\u00e5gon subklass som \u00e4rver fr\u00e5n den.</p> <p>Om det inte st\u00e5r n\u00e5got framf\u00f6r en klassvariabel eller klassmetod \u00e4r den automatiskt private.</p> <p>F\u00f6r att man ska kunna f\u00e5 ut v\u00e4rdet hos en privat variabel beh\u00f6ver man g\u00e5 via en publik metod som returnerar dess v\u00e4rde. Metoden tillh\u00f6r ju klassen, s\u00e5 den f\u00e5r komma \u00e5t den privata variabeln. Detta \u00e4r en form av inkapsling.</p> <p>{% code title=\"Fighter.cs\" lineNumbers=\"true\" %} <pre><code>class Fighter\n{\n  private string _name = \"\";\n\n  public string GetName()\n  {\n    return _name;\n  }\n}\n</code></pre></p>"},{"location":"klasser-och-objektorientering/public-private-och-protected/#protected","title":"Protected","text":"<p>Fungerar som private, men metoden/variabeln kan kommas \u00e5t i klasser som \u00e4rver fr\u00e5n klassen d\u00e4r de deklareras.</p> <p>{% code title=\"Fighter.cs\" lineNumbers=\"true\" %} <pre><code>class Fighter\n{\n  protected string _name = \"\";\n\n  public string GetName()\n  {\n    return _name;\n  }\n}\n</code></pre></p> <p>{% code title=\"StrongFighter.cs\" lineNumbers=\"true\" %} <pre><code>class StrongFighter : Fighter\n{\n  public string GetName()\n  {\n    // kan anv\u00e4nda name trots att variabeln tillh\u00f6r basklassen\n    return $\"{_name} The Strong\";\n  }\n}\n</code></pre></p>"},{"location":"klasser-och-objektorientering/static/","title":"Static","text":"<p>Statiska variabler och metoder tillh\u00f6r klassen ist\u00e4llet f\u00f6r instanserna. Alla instanser delar allts\u00e5 p\u00e5 en och samma variabel/metod.</p>"},{"location":"klasser-och-objektorientering/static/#statiska-variabler","title":"Statiska variabler","text":"<p>N\u00e4r man l\u00e4ser eller \u00e4ndrar p\u00e5 en statisk variabel utifr\u00e5n skriver man klassens namn, sedan en punkt och d\u00e4refter variabelns namn. Inuti klassmetoder kan man alltid bara anv\u00e4nda variabeln som vilken som helst.</p> <p>{% code title=\"Fighter.cs\" lineNumbers=\"true\" %} <pre><code>class Fighter\n{\n  // En statisk slumpgenerator som alla fighters delar p\u00e5\n  static Random _generator = new Random();\n\n  private int _strength;\n\n  // En konstruktor d\u00e4r slumpgeneratorn anv\u00e4nds\n  public Fighter()\n  {\n    _strength = _generator.Next(10,20);\n  }\n}\n</code></pre></p>"},{"location":"klasser-och-objektorientering/static/#statiska-metoder","title":"Statiska metoder","text":"<p>N\u00e4r man anropar en statisk metod skriver man klassens namn, sedan en punkt och d\u00e4refter metodens namn. Inuti icke-statiska klassmetoder kan man anropa statiska metoder som om de vore vanliga metoder.</p> <p>Info</p> <p>En viktig detalj \u00e4r att inuti en statisk metod kan man bara anropa de metoder i samma klass som ocks\u00e5 \u00e4r statiska. Detta eftersom metoden tillh\u00f6r just klassen och inte instanserna. Detta g\u00e4ller ocks\u00e5 variabler - i en statisk metod kan man bara anv\u00e4nda statiska klassvariabler.</p> <p>{% code title=\"Fighter.cs\" lineNumbers=\"true\" %} <pre><code>class Fighter\n{\n  public static string GetRandomFighterName()\n  {\n    /* ... */\n  }\n}\n</code></pre></p>"},{"location":"klasser-och-objektorientering/struct/","title":"Struct","text":"<p>Structs \u00e4r som klasser men skiljer sig p\u00e5 en viktig punkt: de \u00e4r value types snarare \u00e4n reference types.</p> <pre><code>Hero h1 = new() { Name = \"A1\" };\nHero h2 = h1; // h2 blir en KOPIA av h1, inte en pekare till samma objekt\nh2.Name = \"A2\";\n\nConsole.WriteLine(h1.Name); // S\u00e5 n\u00e4r namnet p\u00e5 h2 byts, s\u00e5 p\u00e5verkas inte h1.\nConsole.WriteLine(h2.Name);\n\nstruct Hero\n{\n  public string Name;\n}\n</code></pre> <p>Den generella regeln som rekommenderas i C# \u00e4r:</p> <ul> <li>Klasser om du vill inkludera beteende eller ha inneh\u00e5ll som f\u00f6r\u00e4ndras (l\u00e4tt att l\u00e5ta flera delar av programmet arbeta med samma objekt).</li> <li>Structs f\u00f6r sm\u00e5 objekt, utan speciellt mycket beteende och med ganska of\u00f6r\u00e4nderlig data.</li> </ul> <p>Arbetar man med structs finns risk att man anv\u00e4nder mer minne \u2013 eftersom man g\u00f6r kopior av structen varje g\u00e5ng den \u00f6verf\u00f6rs n\u00e5gonstans.</p>"},{"location":"klasser-och-objektorientering/polymorfism/","title":"Polymorfism [\u2026]","text":"<p>Se ocks\u00e5 Virtual och Override.</p> <p>Polymorfism inom programmering \u00e4r n\u00e4r flera olika saker liknar varandra s\u00e5 pass mycket att de kan ers\u00e4tta varandra, eller n\u00e4r man kan anv\u00e4nda ett och samma namn f\u00f6r att referera till flera olika saker.</p> <p>Ett exempel p\u00e5 detta \u00e4r metod\u00f6verlagring, d\u00e4r man anv\u00e4nder samma namn p\u00e5 flera olika metoder, och C# anv\u00e4nder parameterv\u00e4rden f\u00f6r att avg\u00f6ra vilken metod som ska k\u00f6ras.</p>"},{"location":"klasser-och-objektorientering/polymorfism/#polymorfism-klasser-och-arv","title":"Polymorfism, klasser och arv","text":"<p>Inom objektorientering anv\u00e4nds polymorfism genom att en variabel vars datatyp \u00e4r satt till en basklass kan inneh\u00e5lla instanser av subklasser till den basklassen.</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character\n{\n  public string Name {get; set;}\n  public int Hp {get; set;} = 100;\n\n  public void Hurt(int amount)\n  {\n    hp -= amount;\n  }\n}\n</code></pre></p> <p>{% code title=\"Hero.cs\" lineNumbers=\"true\" %} <pre><code>class Hero: Character\n{\n  int xp {get; private set;} = 0;\n  int Level {get; private set;} = 1;\n\n  public void AddExperience(int amount)\n  {\n    Xp += amount;\n    Level = 1 + xp / 10;\n  }\n}\n</code></pre></p> <p>{% code title=\"Program.cs\" lineNumbers=\"true\" %} <pre><code>Character myHero = new Hero();\n</code></pre></p> <p>Det h\u00e4r \u00e4r praktiskt n\u00e4r man till exempel vill ha en lista med alla karakt\u00e4rer i spelet:</p> <p>{% code title=\"Program.cs\" lineNumbers=\"true\" %} <pre><code>List&lt;Character&gt; characters = new List&lt;Character&gt;();\n\ncharacters.Add(new Hero());\n</code></pre></p> <p>Ett problem med detta \u00e4r att man d\u00e5 bara har tillg\u00e5ng till de publika variabler och metoder som ing\u00e5r i basklassen. I exemplet ovan kan man med andra ord anropa <code>myHero.Hurt</code> eller <code>characters[0].Hurt</code> men man kan inte anropa <code>AddExperience</code> eftersom den bara finns i subklassen.</p> <p>D\u00e4rf\u00f6r \u00e4r det en bra id\u00e9 att tillf\u00f6ra s\u00e5 f\u00e5 nya metoder som beh\u00f6ver anropas utifr\u00e5n som m\u00f6jligt, n\u00e4r man designar subklasser som ska kunna fungera polymorfiskt. I idealfallet ing\u00e5r allts\u00e5 alla metoder och variabler som ska vara \u00e5tkomliga utifr\u00e5n redan i basklassen.</p>"},{"location":"klasser-och-objektorientering/polymorfism/#tvingad-tolkning","title":"Tvingad tolkning","text":"<p>As och framf\u00f6r allt Is ger praktiska verktyg att arbeta med polymorfa klasser. Det \u00e4r anv\u00e4ndbart framf\u00f6r allt n\u00e4r subklasser till exempel l\u00e4gger till nya metoder eller properties.</p> <p>{% code lineNumbers=\"true\" %} <pre><code>foreach(Character c in characters)\n{\n  if (c is Hero h)\n  {\n    h.AddExperience(10);\n  }\n}\n</code></pre></p>"},{"location":"klasser-och-objektorientering/polymorfism/virtual-override/","title":"Virtual, override","text":"<p>N\u00e4r man vill kunna l\u00e5ta en subklass ha en egen version av en metod som finns i basklassen s\u00e5 anv\u00e4nder man virtual och override.</p> <p>Virtual anv\u00e4nds f\u00f6r att markera metoder i basklassen som f\u00e5r \"skrivas \u00f6ver\" av subklasserna.</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character\n{\n  protected int _hp = 100;\n  protected int _damage = 5;\n\n  public int Attack()\n  {\n    return Random.Shared.Next(_damage);\n  }\n\n  public virtual void Hurt(int amount)\n  {\n    _hp -= amount;\n  }\n}\n</code></pre></p> <p>Override anv\u00e4nds f\u00f6r att ge en subklass en egen version av en metod fr\u00e5n basklassen som markerats som virtuell.</p> <p>{% code title=\"Berbarian.cs\" lineNumbers=\"true\" %} <pre><code>class Barbarian: Character\n{\n  public override void Hurt(int amount)\n  {\n    _hp -= amount / 2;\n  }\n}\n</code></pre></p> <p>F\u00f6r att Override ska fungera s\u00e5 m\u00e5ste det finnas en metod i basklassen som ser likadan ut (samma namn, samma returtyp, samma antal parametrar med samma datatyper) och som \u00e4r virtual.</p> <p>Syftet med detta \u00e4r att g\u00f6ra s\u00e5 att man inte m\u00e5ste skapa nya metoder \u00e5t subklasserna n\u00e4r de ska fungera annorlunda \u00e4n basklassen. Det h\u00e4r \u00e4r en av byggstenarna f\u00f6r polymorfism.</p>"},{"location":"klasser-och-objektorientering/polymorfism/virtual-override/#base","title":"Base","text":"<p>Base l\u00e5ter en subklass f\u00e5 tillg\u00e5ng till basklassens version av en metod.</p> <p>{% code title=\"Character.cs\" lineNumbers=\"true\" %} <pre><code>class Character\n{\n  protected int _hp = 100;\n  protected int _damage = 5;\n\n  public virtual int Attack()\n  {\n    return Random.Shared.Next(_damage);\n  }\n\n  public virtual void Hurt(int amount)\n  {\n    _hp -= amount;\n  }\n}\n</code></pre></p> <p>{% code title=\"Fighter.cs\" lineNumbers=\"true\" %} <pre><code>class Fighter\n{\n  public override int Attack()\n  {\n    return base.Attack() * 2;\n  }\n}\n</code></pre></p> <p>N\u00e4r en Fighter-instans' Attack-metod anropas i koden ovan, s\u00e5 anropas f\u00f6rst basklassens Attack-metod, som returnerar 5. Den femman multipliceras med 2 och resultatet returneras. Med andra ord:</p> <p>{% code lineNumbers=\"true\" %} <pre><code>Fighter f = new Fighter();\nint damage = f.Attack();\n</code></pre></p> <p>I exemplet ovan blir damage lika med 10.</p>"},{"location":"mjukvara/andra-verktyg/","title":"Andra verktyg","text":"<ul> <li>SharpLab: Testa C#-kod snabbt i webbl\u00e4saren.</li> <li>Homebrew: Installera saker snabbt och enkelt i MacOS-milj\u00f6</li> <li>t.ex: <code>brew install git</code></li> <li>Winget: Inbyggt i windows 10 och 11, enkelt s\u00e4tt att installera saker i Windowsmilj\u00f6</li> <li>t.ex: <code>winget install git.git</code></li> </ul>"},{"location":"mjukvara/dotnet-sdk/","title":"Dotnet SDK","text":"<p>F\u00f6r att du ska kunna skapa och kompilera C#-projekt beh\u00f6vs .NET SDK; ladda ner fr\u00e5n https://dotnet.microsoft.com/download eller anv\u00e4nd winget:</p> <pre><code>winget install Microsoft.DotNet.SDK.9\n</code></pre> <p>N\u00e4r du installerat; \u00f6ppna terminalen / powershell och skriv:</p> <pre><code>dotnet --list-sdks\n</code></pre> <p>Nu b\u00f6r du f\u00e5 en lista med de versioner av .NET SDK som \u00e4r installerade.</p>"},{"location":"mjukvara/dotnet-sdk/#macos","title":"MacOS","text":"<p>Ta reda p\u00e5 ifall din Mac k\u00f6r Intel eller Apple Silicon (M1/M2).</p> <p>G\u00e5 till https://dotnet.microsoft.com/download och v\u00e4lj r\u00e4tt version att ladda ner.</p> <p>K\u00f6r installationsprogrammet och skriv in l\u00f6senordet n\u00e4r det efterfr\u00e5gas.</p> <p>N\u00e4r du installerat: Se till s\u00e5 att Terminalen inte \u00e4r \u00f6ppen (st\u00e4ng den isf). \u00d6ppna den. Skriv:</p> <pre><code>dotnet --list-sdks\n</code></pre> <p>Nu b\u00f6r du f\u00e5 en lista med de versioner av .NET SDK som \u00e4r installerade.</p> <p>Om du har Homebrew installerat kan du ist\u00e4llet installera dotnet med:</p> <pre><code>brew install --cask dotnet-sdk\n</code></pre>"},{"location":"mjukvara/dotnet-sdk/#saker-att-testa-om-det-inte-funkar","title":"Saker att testa om det inte funkar","text":"<p>(Alla <code>dessa</code> inneb\u00e4r att man skriver kommandon i terminalen)</p> <ul> <li>K\u00f6r <code>/usr/local/share/dotnet/dotnet</code> \u2013 funkar det? Eller s\u00e4ger den att det inte finns n\u00e5got s\u00e5dant kommando?</li> <li>Om det inte funkar \u2013 d\u00e5 \u00e4r dotnet inte installerat, och du b\u00f6r kunna testa igen (f\u00f6rslagsvis via Homebrew).</li> <li>Om det funkar \u2013 d\u00e5 \u00e4r dotnet installerat, men systemet f\u00f6rst\u00e5r inte var p\u00e5 h\u00e5rddisken det ligger. Se nedan.</li> <li>Kolla om dotnet finns med i systemets lista med mappar som det letar i efter filer att k\u00f6ra: <code>echo $path</code>. Se ifall /usr/local/share/dotnet finns med i listan.</li> <li>Om inte:  <code>cd /etc/paths.d</code> (g\u00e5r till mappen d\u00e4r infon ska l\u00e4ggas in) <code>nano dotnet</code> (\u00f6ppnar r\u00e4tt fil i en texteditor)     l\u00e4gg in <code>/usr/local/share/dotnet</code> i filen.     Ctrl+x f\u00f6r att avsluta, y f\u00f6r att spara.</li> <li>Om inte ovanst\u00e5ende funkar: Avinstallera alla dotnet-versioner och b\u00f6rja om</li> <li>Med Brew \u00e4r det l\u00e4tt: <code>brew uninstall dotnet-sdk</code></li> <li>Annars \u2013 f\u00f6lj instruktionerna h\u00e4r: https://github.com/dotnet/cli-lab/releases</li> </ul>"},{"location":"mjukvara/git-and-github/","title":"Git &amp; GitHub [\u2026]","text":"<p>Saker som beh\u00f6vs:</p> <ul> <li>Visual Studio Code</li> <li><code>winget install Microsoft.VisualStudioCode</code></li> <li>Gitignore-extension</li> <li>Git</li> <li><code>winget install git.git</code></li> <li>Mac<ul> <li>Om Homebrew \u00e4r installerat: <code>brew install git</code></li> <li>Ing\u00e5r i Xcode command line tools: <code>xcode-select \u2013-install</code></li> <li>OBS! Inte bara Git, kr\u00e4ver 1\u20132gb h\u00e5rddiskutrymme</li> <li>Finns som standalone installer.</li> </ul> </li> <li>Ett konto p\u00e5 GitHub.</li> </ul> <p>Kan vara v\u00e4ldigt bra:</p> <ul> <li>GitLens-extension (l\u00e4gger till bl.a visuell historik direkt i vscode)</li> </ul>"},{"location":"mjukvara/git-and-github/#forsta-gangen-efter-ny-git-installation","title":"F\u00f6rsta g\u00e5ngen efter ny Git-installation","text":"<ul> <li>G\u00e5 till Terminal i menyn och v\u00e4lj New terminal.</li> <li>I terminalen som dyker upp l\u00e4ngst ner, skriv:</li> <li><code>git config --global user.name \"F\u00f6rnamn Efternamn\"</code> , fast med dina namn, och tryck enter.</li> <li><code>git config --global user.email \"fornamn.efternamn@elev.ga.ntig.se\"</code> , fast med den E-mailadress du registrerade dig med p\u00e5 GitHub, och tryck enter.</li> </ul>"},{"location":"mjukvara/git-and-github/#arbeta-med-git-github-och-visual-studio-code","title":"Arbeta med Git (+GitHub) och Visual Studio Code","text":""},{"location":"mjukvara/git-and-github/#skapa-ett-projekt-och-gora-det-till-ett-repository-koppla-till-github-en-gang-per-projekt","title":"Skapa ett projekt och g\u00f6ra det till ett repository + koppla till GitHub (en g\u00e5ng per projekt)","text":"<ul> <li>Se till att ha git installerat, och VSCode-till\u00e4gget \"gitignore\".</li> <li>Skapa projektet som vanligt.</li> <li>Source Control \u2192 Initialize Repository.</li> <li>Tryck F1 och s\u00f6k \"add gitignore\". V\u00e4lj Visual Studio.</li> <li>Tryck \"Publish Branch\"</li> <li>F\u00f6rsta g\u00e5ngen: F\u00f6lj instruktionerna f\u00f6r att knyta Visual Studio Code till github-kontot.<ul> <li>\"The extension 'GitHub' wants to sign in using GitHub\" --&gt; Allow</li> <li>L\u00e5t VSCode \u00f6ppna l\u00e4nken i webbl\u00e4saren.</li> <li>\"Authorize Visual Studio Code to access GitHub\".</li> <li>\"This site is trying to open Visual Studio Code\" --&gt; Open</li> <li>\"Allow an extension to open this URI?\" --&gt; Open</li> </ul> </li> <li>V\u00e4lj \"Publish to GitHub public repository\".</li> <li>F\u00f6rsta g\u00e5ngen: F\u00f6lj instruktionerna f\u00f6r att l\u00e5ta Visual Studio Code ladda upp filer. <ul> <li>GitHub Sign in --&gt; \"Sign in with your browser\"</li> <li>Godk\u00e4nn</li> <li>G\u00e5 tillbaka till Visual Studio Code.</li> </ul> </li> </ul>"},{"location":"mjukvara/git-and-github/#commits-da-och-da","title":"Commits (d\u00e5 och d\u00e5)","text":"<ul> <li>G\u00f6r \u00e4ndringar i projektet.</li> <li>G\u00e5 till Source Control.</li> <li>(Kryssa ur eventuella filer du inte vill ha med i committen.)</li> <li>Fyll i en kort Summary.</li> <li>Tryck Commit (Ctrl+Enter i Summary-rutan funkar ocks\u00e5).</li> </ul>"},{"location":"mjukvara/git-and-github/#push-en-gang-per-lektion","title":"Push (en g\u00e5ng per lektion)","text":"<p>N\u00e4r du gjort alla commits f\u00f6r denna g\u00e5ng och t.ex. ska st\u00e4nga av datorn eller l\u00e4mna lektionen.</p> <ul> <li>G\u00e5 till Source Control</li> <li>Tryck Sync Changes.</li> </ul>"},{"location":"mjukvara/git-and-github/#lamna-in-en-git-lank-en-gang-per-projekt","title":"L\u00e4mna in en Git-l\u00e4nk (en g\u00e5ng per projekt)","text":"<ul> <li>G\u00e5 till projektsidan p\u00e5 github.com.</li> <li>Kopiera URL:en i adressf\u00e4ltet</li> <li>Kopiera l\u00e4nken och l\u00e4mna in. Numera kan man l\u00e4gga till l\u00e4nkar direkt i sitt svar i Classroom!</li> </ul>"},{"location":"mjukvara/git-and-github/#gora-ett-projekt-publikt","title":"G\u00f6ra ett projekt publikt","text":"<p>Om man r\u00e5kat g\u00f6ra ett projekt privat p\u00e5 GitHub.com\u2026</p> <ul> <li>G\u00e5 till projektsidan p\u00e5 github.com.</li> <li>G\u00e5 till \"Settings\".</li> <li>Bland knapparna l\u00e4ngst ner finns \"Make Public\".</li> <li>Skriv in repots namn f\u00f6r att bekr\u00e4fta.</li> </ul>"},{"location":"mjukvara/git-and-github/#aterga-till-den-senaste-committen","title":"\u00c5terg\u00e5 till den senaste committen","text":"<ul> <li>G\u00e5 till Source Control i Visual Studio Code.</li> <li>H\u00f6gerklicka p\u00e5 filen eller filerna du vill \u00e5terst\u00e4lla.</li> <li>(Du kan markera flera filer genom att klicka p\u00e5 den f\u00f6rsta filen, h\u00e5lla nere shift och klicka p\u00e5 den sista filen)</li> <li>V\u00e4lj \"Discard changes\".</li> </ul>"},{"location":"mjukvara/git-and-github/#angra-den-senaste-committen","title":"\u00c5ngra den senaste committen","text":"<p>Info</p> <p>OBSERVERA: Kr\u00e4ver GitLens.</p> <ul> <li>G\u00e5 till Source Control i Visual Studio Code.</li> <li>\u00d6ppna \"Commits\" i listan under \"Changes\" f\u00f6r att se en lista med alla commits.</li> <li>H\u00f6gerklicka p\u00e5 den senaste committen.</li> <li>V\u00e4lj \"Revert commit\".</li> <li>V\u00e4lj alternativet med \"--no-edit\".</li> </ul>"},{"location":"mjukvara/git-and-github/#avancerat-ga-tillbaka-flera-commits-pa-en-gang","title":"Avancerat: g\u00e5 tillbaka flera commits p\u00e5 en g\u00e5ng","text":"<p>Info</p> <p>OBSERVERA: Kr\u00e4ver GitLens.</p> <ul> <li>G\u00e5 till Source Control i Visual Studio Code.</li> <li>\u00d6ppna \"Commits\" i listan under \"Changes\" f\u00f6r att se en lista med alla commits.</li> <li>H\u00f6gerklicka p\u00e5 den commit du vill g\u00e5 tillbaka till.</li> <li>V\u00e4lj \"Reset current branch to commit\". V\u00e4lj Hard.</li> <li>Expandera \"changes to pull from Origin on GitHub\".</li> <li>H\u00f6gerklicka p\u00e5 den senaste/nyaste committen.</li> <li>V\u00e4lj \"Reset current branch to commit\". V\u00e4lj Soft.</li> <li>G\u00f6r en ny commit. Denna commit kommer nu att inneb\u00e4ra en radering av alla \u00e4ndringar som fanns i alla commits mellan den senaste committen och den du \u00e5terst\u00e4llde till.</li> </ul>"},{"location":"mjukvara/git-and-github/git-begrepp/","title":"Git-begrepp","text":""},{"location":"mjukvara/git-and-github/git-begrepp/#repository-repo","title":"Repository / \"Repo\"","text":"<p>En \"projektmapp\" som bevakas av Git och som inneh\u00e5ller dels projektets filer s\u00e5 som de ser ut just nu, och dels \"commits\" \u2013 avbildningar av hur filerna sett ut vid tidigare tillf\u00e4llen.</p> <p>Kan vara local (p\u00e5 den egna datorn) eller remote (p\u00e5 en annan dator).</p> <p>Ofta kopplar man ihop ett lokalt repository med ett remote, och synkroniserar mellan dem medan man arbetar.</p>"},{"location":"mjukvara/git-and-github/git-begrepp/#commit","title":"Commit","text":"<p>En \u00f6gonblicksbild av filerna i projektmappen. Kan beskrivas som en \"version\" av projektet.</p> <p>Medan man arbetar g\u00f6r man normalt commits l\u00f6pande. Man kan alltid g\u00e5 tillbaka till en tidigare commits, och se vad som \u00e4ndrats mellan olika commits.</p> <p>Man kan v\u00e4lja vilka filer som ska ing\u00e5 i en commit.</p>"},{"location":"mjukvara/git-and-github/git-begrepp/#pull","title":"Pull","text":"<p>Man laddar ner alla nya commits fr\u00e5n ett remote repository.</p>"},{"location":"mjukvara/git-and-github/git-begrepp/#push","title":"Push","text":"<p>Man laddar upp alla sina nya commits till ett remote repository.</p>"},{"location":"mjukvara/git-and-github/git-begrepp/#branch","title":"Branch","text":"<p>Anv\u00e4nds n\u00e4r man \u00e4r flera som jobbar p\u00e5 olika delar av samma lite st\u00f6rre projekt. N\u00e4r man skapar en egen branch s\u00e5 kan man fritt g\u00f6ra \u00e4ndringar i denna bransch utan att det st\u00e4ller till saker f\u00f6r andra. N\u00e4r man \u00e4r klar med arbetet kan man \"merge:a\" sin branch med huvud-branchen och d\u00e5 best\u00e4mma vilka av ens \u00e4ndringar som ska beh\u00e5llas.</p>"},{"location":"mjukvara/visual-studio-code/","title":"Visual Studio Code [\u2026]","text":"<p>Extensions | Inst\u00e4llningar | Debugging | Snabbkommandon | Snippets | Fels\u00f6kning</p> <p>Visual Studio Code (VS Code) \u00e4r en lite nyare kod-editor fr\u00e5n Microsoft som \u00e4r betydligt snabbare och enklare \u00e4n vanliga Visual Studio. Den funkar ocks\u00e5 b\u00e4ttre till m\u00e5nga saker, \u00e4ven om den saknar en del av de mer avancerade verktygen som finns i det st\u00f6rre programmet.</p> <p>Ladda ner Visual Studio Code fr\u00e5n https://code.visualstudio.com/ eller anv\u00e4nd winget:</p> <pre><code>winget install Microsoft.VisualStudioCode\n</code></pre> <p>Du kommer ocks\u00e5 att vilja installera n\u00e5gra anv\u00e4ndbara extensions och g\u00f6ra n\u00e5gra inst\u00e4llningar.</p>"},{"location":"mjukvara/visual-studio-code/#macos","title":"MacOS","text":"<p>\u00c4ven p\u00e5 Mac kan du installera fr\u00e5n https://code.visualstudio.com/.</p> <p>Du kan ocks\u00e5 anv\u00e4nda Homebrew om du har det installerat:</p> <pre><code>brew install --cask visual-studio-code\n</code></pre>"},{"location":"mjukvara/visual-studio-code/debugging/","title":"Debugging","text":"<p> Debugging \u00e4r ett s\u00e4tt att unders\u00f6ka vad som h\u00e4nder i ens kod medan den k\u00f6rs. Genom att l\u00e4gga in breakpoints p\u00e5 specifika rader i sin kod s\u00e5 \"pausas\" k\u00f6rningen d\u00e4r och man kan se vilka v\u00e4rden programmets olika variabler har just d\u00e5.</p> <p>Du skapar en breakpoint genom att klicka till v\u00e4nster om radnumret. D\u00e5 placeras en liten r\u00f6d prick d\u00e4r. Du kan plocka bort din breakpoint genom att klicka p\u00e5 den r\u00f6da pricken.</p> <p> </p> <p>N\u00e4r du sedan k\u00f6r/debuggar ditt program (F5) s\u00e5 pausas k\u00f6rningen vid din breakpoint.</p> <p>Du kan d\u00e5 se vilket v\u00e4rde olika variabler har under Variables i Run-vyn.</p> <p> </p> <p>Du kan forts\u00e4tta k\u00f6rningen genom att klicka p\u00e5 \"Continue\".</p> <p> </p> <p>Du kan ocks\u00e5 forts\u00e4tta k\u00f6rningen rad f\u00f6r rad genom att klicka \"Step Over\" (F10) eller \"Step Into\" (F11).</p> <p>Med Step Over stannar du i den nuvarande metoden.</p> <p>Med Step Into f\u00f6ljer du \u00e4ven med in i metoder som anropas.</p>"},{"location":"mjukvara/visual-studio-code/extensions/","title":"Extensions","text":"<p>Extensions l\u00e4gger till funktioner i Visual Studio Code. I grunden \u00e4r ju Code en ganska simpel kod-editor utan st\u00f6d f\u00f6r specifika spr\u00e5k.</p> <p>Klicka p\u00e5 den h\u00e4r ikonen i v\u00e4nstermenyn f\u00f6r att se extensions:</p> <p></p> <p>D\u00e4r syns vilka som just nu \u00e4r installerade, och man kan \u00e4ven s\u00f6ka efter nya extensions.</p> <p>Om man har en l\u00e4nk till en extension \u2013 som de nedan \u2013 kan man helt enkelt klicka p\u00e5 l\u00e4nken, sedan \"Install\" och sedan l\u00e5ta webb\u00e4saren \u00f6ppna Visual Studio Code och installera extensionen.</p> <p>Info</p> <p>TIPS: Man kan installera extensions via terminalen/kommandotolken ocks\u00e5:</p> <p><code>code --install-extension ms-dotnettools.csdevkit</code></p> <p><code>code --install-extension codezombiech.gitignore</code></p> <p><code>code --install-extension patcx.vscode-nuget-gallery</code></p> <p><code>code --install-extension eliostruyf.vscode-hide-comments</code></p>"},{"location":"mjukvara/visual-studio-code/extensions/#anvandbara-extensions","title":"Anv\u00e4ndbara extensions","text":""},{"location":"mjukvara/visual-studio-code/extensions/#grunduppsattning-for-c","title":"Grundupps\u00e4ttning f\u00f6r C#","text":"<ul> <li>C# Dev Kit \u2013 Get Visual Studio Code st\u00f6d f\u00f6r C# &amp; underl\u00e4ttar projekthantering.</li> <li>OBS: G\u00e5 till \"IntelliCode for C# Dev Kit\" som automatiskt installeras, och st\u00e4ng av (tryck Disable)! Den kan vara anv\u00e4ndbar, men inte medan man l\u00e4r sig!</li> <li>gitignore \u2013 Underl\u00e4ttar arbetet med git och Visual Studio Code. Om du s\u00f6ker efter den, se till att ta den av CodeZombie!</li> <li>NuGet Gallery \u2013 Underl\u00e4ttar installationen av externa bibliotek och paket, t.ex. Raylib.</li> <li>Hide Comments \u2013 G\u00f6mmer alla kommentarer. Anv\u00e4nds n\u00e4r du presenterar din kod.</li> </ul>"},{"location":"mjukvara/visual-studio-code/extensions/#bonus","title":"Bonus","text":"<ul> <li>Vscode-icons \u2013 ger tydligare ikoner f\u00f6r filer och mappar.</li> <li>NoesisGUI XAML Tools \u2013 hj\u00e4lper till med kodkomplettering n\u00e4r man skriver XAML-kod. Inte perfekt! Eftersom den egentligen \u00e4r gjord f\u00f6r en v\u00e4ldigt specifik anv\u00e4ndning av XAML.</li> <li>Thunder Client \u2013 g\u00f6r att man kan testa API-anrop direkt i VScode, b\u00e5de mot lokala servrar som man bygger sj\u00e4lv och servrar p\u00e5 det lokala n\u00e4tverket eller internet.</li> <li>Roslynator \u2013 Ger en hel del kodf\u00f6rslag och hj\u00e4lp.</li> <li>Vill du ha \u00e4nnu mer pedantisk \"hj\u00e4lp\"? Anv\u00e4nd NuGet Gallery f\u00f6r att l\u00e4gga till StyleCop.Analyzers till ditt projekt.</li> <li>Live Share \u2013 Realtids-samarbete; flera personer kan skriva kod tillsammans samtidigt.</li> </ul>"},{"location":"mjukvara/visual-studio-code/felsoekning/","title":"Fels\u00f6kning","text":"<p>Visual Studio Code \u00e4r ganska nytt och inte ett lika \"f\u00e4rdigt paket\" som Visual Studio. D\u00e4rf\u00f6r kan det ibland bli kr\u00e5ngel, lite beroende p\u00e5 vad man har p\u00e5 sin dator i \u00f6vrigt, och hur den m\u00e5r. H\u00e4r nedan finns n\u00e5gra saker man kan g\u00f6ra f\u00f6r att fels\u00f6ka.</p>"},{"location":"mjukvara/visual-studio-code/felsoekning/#allmanna-saker-att-testa","title":"Allm\u00e4nna saker att testa","text":"<ul> <li>Testa F1 (eller Fn+F1) f\u00f6r att f\u00e5 fram kommandopaletten, och k\u00f6r \"OmniSharp: Restart OmniSharp\".</li> <li>Starta om Visual Studio Code.</li> <li> <p>Kolla om du har Visual Studio 2017 eller 2019 installerad. Om du har det, starta Visual Studio Installer och uppdatera Visual Studio.</p> <ul> <li>Eller avinstallera Visual Studio 2017/2019 helt.</li> </ul> <p>Kolla \"Output\" (View \u2192 Output) och se om VSCode h\u00e5ller p\u00e5 och installerar OmniSharp, .NET Core Debugger och Razor Language Server. Om den h\u00e5ller p\u00e5 med det, v\u00e4nta tills den \u00e4r klar. * Dubbelkolla att DotNet Core SDK och C#-till\u00e4gget i Visual Studio Core \u00e4r installerade   * Du kan dubbelkolla att en tillr\u00e4ckligt ny version av DotNet Core SDK \u00e4r installerat genom att \u00f6ppna terminalen i Visual Studio Code och skriva \"<code>dotnet --version</code>\". Du b\u00f6r f\u00e5 en siffra med en version, och du b\u00f6r ha minst version 3.1.</p> </li> </ul>"},{"location":"mjukvara/visual-studio-code/felsoekning/#the-nuclear-option","title":"The nuclear option","text":"<p>Om ingenting fungerar s\u00e5 kan du testa en fullst\u00e4ndig ominstallation.</p> <ul> <li>Avinstallera (alla versioner av) DotNet Core SDK</li> <li>Avinstallera (alla versioner av) Visual Studio</li> <li>Avinstallera Visual Studio Code</li> <li>\u00d6ppna Utforskaren (Windows + E)</li> <li>G\u00e5 till din anv\u00e4ndarmapp</li> <li>Visa \u2192 Dolda objekt</li> <li>Ta bort mappen .vscode</li> </ul> <p>Installera sedan DotNet Core SDK och Visual Studio Code igen, och de till\u00e4gg du vill ha.</p>"},{"location":"mjukvara/visual-studio-code/felsoekning/#min-debug-ar-tom","title":"Min Debug \u00e4r tom!","text":"<ul> <li>Klicka p\u00e5 den lilla klockan l\u00e4ngst ner till h\u00f6ger och se om du har en notification om att \"Required assets to build and debug are missing\". Om du har det, tryck \"Yes\".</li> <li>Om du inte har det, testa att ta fram kommandopaletten (F1 eller View \u2192 Command Palette) och s\u00f6k efter \"Generate Assets for Build and Debug\". K\u00f6r det kommandot.</li> <li>Om du f\u00e5r ett felmeddelande n\u00e4r du g\u00f6r det, s\u00f6k efter \"OmniSharp: Restart OmniSharp\". K\u00f6r det kommandot.</li> <li>S\u00f6k efter \"Omnisharp: Select Project\" och v\u00e4lj SLN-filen.</li> </ul>"},{"location":"mjukvara/visual-studio-code/felsoekning/#jag-far-ingen-kodkomplettering-i-unity","title":"Jag f\u00e5r ingen kodkomplettering i Unity!","text":"<p>Ladda ner och installera .NET Framework 4.7.1.</p>"},{"location":"mjukvara/visual-studio-code/instaellningar/","title":"Inst\u00e4llningar","text":"<p>Under Settings (Kugghjulet och sen Settings, eller kortkommandot Ctrl+, ) finns en hel massa anv\u00e4ndbara inst\u00e4llningar.</p> <p></p> <p>Man kan antingen bl\u00e4ddra sj\u00e4lv, eller s\u00f6ka efter namnet p\u00e5 den inst\u00e4llning man vill \u00e4ndra.</p> <p>VS Code sparar alla inst\u00e4llningar i en JSON-fil, d\u00e4r varje inst\u00e4llning har ett unikt namn. Om man vill kan man redigera denna JSON-fil manuellt. F\u00f6r att f\u00e5 fram den, ta fram kommandopaletten (F1) och k\u00f6r Preferences: Open User Settings (JSON).</p>"},{"location":"mjukvara/visual-studio-code/instaellningar/#fa-bort-ghost-text-for-textforslag","title":"F\u00e5 bort \"ghost text\" f\u00f6r textf\u00f6rslag","text":"<p>En st\u00f6rande sak Code b\u00f6rjat g\u00f6ra \u00e4r att visa f\u00f6rslag som gr\u00e5 text mitt i ens kod. Vill man inte att det  ska funka s\u00e5, s\u00e5 kan man s\u00f6ka efter editor.suggest.preview och kryssa ur rutan.</p>"},{"location":"mjukvara/visual-studio-code/instaellningar/#kordebugga-i-external-terminal","title":"K\u00f6r/debugga i external terminal","text":"<p>I vanliga fall visas all output fr\u00e5n koden i Visual Studio Codes egna interna terminalf\u00f6nster. Det \u00e4r inte idealiskt, s\u00e5 den h\u00e4r inst\u00e4llningen g\u00f6r s\u00e5 att koden ist\u00e4llet k\u00f6rs i ett separat terminalf\u00f6nster.</p> <p>S\u00f6k efter csharp.debug.console och \u00e4ndra inst\u00e4llningen till \"externalTerminal\".</p>"},{"location":"mjukvara/visual-studio-code/instaellningar/#fa-bort-references","title":"F\u00e5 bort \"references\"","text":"<p>S\u00f6k efter csharp.referencesCodeLens.enabled, och kryssa ur \"Csharp \u203a References Code Lens: Enabled\".</p>"},{"location":"mjukvara/visual-studio-code/instaellningar/#visa-mappar-ordentligt","title":"Visa mappar ordentligt","text":"<p>VS Code gillar att visa mappar \"kompakt\". Det betyder att den \"sammanfattar\" mappstrukturer i vissa fall, s\u00e5 att tr\u00e4det under Explore blir konstigt.</p> <p> Med compact folders</p> <p> Utan compact folders</p> <ul> <li>F\u00f6r att st\u00e4nga av det \u2013 s\u00f6k efter explorer.compactFolders och kryssa ur \"Explorer: Compact Folders\".</li> </ul>"},{"location":"mjukvara/visual-studio-code/instaellningar/#sortera-filer-enligt-svensk-bokstavsordning","title":"Sortera filer enligt svensk bokstavsordning","text":"<p>VS Code sorterar normalt sett \u00e5 och \u00e4 som om de vore \"a\" och \u00f6 som om det vore \"o\".</p> <p>S\u00f6k p\u00e5 explorer.sortOrderLexicographicOptions och v\u00e4lj \"unicode\" i dropdown-listan. D\u00c5 sorteras ist\u00e4llet \u00e5, \u00e4 och \u00f6 som de ska l\u00e4ngst ner i listan.</p>"},{"location":"mjukvara/visual-studio-code/instaellningar/#automatiskt-pusha-commits","title":"Automatiskt pusha commits","text":"<p>F\u00f6r att f\u00e5 VS Code att automatiskt g\u00f6ra en Git Push direkt efter varje Commit (se Git f\u00f6r mer info om commit och push):</p> <p>S\u00f6k efter git.postCommitCommand och v\u00e4lj Push eller Sync ist\u00e4llet f\u00f6r None.</p>"},{"location":"mjukvara/visual-studio-code/instaellningar/#settingsjson","title":"Settings.json","text":"<p>I .vscode-mappen kan det finnas en \"settings.json\", och om det inte finns en kan du skapa en. D\u00e4r kan du samla inst\u00e4llningar du vill spara. Man kan allts\u00e5 ha inst\u00e4llningar antingen per dator eller per projekt.</p> <p>{% code title=\"settings.json\" %} <pre><code>{\n  \"csharp.referencesCodeLens.enabled\": false,\n  \"csharp.debug.console\": \"externalTerminal\",\n  \"explorer.compactFolders\": false,\n  \"explorer.sortOrderLexicographicOptions\": \"unicode\",\n  \"git.postCommitCommand\": \"push\"\n}\n</code></pre></p>"},{"location":"mjukvara/visual-studio-code/snabbkommandon/","title":"Snabbkommandon","text":""},{"location":"mjukvara/visual-studio-code/snabbkommandon/#specifika-for-visual-studio-code","title":"Specifika f\u00f6r Visual Studio Code","text":"<p>F1 \u2013 Kommandopaletten, d\u00e4r man kan s\u00f6ka efter kommandon eller filer</p> <p>Alt + pil upp / ner \u2013 Flytta markerad text upp\u00e5t/ner\u00e5t</p> <p>Shift + Alt + pil upp / ner \u2013 Skapa en kopia av markerad text upp\u00e5t/ner\u00e5t</p> <p>Shift + Alt + A \u2013 \u00c4ndra huruvida markerad text \u00e4r en blockkommentar eller ej</p> <p>Ctrl + ' \u2013 \u00c4ndra huruvida markerad text \u00e4r en vanlig kommentar eller ej</p> <p>Shift + Alt + F \u2013 Snygga till formateringen i dokumentet</p> <p>F2 \u2013 Byt namn p\u00e5 markerad variabel/metod/klass \u00f6verallt d\u00e4r den anv\u00e4nda</p> <p>F5 \u2013 K\u00f6r programmet</p> <p>F12 \u2013 G\u00e5 till den plats i koden d\u00e4r den markerade variabeln/metoden/klassen deklareras</p>"},{"location":"mjukvara/visual-studio-code/snabbkommandon/#allmanna","title":"Allm\u00e4nna","text":"<p>Ctrl + C \u2013 Kopiera</p> <p>Ctrl + X \u2013 Klipp ur</p> <p>Ctrl + V \u2013 Klistra in</p> <p>Home \u2013 Flytta mark\u00f6ren till b\u00f6rjan av raden</p> <p>End \u2013 Flytta mark\u00f6ren till slutet av raden</p> <p>Shift \u2013 H\u00e5ll nere f\u00f6r att ut\u00f6ka markering. S\u00e5 trycker man Home, sedan h\u00e5ller nere Shift och trycker p\u00e5 End, s\u00e5 markerar man hela raden.</p>"},{"location":"mjukvara/visual-studio-code/snippets/","title":"Snippets","text":"<p>Snippets \u00e4r ett slags \"genv\u00e4gar\" som g\u00f6r det l\u00e4ttare att skriva kod snabbt. En snippet fungerar genom att man skriver ett par tecken och sedan v\u00e4ljer r\u00e4tt snippet hur autocomplete-listan.</p> <p>N\u00e5gra inbyggda snippets:</p> <ul> <li>cw = System.Console.WriteLine()</li> <li>if = en if-sats</li> <li>while = en while-loop</li> <li>for = en for-loop</li> <li>try = ett try-catch-block</li> <li>ctor = en konstruktor</li> <li>prop = en property</li> </ul> <p> </p> <p> </p>"},{"location":"mjukvara/visual-studio-code/snippets/#lagga-till-egna-snippets","title":"L\u00e4gga till egna snippets","text":"<p>Man kan skapa egna snippets. Man g\u00e5r d\u00e5 till File, Preferences och User Snippets. D\u00e4r v\u00e4ljer man det spr\u00e5k man vill skapa snippets f\u00f6r. D\u00e5 \u00f6ppnas en json-fil d\u00e4r du kan skriva in dina snippets.</p> <pre><code>{\n  \"Readline\": {\n      \"prefix\": \"cre\",\n      \"body\": \"Console.ReadLine()\",\n      \"description\": \"Inserts a console readline\"\n  },\n  \"Writeline\":{\n    \"prefix\": \"cw\",\n    \"body\": \"Console.WriteLine($0);\",\n    \"description\": \"Inserts a console writeline\"\n  },\n  \"Hello\": {\n      \"prefix\": \"hello\",\n      \"body\": \"Console.WriteLine(\\\"Hello, World\\\")\",\n      \"description\": \"Inserts a nice greeting\"\n  }\n}\n</code></pre> <p>\"Readline\" och \"Hello\" \u00e4r namnen p\u00e5 de tv\u00e5 snippets som deklareras ovan.</p> <p>Prefixen \u00e4r de saker man kan skriva f\u00f6r att aktivera dem.</p> <p>Bodyn \u00e4r det som infogas.</p> <p>Allt du beh\u00f6ver g\u00f6ra sedan \u00e4r att spara filen.</p> <p>Man kan l\u00e4sa mer om att skriva egna snippets h\u00e4r.</p>"},{"location":"tekniker/2d-spelbraeden/","title":"2D-spelbr\u00e4den","text":"<p>Tv\u00e5dimensionella arrayer kan fungera v\u00e4ldigt bra f\u00f6r att lagra alla sorters rutn\u00e4t, till exempel tv\u00e5dimensionella spelbr\u00e4den.</p>"},{"location":"tekniker/2d-spelbraeden/#skapa-bradet","title":"Skapa br\u00e4det","text":"<pre><code>// Skapar inte en lista, utan ett \"rutn\u00e4t\" d\u00e4r varje position \n// inte har ett utan tv\u00e5 index. \n// S\u00e5 board[4, 5] \u00e4r en annan position \u00e4n board[4, 6].\nint[,] board = new int[20, 10];\n</code></pre>"},{"location":"tekniker/2d-spelbraeden/#nastlade-loopar","title":"N\u00e4stlade loopar","text":"<p>En n\u00e4stlad loop \u00e4r en loop som ligger i en annan loop. De anv\u00e4nds ofta n\u00e4r man vill g\u00f6ra n\u00e5got med tv\u00e5dimensionella arrayer \u2013 till exempel fylla dem med information.</p> <pre><code>for (int y = 0; y &lt; board.GetLength(1); y++)\n{\n  for (int x = 0; x &lt; board.GetLength(0); x++)\n  {\n    // Den inre loopen h\u00e4r k\u00f6rs en g\u00e5ng per unik position i \n    // den tv\u00e5dimensionella arrayen, och variablerna x och y \n    // har index-v\u00e4rdena f\u00f6r den aktuella positionen.\n\n    board[x, y] = 4; // \u00c4ndrar alla positioners v\u00e4rde till 4.\n\n\n    // \u00c4ndrar alla positioner som \u00e4r \"l\u00e4ngst till h\u00f6ger\" i rutn\u00e4tet till 2.\n    if (x == 0)\n    {\n      board[x, y] = 2; \n    }\n  }\n}\n</code></pre> <p>Samma teknik anv\u00e4nds ocks\u00e5 ofta f\u00f6r att rita ut rutn\u00e4tet till sk\u00e4rmen:</p> <pre><code>for (int y = 0; y &lt; board.GetLength(1); y++)\n{\n  for (int x = 0; x &lt; board.GetLength(0); x++)\n  {\n    Console.Write(board[x, y]); // Ritar ut den nuvarande rutan\n  }\n  Console.WriteLine(); // L\u00e4gger till en radbrytning i slutet p\u00e5 varje utritad rad.\n}\n</code></pre>"},{"location":"tekniker/begraensa-input/","title":"Begr\u00e4nsa input","text":"<p>Om man vill att en anv\u00e4ndare ska f\u00e5 v\u00e4lja mellan tv\u00e5 eller flera olika alternativ i en konsollapplikation, eller vill begr\u00e4nsa anv\u00e4ndarens input p\u00e5 n\u00e5got annat s\u00e4tt s\u00e5 kan man anv\u00e4nda en loop:</p> <pre><code>string answer = \"\"; // Skapa en tom svarsvariabel\n\n// Loopa s\u00e5 l\u00e4nge svar varken \u00e4r a eller b\nwhile (answer != \"a\" &amp;&amp; answer != \"b\")\n{\n  Console.Write(\"V\u00e4lj a eller b:\");\n\n  // H\u00e4mta in ett nytt v\u00e4rde f\u00f6r svar\n  answer = Console.ReadLine();\n\n  // Om svaret inte var a eller b, skriv ut ett felmeddelande\n  if (answer != \"a\" &amp;&amp; answer != \"b\")\n  {\n    Console.WriteLine(\"Du m\u00e5ste v\u00e4lja a eller b\");\n  }\n}\n</code></pre> <p>Villkoret i loopen kan givetvis vara vad som helst - fundera ut vilka krav du vill st\u00e4lla p\u00e5 anv\u00e4ndarens input och omvandla detta krav till en boolesk sats.</p> <p>Om man bara vill g\u00f6ra sin j\u00e4mf\u00f6relse en g\u00e5ng s\u00e5 kan man anv\u00e4nda en bool-variabel.</p> <pre><code>string answer = \"\";\n\nbool validAnswer = false;\n\nwhile (!validAnswer)\n{\n  Console.Write(\"V\u00e4lj a eller b:\");\n\n  answer = Console.ReadLine();\n\n  validAnswer = answer == \"a\" || answer == \"b\";\n\n  if (!validAnswer)\n  {\n    Console.WriteLine(\"Du m\u00e5ste v\u00e4lja a eller b\");\n  }\n}\n</code></pre> <p>Vill man vara lite mer avancerad kan man anv\u00e4nda en lista med giltiga svar:</p> <pre><code>string answer = \"\";\n\nList&lt;string&gt; validAnswers = new List&lt;string&gt;{\"a\", \"b\", \"c\"}\nbool validAnswer = false;\n\nwhile (!validAnswer)\n{\n  Console.Write($\"V\u00e4lj [{ String.Join(\",\", validAnswers) }]: \");\n\n  answer = Console.ReadLine();\n\n  // Blir true om svaret finns i arrayen\n  validAnswer = validAnswers.Contains(answer);\n\n  if (!validAnswer)\n  {\n    Console.WriteLine($\"Du m\u00e5ste v\u00e4lja en av { String.Join(\",\", validAnswers) }!\");\n  }\n}\n</code></pre>"},{"location":"tekniker/ga-igenom-en-array/","title":"G\u00e5 igenom en array (eller lista)","text":"<p>I en array anv\u00e4nds index fr\u00e5n 0 till X, d\u00e4r X \u00e4r 1 mindre \u00e4n antalet saker i arrayen. Om det finns 3 saker s\u00e5 finns index 0, 1 och 2.</p> <p>Detta kan utnyttjas f\u00f6r att effektivisera kod.</p> <p>Ist\u00e4llet f\u00f6r att skriva:</p> <pre><code>string[] choices = {\"Start\", \"Options\", \"Quit\"};\nConsole.WriteLine(choices[0]);\nConsole.WriteLine(choices[1]);\nConsole.WriteLine(choices[2]);\n</code></pre> <p>S\u00e5 kan man skapa en loop vars r\u00e4knare f\u00f6rst \u00e4r 0, sedan 1, sedan 2:</p> <pre><code>string[] choices = {\"Start\", \"Options\", \"Quit\"};\nint i = 0;\n\nwhile (i &lt; choices.Length)\n{\n  Console.WriteLine(choices[i]);\n  i++;\n}\n</code></pre> <p>Detta g\u00f6r att \u00e4ven om man skulle l\u00e4gga till tio nya namn till arrayen s\u00e5 kommer alla de nya namnen att skrivas ut tillsammans med de gamla.</p> <p>Detta kan \u00e4ven g\u00f6ras med listor och givetvis fungerar en for-loop lika bra (om inte b\u00e4ttre).</p> <pre><code>string[] choices = {\"Start\", \"Options\", \"Quit\"};\n\nfor (int i = 0; i &lt; choices.length; i++)\n{\n  Console.WriteLine(choices[i]);\n}\n</code></pre> <p>Foreach-loopar \u00e4r i princip skapade f\u00f6r exakt det h\u00e4r:</p> <pre><code>string[] choices = {\"Start\", \"Options\", \"Quit\"};\n\nforeach (string choice in choices)\n{\n  Console.WriteLine(choice);\n}\n</code></pre> <p>Denna teknik anv\u00e4nds MYCKET, till exempel f\u00f6r att:</p> <ul> <li>Skriva ut alla saker i en array</li> <li>Unders\u00f6ka varje grej i en array och se om den st\u00e4mmer \u00f6verens med n\u00e5got man letar efter</li> <li>\u00c4ndra p\u00e5 varje grej i en array (t.ex. fylla den med slumptal).</li> </ul>"},{"location":"tekniker/game-states/","title":"Game states","text":"<p>Game states, eller state machines, \u00e4r ett enkelt s\u00e4tt att l\u00e5ta ditt spel, eller objekt i ditt spel, vara mer dynamiska.</p> <p>Ett grundl\u00e4ggande exempel p\u00e5 game states:</p> <pre><code>bool gameContinues = true;\n\nint currentRoom = 0;\n\nwhile (gameContinues == true)\n{\n  if (currentRoom == 0)\n  {\n    Console.WriteLine(\"You are in room #0. Go to which room?\");\n    string whatRoom = Console.ReadLine();\n    if (whatRoom == \"1\")\n    {\n      currentRoom = 1;\n    }\n  }\n  else if (currentRoom == 1)\n  {\n    // Kod f\u00f6r rum 1\n  }\n  else if (currentRoom == 2)\n  {\n    // Kod f\u00f6r rum 2\n  }\n}\n</code></pre> <p>Varje g\u00e5ng loopen k\u00f6rs, s\u00e5 kollar spelet vilket rum spelaren \u00e4r i just den h\u00e4r \"v\u00e4ndan\", och k\u00f6r den koden. I koden f\u00f6r varje rum l\u00e4gger man in kod som kan \u00e4ndra vilket rum som \u00e4r \"current\". S\u00e5 om man skriver \"1\" i det f\u00f6rsta rummet s\u00e5 kommer man, n\u00e4sta g\u00e5ng loopen k\u00f6rs, att hamna i rum 1.</p> <p>Info</p> <p>TIPS: Man kan anv\u00e4nda en enum f\u00f6r sina rum ist\u00e4llet f\u00f6r en int.</p>"},{"location":"tekniker/laenkade-listor-och-andra-strukturer/","title":"L\u00e4nkade listor och andra strukturer","text":""},{"location":"tekniker/laenkade-listor-och-andra-strukturer/#lankade-listor","title":"L\u00e4nkade listor","text":"<p>F\u00f6rdelar med en l\u00e4nkad lista j\u00e4mf\u00f6rt med arrayer:</p> <ul> <li>Som en List beh\u00f6ver man inte definiera storleken fr\u00e5n b\u00f6rjan.</li> <li>Det g\u00e5r ganska snabbt att l\u00e4gga in n\u00e5got nytt i mitten, eller ta bort det.</li> <li>F\u00f6rst\u00e5r man l\u00e4nkade listor s\u00e5 blir det v\u00e4ldigt l\u00e4tt att sedan skapa andra strukturer s\u00e5som tr\u00e4d eller n\u00e4tverk.</li> </ul> <p>Nackdelar:</p> <ul> <li>Mycket jobbiga att sortera.</li> <li>Jobbigt att l\u00e4sa av en specifik position.</li> </ul>"},{"location":"tekniker/laenkade-listor-och-andra-strukturer/#hur-det-funkar","title":"Hur det funkar","text":"<p>En l\u00e4nkad lista best\u00e5r av noder. Varje nod inneh\u00e5ller (minst) ett v\u00e4rde samt en pekare till n\u00e4sta nod. Det finns ingen samling av alla noder n\u00e5gonstans; allt som finns \u00e4r pekaren fr\u00e5n en nod till en annan.</p> <p></p> Node.cs <pre><code>class Node\n{\n  public int value = 0; // Kan s\u00e5klart g\u00f6ras generisk f\u00f6r mer flexibilitet.\n  public Node nextNode;\n}\n</code></pre> <p>Program.cs</p> Program.cs <pre><code>static void Main(string[] args)\n{\n  Node firstNode = new Node();\n  firstNode.value = 3;\n  Node currentNode = firstNode;\n\n  // L\u00e4gg till 10 noder till den l\u00e4nkade listan\n  for (int i = 0; i &lt; 10; i++)\n  {\n    firstNode.nextNode = new Node();\n    currentNode = firstNode.nextNode;\n    currentNode.value = 10 - i;\n  }\n\n  // Stoppa in en nod mellan den f\u00f6rsta och den andra\n  Node newNode = new Node();\n  newNode.value = 9;\n  newNode.nextNode = firstNode.nextNode;\n  firstNode.nextNode = newNode;\n}\n</code></pre>"},{"location":"tekniker/laenkade-listor-och-andra-strukturer/#tvavags-lankade-listor-trad-och-natverk","title":"Tv\u00e5v\u00e4gs l\u00e4nkade listor, tr\u00e4d och n\u00e4tverk","text":"<p>Flera pekare kan peka p\u00e5 samma objekt. Det g\u00f6r att man kan skapa mer komplexa strukturer.</p>"},{"location":"tekniker/laenkade-listor-och-andra-strukturer/#tvavags","title":"Tv\u00e5v\u00e4gs","text":"Node.cs <pre><code>class Node\n{\n  public int value = 0;\n  public Node nextNode;\n  public Node prevNode;\n}\n</code></pre>"},{"location":"tekniker/laenkade-listor-och-andra-strukturer/#trad","title":"Tr\u00e4d","text":"Node.cs <pre><code>class Node\n{\n  public int value = 0;\n  public List&lt;Node&gt; children = new List&lt;Node&gt;();\n}\n</code></pre>"},{"location":"tekniker/laenkade-listor-och-andra-strukturer/#natverk","title":"N\u00e4tverk","text":"Node.cs <pre><code>class Node\n{\n  public int value = 0;\n  public List&lt;Node&gt; connections = new List&lt;Node&gt;();\n}\n</code></pre>"},{"location":"tekniker/ta-bort-saker-ur-listan-man-gar-igenom/","title":"Ta bort saker ur listan man g\u00e5r igenom","text":""},{"location":"tekniker/ta-bort-saker-ur-listan-man-gar-igenom/#problemet","title":"Problemet","text":"<p>Om man har en lista och anv\u00e4nder for eller foreach f\u00f6r att g\u00e5 igenom den, s\u00e5 blir det v\u00e4ldigt fel om man tar bort saker ur listan medan man loopar genom den.</p> <pre><code>List&lt;int&gt; numbers = new List&lt;int&gt;() {1,2,3,4,5,6};\n\nforeach (int n in numbers)\n{\n  if (n &lt; 4)\n  {\n    numbers.Remove(n); // Ger runtime-felmeddelande\n  }\n}\n</code></pre>"},{"location":"tekniker/ta-bort-saker-ur-listan-man-gar-igenom/#en-traditionell-losning","title":"En traditionell l\u00f6sning","text":"<p>Den h\u00e4r l\u00f6sningen inneb\u00e4r att man helt enkelt l\u00e4gger in alla saker som ska tas bort ur listan in i en ny, separat lista. Sedan g\u00e5r man igenom den listan, men tar bort sakerna ur den ursprungliga listan.</p> <pre><code>List&lt;int&gt; numbers = new List&lt;int&gt;() {1,2,3,4,5,6};\n\nList&lt;int&gt;numbersToRemove = new List&lt;int&gt;();\n\nforeach (int n in numbers)\n{\n  if (n &lt; 4)\n  {\n    numbersToRemove.Add(n);\n  }\n}\n\nforeach(int n in numbersToRemove)\n{\n  numbers.Remove(n);\n}\n\nnumbersToRemove.Clear();\n</code></pre>"},{"location":"tekniker/ta-bort-saker-ur-listan-man-gar-igenom/#lambda","title":"Lambda","text":"<p>RemoveAll()-metoden i List-klassen ger oss ett enklare s\u00e4tt att l\u00f6sa saken p\u00e5 \u00admed ett Lambda-uttryck:</p> <pre><code>List&lt;int&gt; numbers = new List&lt;int&gt;() {1,2,3,4,5,6};\n\nnumbers.RemoveAll(n =&gt; n &lt; 4);\n</code></pre>"},{"location":"tekniker/timers/","title":"Timers","text":"<p>Om man vill att n\u00e5got ska utf\u00f6ras till exempel var tionde g\u00e5ng en loop k\u00f6rs, kan man anv\u00e4nda sig av en \"timer\".</p> <pre><code>int timerMaxValue = 10;\nint timerCurrentValue = 10;\n\nwhile (true)\n{\n  timerCurrentValue--;\n  if (timerCurrentValue &lt;= 0)\n  {\n    Console.WriteLine(\"Tenth!\");\n    timerCurrentValue = timerMaxValue;\n  }\n}\n</code></pre> <p>Varje g\u00e5ng loopen ovan k\u00f6rs, s\u00e5 minskar timerns v\u00e4rde med 1.</p> <p>Om timerns v\u00e4rde blivit lika med eller under 0, s\u00e5 skriver programmet ut \"Tenth!\" och \u00e5terst\u00e4ller timern till dess maxv\u00e4rde.</p> <p>Det h\u00e4r kan s\u00e5klart byggas vidare p\u00e5 \u2013 i Unity eller Raylib kan man l\u00e5ta r\u00e4knarv\u00e4rdet vara en float, och dra av m\u00e4ngden tid sedan f\u00f6reg\u00e5ende frame (i Unity drar man d\u00e5 av <code>Time.DeltaTime</code>, i Raylib drar man av <code>Raylib.GetFrameTime()</code>.</p> <pre><code>float timerMaxValue = 1;\nfloat timerCurrentValue = timerMaxValue;\n\nwhile (!Raylib.WindowShouldClose())\n{\n  timerCurrentValue -= Raylib.GetFrameTime();\n  if (timerCurrentValue &lt; 0 &amp;&amp; Raylib.IsKeyDown(KeyboardKey.KEY_SPACE))\n  {\n    // G\u00f6r n\u00e5gonting, t.ex. skjut ett skott (varje sekund)\n\n    timerCurrentValue = timerMaxValue;\n  }\n\n  Raylib.BeginDrawing();\n  Raylib.EndDrawing();\n\n}\n</code></pre>"}]}